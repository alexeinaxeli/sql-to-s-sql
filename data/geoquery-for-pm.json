[{"question":"what is the biggest city in arizona", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'arizona' ) AND CITYalias0.STATE_NAME = 'arizona' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME arizona))) (= CITYALIAS0.STATE_NAME arizona)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 arizona) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((phoenix))", "goal-answer":"((phoenix))"},
{"question":"what texas city has the largest population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'texas' ) AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME texas))) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston))", "goal-answer":"((houston))"},
{"question":"what is the largest city in missouri", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'missouri' ) AND CITYalias0.STATE_NAME = 'missouri' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME missouri))) (= CITYALIAS0.STATE_NAME missouri)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((st. louis))", "goal-answer":"((st. louis))"},
{"question":"what is the biggest city in kansas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'kansas' ) AND CITYalias0.STATE_NAME = 'kansas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME kansas))) (= CITYALIAS0.STATE_NAME kansas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 kansas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((wichita))", "goal-answer":"((wichita))"},
{"question":"what is the biggest city in louisiana", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'louisiana' ) AND CITYalias0.STATE_NAME = 'louisiana' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME louisiana))) (= CITYALIAS0.STATE_NAME louisiana)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 louisiana) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new orleans))", "goal-answer":"((new orleans))"},
{"question":"what is the largest city in california", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'california' ) AND CITYalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME california))) (= CITYALIAS0.STATE_NAME california)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((los angeles))", "goal-answer":"((los angeles))"},
{"question":"what is the largest city in rhode island", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'rhode island' ) AND CITYalias0.STATE_NAME = 'rhode island' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME rhode island))) (= CITYALIAS0.STATE_NAME rhode island)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 rhode island) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((providence))", "goal-answer":"((providence))"},
{"question":"where is the most populated area of new mexico", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'new mexico' ) AND CITYalias0.STATE_NAME = 'new mexico' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME new mexico))) (= CITYALIAS0.STATE_NAME new mexico)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 new mexico) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((albuquerque))", "goal-answer":"((albuquerque))"},
{"question":"which city in california has the largest population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'california' ) AND CITYalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME california))) (= CITYALIAS0.STATE_NAME california)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((los angeles))", "goal-answer":"((los angeles))"},
{"question":"what is the biggest city in nebraska", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'nebraska' ) AND CITYalias0.STATE_NAME = 'nebraska' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME nebraska))) (= CITYALIAS0.STATE_NAME nebraska)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 nebraska) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((omaha))", "goal-answer":"((omaha))"},
{"question":"what is the biggest city in wyoming", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'wyoming' ) AND CITYalias0.STATE_NAME = 'wyoming' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME wyoming))) (= CITYALIAS0.STATE_NAME wyoming)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 wyoming) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((casper))", "goal-answer":"((casper))"},
{"question":"what is the largest city in michigan", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'michigan' ) AND CITYalias0.STATE_NAME = 'michigan' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME michigan))) (= CITYALIAS0.STATE_NAME michigan)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 michigan) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((detroit))", "goal-answer":"((detroit))"},
{"question":"what is the largest city in texas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'texas' ) AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME texas))) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston))", "goal-answer":"((houston))"},
{"question":"what cities in texas have the highest number of citizens", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'texas' ) AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME texas))) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston))", "goal-answer":"((houston))"},
{"question":"what cities in texas have the highest populations", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'texas' ) AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME texas))) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston))", "goal-answer":"((houston))"},
{"question":"what is the most populous city in texas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'texas' ) AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME texas))) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston))", "goal-answer":"((houston))"},
{"question":"what is the largest city in minnesota by population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'minnesota' ) AND CITYalias0.STATE_NAME = 'minnesota' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME minnesota))) (= CITYALIAS0.STATE_NAME minnesota)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 minnesota) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((minneapolis))", "goal-answer":"((minneapolis))"},
{"question":"what is the biggest city in texas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'texas' ) AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME texas))) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston))", "goal-answer":"((houston))"},
{"question":"what is the largest city in alabama", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'alabama' ) AND CITYalias0.STATE_NAME = 'alabama' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME alabama))) (= CITYALIAS0.STATE_NAME alabama)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 alabama) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((birmingham))", "goal-answer":"((birmingham))"},
{"question":"what is the biggest city in oregon", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'oregon' ) AND CITYalias0.STATE_NAME = 'oregon' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME oregon))) (= CITYALIAS0.STATE_NAME oregon)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 oregon) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((portland))", "goal-answer":"((portland))"},
{"question":"what is the biggest city in georgia", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'georgia' ) AND CITYalias0.STATE_NAME = 'georgia' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME georgia))) (= CITYALIAS0.STATE_NAME georgia)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 georgia) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((atlanta))", "goal-answer":"((atlanta))"},
{"question":"what is the largest city in wisconsin", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'wisconsin' ) AND CITYalias0.STATE_NAME = 'wisconsin' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME wisconsin))) (= CITYALIAS0.STATE_NAME wisconsin)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 wisconsin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((milwaukee))", "goal-answer":"((milwaukee))"},
{"question":"what is the largest city of kansas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'kansas' ) AND CITYalias0.STATE_NAME = 'kansas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME kansas))) (= CITYALIAS0.STATE_NAME kansas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 kansas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((wichita))", "goal-answer":"((wichita))"},
{"question":"what is the city in texas with the largest population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'texas' ) AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME texas))) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston))", "goal-answer":"((houston))"},
{"question":"what is the most populous city in wyoming", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'wyoming' ) AND CITYalias0.STATE_NAME = 'wyoming' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME wyoming))) (= CITYALIAS0.STATE_NAME wyoming)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 wyoming) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((casper))", "goal-answer":"((casper))"},
{"question":"which rivers run through the state with the largest city in the us", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-9 POPULATION) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND CONCEPT ?ALIAS-2 CITYALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 CITY))", "answer":"((delaware) (allegheny) (hudson))", "goal-answer":"((delaware) (allegheny) (hudson))"},
{"question":"how big is texas", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((266807.0D0))", "goal-answer":"((266807.0D0))"},
{"question":"what is the area of california", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((158000.0D0))", "goal-answer":"((158000.0D0))"},
{"question":"how big is new mexico", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new mexico' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new mexico))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 new mexico) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((121600.0D0))", "goal-answer":"((121600.0D0))"},
{"question":"how large is alaska", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((591000.0D0))", "goal-answer":"((591000.0D0))"},
{"question":"how large is texas", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((266807.0D0))", "goal-answer":"((266807.0D0))"},
{"question":"what is the area of florida", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'florida' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME florida))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 florida) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((68664.0D0))", "goal-answer":"((68664.0D0))"},
{"question":"what is the area of ohio", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'ohio' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME ohio))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((41300.0D0))", "goal-answer":"((41300.0D0))"},
{"question":"what is the area of the texas state", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((266807.0D0))", "goal-answer":"((266807.0D0))"},
{"question":"what is the area of wisconsin", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'wisconsin' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME wisconsin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 wisconsin) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((56153.0D0))", "goal-answer":"((56153.0D0))"},
{"question":"what is the size of texas", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((266807.0D0))", "goal-answer":"((266807.0D0))"},
{"question":"what is the area of maryland in square kilometers", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'maryland' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME maryland))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 maryland) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((10460.0D0))", "goal-answer":"((10460.0D0))"},
{"question":"what is the area of maine", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'maine' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME maine))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 maine) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((33265.0D0))", "goal-answer":"((33265.0D0))"},
{"question":"what is the size of florida", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'florida' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME florida))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 florida) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((68664.0D0))", "goal-answer":"((68664.0D0))"},
{"question":"what is the area of south carolina", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'south carolina' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME south carolina))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 south carolina) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((31113.0D0))", "goal-answer":"((31113.0D0))"},
{"question":"what is the size of california", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((158000.0D0))", "goal-answer":"((158000.0D0))"},
{"question":"how big is alaska", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((591000.0D0))", "goal-answer":"((591000.0D0))"},
{"question":"what is the area of idaho", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'idaho' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME idaho))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 idaho) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((83000.0D0))", "goal-answer":"((83000.0D0))"},
{"question":"what is the area of alaska", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((591000.0D0))", "goal-answer":"((591000.0D0))"},
{"question":"what is the area of texas", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((266807.0D0))", "goal-answer":"((266807.0D0))"},
{"question":"what is the area of washington", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'washington' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME washington))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 washington) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((68139.0D0))", "goal-answer":"((68139.0D0))"},
{"question":"how big is north dakota", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'north dakota' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME north dakota))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 north dakota) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((70700.0D0))", "goal-answer":"((70700.0D0))"},
{"question":"how big is massachusetts", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'massachusetts' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME massachusetts))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 massachusetts) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((8284.0D0))", "goal-answer":"((8284.0D0))"},
{"question":"what is the area of new mexico", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new mexico' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new mexico))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 new mexico) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((121600.0D0))", "goal-answer":"((121600.0D0))"},
{"question":"how many people live in washington", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'washington' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME washington))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 washington) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((4113200))", "goal-answer":"((4113200))"},
{"question":"how many people live in mississippi", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'mississippi' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((2520000))", "goal-answer":"((2520000))"},
{"question":"how many people live in rhode island", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'rhode island' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME rhode island))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 rhode island) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((947200))", "goal-answer":"((947200))"},
{"question":"how many people reside in utah", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'utah' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME utah))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 utah) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((1461000))", "goal-answer":"((1461000))"},
{"question":"how many residents live in texas", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((14229000))", "goal-answer":"((14229000))"},
{"question":"how much population does texas have", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((14229000))", "goal-answer":"((14229000))"},
{"question":"what are the population of mississippi", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'mississippi' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((2520000))", "goal-answer":"((2520000))"},
{"question":"what is the population of alaska", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((401800))", "goal-answer":"((401800))"},
{"question":"what is the population of hawaii", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'hawaii' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME hawaii))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 hawaii) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((964000))", "goal-answer":"((964000))"},
{"question":"what is the population of maryland", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'maryland' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME maryland))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 maryland) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((4217000))", "goal-answer":"((4217000))"},
{"question":"what is the population of new mexico", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new mexico' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new mexico))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 new mexico) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((1303000))", "goal-answer":"((1303000))"},
{"question":"what is the population of utah", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'utah' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME utah))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 utah) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((1461000))", "goal-answer":"((1461000))"},
{"question":"what is the population of washington", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'washington' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME washington))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 washington) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((4113200))", "goal-answer":"((4113200))"},
{"question":"how many people live in new mexico", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new mexico' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new mexico))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 new mexico) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((1303000))", "goal-answer":"((1303000))"},
{"question":"what is the population of new york", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new york' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((17558000))", "goal-answer":"((17558000))"},
{"question":"what is the population of california", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((23670000))", "goal-answer":"((23670000))"},
{"question":"what is the population of maine", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'maine' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME maine))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 maine) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((1125000))", "goal-answer":"((1125000))"},
{"question":"how many people are in the state of nevada", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'nevada' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME nevada))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 nevada) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((800500))", "goal-answer":"((800500))"},
{"question":"what can you tell me about the population of missouri", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'missouri' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((4916000))", "goal-answer":"((4916000))"},
{"question":"what is the population of rhode island", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'rhode island' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME rhode island))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 rhode island) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((947200))", "goal-answer":"((947200))"},
{"question":"how many people are there in new york", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new york' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((17558000))", "goal-answer":"((17558000))"},
{"question":"what is the population of oregon", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'oregon' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME oregon))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 oregon) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((2633000))", "goal-answer":"((2633000))"},
{"question":"what is the population of illinois", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'illinois' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME illinois))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 illinois) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((11400000))", "goal-answer":"((11400000))"},
{"question":"how many people live in south dakota", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'south dakota' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME south dakota))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 south dakota) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((690767))", "goal-answer":"((690767))"},
{"question":"how many people live in hawaii", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'hawaii' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME hawaii))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 hawaii) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((964000))", "goal-answer":"((964000))"},
{"question":"what is the population of idaho", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'idaho' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME idaho))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 idaho) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((944000))", "goal-answer":"((944000))"},
{"question":"how many people live in montana", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'montana' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME montana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((786700))", "goal-answer":"((786700))"},
{"question":"how many people are there in iowa", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'iowa' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((2913000))", "goal-answer":"((2913000))"},
{"question":"how many people live in kansas", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'kansas' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME kansas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 kansas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((2364000))", "goal-answer":"((2364000))"},
{"question":"how many people live in california", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((23670000))", "goal-answer":"((23670000))"},
{"question":"what is the population of montana", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'montana' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME montana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((786700))", "goal-answer":"((786700))"},
{"question":"how many people live in new hampshire", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new hampshire' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new hampshire))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 new hampshire) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((920600))", "goal-answer":"((920600))"},
{"question":"how many people live in new york", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new york' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((17558000))", "goal-answer":"((17558000))"},
{"question":"how many citizens in alabama", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'alabama' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME alabama))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 alabama) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((3894000))", "goal-answer":"((3894000))"},
{"question":"what is the population of arizona", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'arizona' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME arizona))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 arizona) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((2718000))", "goal-answer":"((2718000))"},
{"question":"what is the population of south dakota", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'south dakota' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME south dakota))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 south dakota) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((690767))", "goal-answer":"((690767))"},
{"question":"what is the population of minnesota", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'minnesota' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME minnesota))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 minnesota) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((4076000))", "goal-answer":"((4076000))"},
{"question":"what is the population of texas", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((14229000))", "goal-answer":"((14229000))"},
{"question":"how many people stay in utah", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'utah' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME utah))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 utah) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((1461000))", "goal-answer":"((1461000))"},
{"question":"how many people live in texas", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((14229000))", "goal-answer":"((14229000))"},
{"question":"how many citizens live in california", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((23670000))", "goal-answer":"((23670000))"},
{"question":"what state has the smallest population", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MIN( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MIN STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what is the least populous state", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MIN( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MIN STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what is the state with the lowest population", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MIN( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MIN STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"give me the cities in virginia", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = 'virginia' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.STATE_NAME virginia))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 virginia) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((norfolk) (virginia beach) (richmond) (arlington) (newport news) (hampton) (chesapeake) (portsmouth) (alexandria) (roanoke) (lynchburg))", "goal-answer":"((norfolk) (virginia beach) (richmond) (arlington) (newport news) (hampton) (chesapeake) (portsmouth) (alexandria) (roanoke) (lynchburg))"},
{"question":"tell me what cities are in texas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (amarillo) (garland) (beaumont) (pasadena) (irving) (waco) (abilene) (wichita falls) (laredo) (odessa) (brownsville) (san angelo) (richardson) (plano) (grand prairie) (midland) (tyler) (mesquite) (mcallen) (longview) (port arthur))", "goal-answer":"((houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (amarillo) (garland) (beaumont) (pasadena) (irving) (waco) (abilene) (wichita falls) (laredo) (odessa) (brownsville) (san angelo) (richardson) (plano) (grand prairie) (midland) (tyler) (mesquite) (mcallen) (longview) (port arthur))"},
{"question":"what cities are located in pennsylvania", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = 'pennsylvania' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.STATE_NAME pennsylvania))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 pennsylvania) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((philadelphia) (pittsburgh) (erie) (allentown) (scranton) (upper darby) (reading) (bethlehem) (lower merion) (abingdon) (bristol township) (penn hills) (altoona))", "goal-answer":"((philadelphia) (pittsburgh) (erie) (allentown) (scranton) (upper darby) (reading) (bethlehem) (lower merion) (abingdon) (bristol township) (penn hills) (altoona))"},
{"question":"what are the cities in california", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (stockton) (glendale) (fremont) (torrance) (garden grove) (san bernardino) (pasadena) (east los angeles) (oxnard) (modesto) (sunnyvale) (bakersfield) (concord) (berkeley) (fullerton) (inglewood) (hayward) (pomona) (orange) (ontario) (santa monica) (santa clara) (citrus heights) (norwalk) (burbank) (chula vista) (santa rosa) (downey) (costa mesa) (compton) (carson) (salinas) (west covina) (vallejo) (el monte) (daly city) (thousand oaks) (san mateo) (simi valley) (oceanside) (richmond) (lakewood) (santa barbara) (el cajon) (ventura) (westminster) (whittier) (south gate) (alhambra) (buena park) (san leandro) (alameda) (newport beach) (escondido) (irvine) (mountain view) (fairfield) (redondo beach) (scotts valley))", "goal-answer":"((los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (stockton) (glendale) (fremont) (torrance) (garden grove) (san bernardino) (pasadena) (east los angeles) (oxnard) (modesto) (sunnyvale) (bakersfield) (concord) (berkeley) (fullerton) (inglewood) (hayward) (pomona) (orange) (ontario) (santa monica) (santa clara) (citrus heights) (norwalk) (burbank) (chula vista) (santa rosa) (downey) (costa mesa) (compton) (carson) (salinas) (west covina) (vallejo) (el monte) (daly city) (thousand oaks) (san mateo) (simi valley) (oceanside) (richmond) (lakewood) (santa barbara) (el cajon) (ventura) (westminster) (whittier) (south gate) (alhambra) (buena park) (san leandro) (alameda) (newport beach) (escondido) (irvine) (mountain view) (fairfield) (redondo beach) (scotts valley))"},
{"question":"give me the cities in texas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (amarillo) (garland) (beaumont) (pasadena) (irving) (waco) (abilene) (wichita falls) (laredo) (odessa) (brownsville) (san angelo) (richardson) (plano) (grand prairie) (midland) (tyler) (mesquite) (mcallen) (longview) (port arthur))", "goal-answer":"((houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (amarillo) (garland) (beaumont) (pasadena) (irving) (waco) (abilene) (wichita falls) (laredo) (odessa) (brownsville) (san angelo) (richardson) (plano) (grand prairie) (midland) (tyler) (mesquite) (mcallen) (longview) (port arthur))"},
{"question":"what cities in california", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (stockton) (glendale) (fremont) (torrance) (garden grove) (san bernardino) (pasadena) (east los angeles) (oxnard) (modesto) (sunnyvale) (bakersfield) (concord) (berkeley) (fullerton) (inglewood) (hayward) (pomona) (orange) (ontario) (santa monica) (santa clara) (citrus heights) (norwalk) (burbank) (chula vista) (santa rosa) (downey) (costa mesa) (compton) (carson) (salinas) (west covina) (vallejo) (el monte) (daly city) (thousand oaks) (san mateo) (simi valley) (oceanside) (richmond) (lakewood) (santa barbara) (el cajon) (ventura) (westminster) (whittier) (south gate) (alhambra) (buena park) (san leandro) (alameda) (newport beach) (escondido) (irvine) (mountain view) (fairfield) (redondo beach) (scotts valley))", "goal-answer":"((los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (stockton) (glendale) (fremont) (torrance) (garden grove) (san bernardino) (pasadena) (east los angeles) (oxnard) (modesto) (sunnyvale) (bakersfield) (concord) (berkeley) (fullerton) (inglewood) (hayward) (pomona) (orange) (ontario) (santa monica) (santa clara) (citrus heights) (norwalk) (burbank) (chula vista) (santa rosa) (downey) (costa mesa) (compton) (carson) (salinas) (west covina) (vallejo) (el monte) (daly city) (thousand oaks) (san mateo) (simi valley) (oceanside) (richmond) (lakewood) (santa barbara) (el cajon) (ventura) (westminster) (whittier) (south gate) (alhambra) (buena park) (san leandro) (alameda) (newport beach) (escondido) (irvine) (mountain view) (fairfield) (redondo beach) (scotts valley))"},
{"question":"give me the cities which are in texas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (amarillo) (garland) (beaumont) (pasadena) (irving) (waco) (abilene) (wichita falls) (laredo) (odessa) (brownsville) (san angelo) (richardson) (plano) (grand prairie) (midland) (tyler) (mesquite) (mcallen) (longview) (port arthur))", "goal-answer":"((houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (amarillo) (garland) (beaumont) (pasadena) (irving) (waco) (abilene) (wichita falls) (laredo) (odessa) (brownsville) (san angelo) (richardson) (plano) (grand prairie) (midland) (tyler) (mesquite) (mcallen) (longview) (port arthur))"},
{"question":"what is the area of the state with the capital albany", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'albany' ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL albany))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?COMPARATOR-0 albany) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((49100.0D0))", "goal-answer":"((49100.0D0))"},
{"question":"give me the lakes in california", "sql-query":"SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT LAKEALIAS0.LAKE_NAME FROM (AS LAKE LAKEALIAS0) WHERE (= LAKEALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LAKE_NAME) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 LAKEALIAS0) (BIND TABLE ?TABLE-0 LAKE))", "answer":"((salton sea) (tahoe))", "goal-answer":"((salton sea) (tahoe))"},
{"question":"name the major lakes in michigan", "sql-query":"SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 AND LAKEalias0.STATE_NAME = 'michigan' ;", "s-sql-query":"(SELECT LAKEALIAS0.LAKE_NAME FROM (AS LAKE LAKEALIAS0) WHERE (AND (> LAKEALIAS0.AREA 750) (= LAKEALIAS0.STATE_NAME michigan)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 AREA) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 LAKE_NAME) (BIND CONCEPT ?COMPARATOR-0 michigan) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?ALIAS-0 LAKEALIAS0) (BIND TABLE ?TABLE-0 LAKE))", "answer":"((superior) (huron) (michigan) (erie) (st. clair))", "goal-answer":"((superior) (huron) (michigan) (erie) (st. clair))"},
{"question":"what are the states", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alabama) (alaska) (arizona) (arkansas) (california) (colorado) (connecticut) (delaware) (district of columbia) (florida) (georgia) (hawaii) (idaho) (illinois) (indiana) (iowa) (kansas) (kentucky) (louisiana) (maine) (maryland) (massachusetts) (michigan) (minnesota) (mississippi) (missouri) (montana) (nebraska) (nevada) (new hampshire) (new jersey) (new mexico) (new york) (north carolina) (north dakota) (ohio) (oklahoma) (oregon) (pennsylvania) (rhode island) (south carolina) (south dakota) (tennessee) (texas) (utah) (vermont) (virginia) (washington) (west virginia) (wisconsin) (wyoming))", "goal-answer":"((alabama) (alaska) (arizona) (arkansas) (california) (colorado) (connecticut) (delaware) (district of columbia) (florida) (georgia) (hawaii) (idaho) (illinois) (indiana) (iowa) (kansas) (kentucky) (louisiana) (maine) (maryland) (massachusetts) (michigan) (minnesota) (mississippi) (missouri) (montana) (nebraska) (nevada) (new hampshire) (new jersey) (new mexico) (new york) (north carolina) (north dakota) (ohio) (oklahoma) (oregon) (pennsylvania) (rhode island) (south carolina) (south dakota) (tennessee) (texas) (utah) (vermont) (virginia) (washington) (west virginia) (wisconsin) (wyoming))"},
{"question":"list the states", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alabama) (alaska) (arizona) (arkansas) (california) (colorado) (connecticut) (delaware) (district of columbia) (florida) (georgia) (hawaii) (idaho) (illinois) (indiana) (iowa) (kansas) (kentucky) (louisiana) (maine) (maryland) (massachusetts) (michigan) (minnesota) (mississippi) (missouri) (montana) (nebraska) (nevada) (new hampshire) (new jersey) (new mexico) (new york) (north carolina) (north dakota) (ohio) (oklahoma) (oregon) (pennsylvania) (rhode island) (south carolina) (south dakota) (tennessee) (texas) (utah) (vermont) (virginia) (washington) (west virginia) (wisconsin) (wyoming))", "goal-answer":"((alabama) (alaska) (arizona) (arkansas) (california) (colorado) (connecticut) (delaware) (district of columbia) (florida) (georgia) (hawaii) (idaho) (illinois) (indiana) (iowa) (kansas) (kentucky) (louisiana) (maine) (maryland) (massachusetts) (michigan) (minnesota) (mississippi) (missouri) (montana) (nebraska) (nevada) (new hampshire) (new jersey) (new mexico) (new york) (north carolina) (north dakota) (ohio) (oklahoma) (oregon) (pennsylvania) (rhode island) (south carolina) (south dakota) (tennessee) (texas) (utah) (vermont) (virginia) (washington) (west virginia) (wisconsin) (wyoming))"},
{"question":"give me all the states of usa", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alabama) (alaska) (arizona) (arkansas) (california) (colorado) (connecticut) (delaware) (district of columbia) (florida) (georgia) (hawaii) (idaho) (illinois) (indiana) (iowa) (kansas) (kentucky) (louisiana) (maine) (maryland) (massachusetts) (michigan) (minnesota) (mississippi) (missouri) (montana) (nebraska) (nevada) (new hampshire) (new jersey) (new mexico) (new york) (north carolina) (north dakota) (ohio) (oklahoma) (oregon) (pennsylvania) (rhode island) (south carolina) (south dakota) (tennessee) (texas) (utah) (vermont) (virginia) (washington) (west virginia) (wisconsin) (wyoming))", "goal-answer":"((alabama) (alaska) (arizona) (arkansas) (california) (colorado) (connecticut) (delaware) (district of columbia) (florida) (georgia) (hawaii) (idaho) (illinois) (indiana) (iowa) (kansas) (kentucky) (louisiana) (maine) (maryland) (massachusetts) (michigan) (minnesota) (mississippi) (missouri) (montana) (nebraska) (nevada) (new hampshire) (new jersey) (new mexico) (new york) (north carolina) (north dakota) (ohio) (oklahoma) (oregon) (pennsylvania) (rhode island) (south carolina) (south dakota) (tennessee) (texas) (utah) (vermont) (virginia) (washington) (west virginia) (wisconsin) (wyoming))"},
{"question":"which states do colorado river flow through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado) (utah) (arizona) (nevada) (california))", "goal-answer":"((colorado) (utah) (arizona) (nevada) (california))"},
{"question":"what states does the colorado river run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado) (utah) (arizona) (nevada) (california))", "goal-answer":"((colorado) (utah) (arizona) (nevada) (california))"},
{"question":"what states border the mississippi river", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))", "goal-answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))"},
{"question":"which states border the missouri river", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'missouri' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))", "goal-answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))"},
{"question":"what states does the delaware river run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'delaware' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME delaware))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 delaware) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((new york) (pennsylvania) (new jersey) (delaware))", "goal-answer":"((new york) (pennsylvania) (new jersey) (delaware))"},
{"question":"what states does the mississippi river run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))", "goal-answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))"},
{"question":"what states does the missouri run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'missouri' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))", "goal-answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))"},
{"question":"what states does the ohio river run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'ohio' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME ohio))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((pennsylvania) (west virginia) (kentucky) (indiana) (illinois) (illinois) (ohio))", "goal-answer":"((pennsylvania) (west virginia) (kentucky) (indiana) (illinois) (illinois) (ohio))"},
{"question":"where is the chattahoochee river", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'chattahoochee' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME chattahoochee))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 chattahoochee) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((georgia) (georgia) (florida))", "goal-answer":"((georgia) (georgia) (florida))"},
{"question":"which states does the chattahoochee river run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'chattahoochee' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME chattahoochee))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 chattahoochee) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((georgia) (georgia) (florida))", "goal-answer":"((georgia) (georgia) (florida))"},
{"question":"which states does the mississippi run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))", "goal-answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))"},
{"question":"what states does the missouri river run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'missouri' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))", "goal-answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))"},
{"question":"which states does the missouri river pass through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'missouri' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))", "goal-answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))"},
{"question":"what states does the mississippi run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))", "goal-answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))"},
{"question":"which states does the colorado river run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado) (utah) (arizona) (nevada) (california))", "goal-answer":"((colorado) (utah) (arizona) (nevada) (california))"},
{"question":"what are the states that the potomac run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'potomac' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME potomac))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 potomac) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((west virginia) (maryland) (virginia) (district of columbia))", "goal-answer":"((west virginia) (maryland) (virginia) (district of columbia))"},
{"question":"which states does the missouri river run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'missouri' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))", "goal-answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))"},
{"question":"which state has the red river", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'red' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME red))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 red) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((new mexico) (texas) (oklahoma) (arkansas) (arkansas) (louisiana))", "goal-answer":"((new mexico) (texas) (oklahoma) (arkansas) (arkansas) (louisiana))"},
{"question":"what states have rivers named colorado", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado) (utah) (arizona) (nevada) (california))", "goal-answer":"((colorado) (utah) (arizona) (nevada) (california))"},
{"question":"through which states does the mississippi flow", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))", "goal-answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))"},
{"question":"which states does the mississippi river run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))", "goal-answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))"},
{"question":"what states are next to the mississippi", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))", "goal-answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))"},
{"question":"through which states does the mississippi run", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))", "goal-answer":"((minnesota) (wisconsin) (iowa) (illinois) (missouri) (kentucky) (tennessee) (arkansas) (mississippi) (louisiana) (louisiana))"},
{"question":"what states does the ohio river go through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'ohio' ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME ohio))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((pennsylvania) (west virginia) (kentucky) (indiana) (illinois) (illinois) (ohio))", "goal-answer":"((pennsylvania) (west virginia) (kentucky) (indiana) (illinois) (illinois) (ohio))"},
{"question":"what state has the largest population", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"what is the most populous state", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"what state is the largest in population", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"which state has the biggest population", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"which state has the greatest population", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"which state has the most population", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"what state has the most people", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"which state has the most people", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"what is the most populous state in the us", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"what state has the highest population", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"what is the lowest elevation in pennsylvania", "sql-query":"SELECT HIGHLOWalias0.LOWEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'pennsylvania' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME pennsylvania))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 pennsylvania) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((0))", "goal-answer":"((0))"},
{"question":"what is the length of the longest river in the usa", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-3) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (DISTINCT ?AGGREGATOR-1 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3968))", "goal-answer":"((3968))"},
{"question":"how long is the longest river in the usa", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-3) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (DISTINCT ?AGGREGATOR-1 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3968))", "goal-answer":"((3968))"},
{"question":"what is the longest river flowing through new york", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'new york' ) AND RIVERalias0.TRAVERSE = 'new york' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE new york))) (= RIVERALIAS0.TRAVERSE new york)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((allegheny))", "goal-answer":"((allegheny))"},
{"question":"what is the largest river in washington state", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'washington' ) AND RIVERalias0.TRAVERSE = 'washington' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE washington))) (= RIVERALIAS0.TRAVERSE washington)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 washington) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((columbia))", "goal-answer":"((columbia))"},
{"question":"what is the longest river in florida", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'florida' ) AND RIVERalias0.TRAVERSE = 'florida' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE florida))) (= RIVERALIAS0.TRAVERSE florida)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 florida) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((chattahoochee))", "goal-answer":"((chattahoochee))"},
{"question":"what is the biggest river in illinois", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'illinois' ) AND RIVERalias0.TRAVERSE = 'illinois' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE illinois))) (= RIVERALIAS0.TRAVERSE illinois)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 illinois) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"what is the longest river in new york", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'new york' ) AND RIVERalias0.TRAVERSE = 'new york' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE new york))) (= RIVERALIAS0.TRAVERSE new york)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((allegheny))", "goal-answer":"((allegheny))"},
{"question":"what is the longest river in mississippi", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'mississippi' ) AND RIVERalias0.TRAVERSE = 'mississippi' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE mississippi))) (= RIVERALIAS0.TRAVERSE mississippi)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"what is the longest river that flows through colorado", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'colorado' ) AND RIVERalias0.TRAVERSE = 'colorado' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE colorado))) (= RIVERALIAS0.TRAVERSE colorado)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((rio grande))", "goal-answer":"((rio grande))"},
{"question":"what are the biggest rivers in texas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'texas' ) AND RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE texas))) (= RIVERALIAS0.TRAVERSE texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((rio grande))", "goal-answer":"((rio grande))"},
{"question":"what is the longest river in california", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'california' ) AND RIVERalias0.TRAVERSE = 'california' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE california))) (= RIVERALIAS0.TRAVERSE california)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"what is the longest river in pennsylvania", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'pennsylvania' ) AND RIVERalias0.TRAVERSE = 'pennsylvania' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE pennsylvania))) (= RIVERALIAS0.TRAVERSE pennsylvania)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 pennsylvania) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((ohio))", "goal-answer":"((ohio))"},
{"question":"what is the longest river in texas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'texas' ) AND RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE texas))) (= RIVERALIAS0.TRAVERSE texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((rio grande))", "goal-answer":"((rio grande))"},
{"question":"how many rivers are in new york", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'new york' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3))", "goal-answer":"((3))"},
{"question":"give me the number of rivers in california", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'california' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((1))", "goal-answer":"((1))"},
{"question":"how many rivers are in iowa", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'iowa' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((2))", "goal-answer":"((2))"},
{"question":"how many rivers does colorado have", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'colorado' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((11))", "goal-answer":"((11))"},
{"question":"how many rivers are in colorado", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'colorado' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((11))", "goal-answer":"((11))"},
{"question":"how many rivers are there in texas", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((5))", "goal-answer":"((5))"},
{"question":"how many rivers run through texas", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((5))", "goal-answer":"((5))"},
{"question":"how many rivers are found in colorado", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'colorado' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((11))", "goal-answer":"((11))"},
{"question":"how many rivers in washington", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'washington' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE washington))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 washington) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3))", "goal-answer":"((3))"},
{"question":"how many rivers does alaska have", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'alaska' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((0))", "goal-answer":"((0))"},
{"question":"how many rivers are in missouri", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'missouri' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((5))", "goal-answer":"((5))"},
{"question":"how many rivers are there in idaho", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'idaho' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE idaho))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 idaho) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((2))", "goal-answer":"((2))"},
{"question":"what states neighbor maine", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'maine' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME maine))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 maine) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((new hampshire))", "goal-answer":"((new hampshire))"},
{"question":"which states border iowa", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'iowa' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota))", "goal-answer":"((minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota))"},
{"question":"what states border delaware", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'delaware' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME delaware))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 delaware) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((pennsylvania) (new jersey) (maryland))", "goal-answer":"((pennsylvania) (new jersey) (maryland))"},
{"question":"give me the states that border utah", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'utah' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME utah))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 utah) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((wyoming) (colorado) (new mexico) (arizona) (nevada) (idaho))", "goal-answer":"((wyoming) (colorado) (new mexico) (arizona) (nevada) (idaho))"},
{"question":"what state borders new york", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'new york' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((vermont) (massachusetts) (connecticut) (new jersey) (pennsylvania))", "goal-answer":"((vermont) (massachusetts) (connecticut) (new jersey) (pennsylvania))"},
{"question":"what states are next to arizona", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'arizona' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME arizona))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 arizona) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((utah) (colorado) (new mexico) (california) (nevada))", "goal-answer":"((utah) (colorado) (new mexico) (california) (nevada))"},
{"question":"what states border florida", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'florida' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME florida))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 florida) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((georgia) (alabama))", "goal-answer":"((georgia) (alabama))"},
{"question":"what states border indiana", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'indiana' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME indiana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 indiana) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((michigan) (ohio) (kentucky) (illinois))", "goal-answer":"((michigan) (ohio) (kentucky) (illinois))"},
{"question":"what states border michigan", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'michigan' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME michigan))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 michigan) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((ohio) (indiana) (wisconsin))", "goal-answer":"((ohio) (indiana) (wisconsin))"},
{"question":"what states border montana", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'montana' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME montana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((north dakota) (south dakota) (wyoming) (idaho))", "goal-answer":"((north dakota) (south dakota) (wyoming) (idaho))"},
{"question":"what states border new jersey", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'new jersey' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME new jersey))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 new jersey) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((new york) (delaware) (pennsylvania))", "goal-answer":"((new york) (delaware) (pennsylvania))"},
{"question":"what states surround kentucky", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'kentucky' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME kentucky))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 kentucky) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois))", "goal-answer":"((indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois))"},
{"question":"which state borders hawaii", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'hawaii' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME hawaii))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 hawaii) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"which states border illinois", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'illinois' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME illinois))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 illinois) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((wisconsin) (indiana) (kentucky) (missouri) (iowa))", "goal-answer":"((wisconsin) (indiana) (kentucky) (missouri) (iowa))"},
{"question":"which states border kentucky", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'kentucky' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME kentucky))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 kentucky) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois))", "goal-answer":"((indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois))"},
{"question":"what states border missouri", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'missouri' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska))", "goal-answer":"((iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska))"},
{"question":"what states border ohio", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'ohio' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME ohio))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((michigan) (pennsylvania) (west virginia) (kentucky) (indiana))", "goal-answer":"((michigan) (pennsylvania) (west virginia) (kentucky) (indiana))"},
{"question":"what states are next to texas", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((oklahoma) (arkansas) (louisiana) (new mexico))", "goal-answer":"((oklahoma) (arkansas) (louisiana) (new mexico))"},
{"question":"what states border alaska", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"which states border new york", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'new york' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((vermont) (massachusetts) (connecticut) (new jersey) (pennsylvania))", "goal-answer":"((vermont) (massachusetts) (connecticut) (new jersey) (pennsylvania))"},
{"question":"what states border hawaii", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'hawaii' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME hawaii))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 hawaii) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what are the neighboring states for michigan", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'michigan' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME michigan))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 michigan) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((ohio) (indiana) (wisconsin))", "goal-answer":"((ohio) (indiana) (wisconsin))"},
{"question":"which state borders florida", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'florida' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME florida))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 florida) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((georgia) (alabama))", "goal-answer":"((georgia) (alabama))"},
{"question":"what states border georgia", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'georgia' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME georgia))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 georgia) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((north carolina) (south carolina) (florida) (alabama) (tennessee))", "goal-answer":"((north carolina) (south carolina) (florida) (alabama) (tennessee))"},
{"question":"what states border new hampshire", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'new hampshire' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME new hampshire))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 new hampshire) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((maine) (massachusetts) (vermont))", "goal-answer":"((maine) (massachusetts) (vermont))"},
{"question":"what states border rhode island", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'rhode island' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME rhode island))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 rhode island) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((massachusetts) (connecticut))", "goal-answer":"((massachusetts) (connecticut))"},
{"question":"which states border texas", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((oklahoma) (arkansas) (louisiana) (new mexico))", "goal-answer":"((oklahoma) (arkansas) (louisiana) (new mexico))"},
{"question":"which states border michigan", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'michigan' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME michigan))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 michigan) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((ohio) (indiana) (wisconsin))", "goal-answer":"((ohio) (indiana) (wisconsin))"},
{"question":"which states border alaska", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"which states border south dakota", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'south dakota' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME south dakota))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 south dakota) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((north dakota) (minnesota) (iowa) (nebraska) (wyoming) (montana))", "goal-answer":"((north dakota) (minnesota) (iowa) (nebraska) (wyoming) (montana))"},
{"question":"what states border arkansas", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'arkansas' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME arkansas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 arkansas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((missouri) (tennessee) (mississippi) (louisiana) (texas) (oklahoma))", "goal-answer":"((missouri) (tennessee) (mississippi) (louisiana) (texas) (oklahoma))"},
{"question":"which states adjoin alabama", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'alabama' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME alabama))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 alabama) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((tennessee) (georgia) (florida) (mississippi))", "goal-answer":"((tennessee) (georgia) (florida) (mississippi))"},
{"question":"what states border texas", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((oklahoma) (arkansas) (louisiana) (new mexico))", "goal-answer":"((oklahoma) (arkansas) (louisiana) (new mexico))"},
{"question":"what state borders michigan", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'michigan' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME michigan))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 michigan) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((ohio) (indiana) (wisconsin))", "goal-answer":"((ohio) (indiana) (wisconsin))"},
{"question":"which states border colorado", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'colorado' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((nebraska) (kansas) (oklahoma) (new mexico) (arizona) (utah) (wyoming))", "goal-answer":"((nebraska) (kansas) (oklahoma) (new mexico) (arizona) (utah) (wyoming))"},
{"question":"states bordering iowa", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'iowa' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota))", "goal-answer":"((minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota))"},
{"question":"which states border alabama", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'alabama' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME alabama))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 alabama) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((tennessee) (georgia) (florida) (mississippi))", "goal-answer":"((tennessee) (georgia) (florida) (mississippi))"},
{"question":"which state border kentucky", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'kentucky' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME kentucky))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 kentucky) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois))", "goal-answer":"((indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois))"},
{"question":"what is the adjacent state of california", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((oregon) (nevada) (arizona))", "goal-answer":"((oregon) (nevada) (arizona))"},
{"question":"which states border hawaii", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'hawaii' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME hawaii))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 hawaii) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what states border wisconsin", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'wisconsin' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME wisconsin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 wisconsin) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((michigan) (illinois) (iowa) (minnesota))", "goal-answer":"((michigan) (illinois) (iowa) (minnesota))"},
{"question":"which states border arizona", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'arizona' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME arizona))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 arizona) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((utah) (colorado) (new mexico) (california) (nevada))", "goal-answer":"((utah) (colorado) (new mexico) (california) (nevada))"},
{"question":"what states border kentucky", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'kentucky' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME kentucky))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 kentucky) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois))", "goal-answer":"((indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois))"},
{"question":"name all the rivers in colorado", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'colorado' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado) (arkansas) (canadian) (green) (north platte) (republican) (rio grande) (san juan) (san juan) (smoky hill) (south platte))", "goal-answer":"((colorado) (arkansas) (canadian) (green) (north platte) (republican) (rio grande) (san juan) (san juan) (smoky hill) (south platte))"},
{"question":"rivers in new york", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'new york' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((delaware) (allegheny) (hudson))", "goal-answer":"((delaware) (allegheny) (hudson))"},
{"question":"what are all the rivers in texas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((red) (canadian) (rio grande) (pecos) (washita))", "goal-answer":"((red) (canadian) (rio grande) (pecos) (washita))"},
{"question":"what are the rivers in alaska", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'alaska' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what rivers are in texas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((red) (canadian) (rio grande) (pecos) (washita))", "goal-answer":"((red) (canadian) (rio grande) (pecos) (washita))"},
{"question":"what rivers are there in texas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((red) (canadian) (rio grande) (pecos) (washita))", "goal-answer":"((red) (canadian) (rio grande) (pecos) (washita))"},
{"question":"what rivers run through new york", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'new york' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((delaware) (allegheny) (hudson))", "goal-answer":"((delaware) (allegheny) (hudson))"},
{"question":"what rivers flow through colorado", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'colorado' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado) (arkansas) (canadian) (green) (north platte) (republican) (rio grande) (san juan) (san juan) (smoky hill) (south platte))", "goal-answer":"((colorado) (arkansas) (canadian) (green) (north platte) (republican) (rio grande) (san juan) (san juan) (smoky hill) (south platte))"},
{"question":"what rivers run through arizona", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'arizona' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE arizona))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 arizona) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado) (gila))", "goal-answer":"((colorado) (gila))"},
{"question":"what river flows through kansas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'kansas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE kansas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 kansas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((arkansas) (cimarron) (republican) (neosho) (smoky hill))", "goal-answer":"((arkansas) (cimarron) (republican) (neosho) (smoky hill))"},
{"question":"what are the rivers in the state of texas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((red) (canadian) (rio grande) (pecos) (washita))", "goal-answer":"((red) (canadian) (rio grande) (pecos) (washita))"},
{"question":"what rivers are in new mexico", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'new mexico' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE new mexico))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 new mexico) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((red) (canadian) (cimarron) (rio grande) (san juan) (gila) (pecos))", "goal-answer":"((red) (canadian) (cimarron) (rio grande) (san juan) (gila) (pecos))"},
{"question":"name the rivers in arkansas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'arkansas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE arkansas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 arkansas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi) (red) (red) (arkansas) (ouachita) (st. francis) (white) (white))", "goal-answer":"((mississippi) (red) (red) (arkansas) (ouachita) (st. francis) (white) (white))"},
{"question":"what rivers run through louisiana", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'louisiana' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE louisiana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 louisiana) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi) (mississippi) (red) (ouachita) (pearl))", "goal-answer":"((mississippi) (mississippi) (red) (ouachita) (pearl))"},
{"question":"what rivers run through west virginia", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'west virginia' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE west virginia))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 west virginia) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((ohio) (potomac))", "goal-answer":"((ohio) (potomac))"},
{"question":"what rivers are in nevada", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'nevada' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE nevada))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 nevada) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"what rivers run through texas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((red) (canadian) (rio grande) (pecos) (washita))", "goal-answer":"((red) (canadian) (rio grande) (pecos) (washita))"},
{"question":"what rivers are in utah", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'utah' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE utah))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 utah) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado) (green) (green) (san juan))", "goal-answer":"((colorado) (green) (green) (san juan))"},
{"question":"what are the rivers in the state of indiana", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'indiana' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE indiana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 indiana) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((ohio) (wabash))", "goal-answer":"((ohio) (wabash))"},
{"question":"what rivers flow through missouri", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'missouri' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi) (missouri) (missouri) (st. francis) (white))", "goal-answer":"((mississippi) (missouri) (missouri) (st. francis) (white))"},
{"question":"what are the rivers of montana", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'montana' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE montana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((missouri) (little missouri) (yellowstone) (bighorn) (clark fork) (powder))", "goal-answer":"((missouri) (little missouri) (yellowstone) (bighorn) (clark fork) (powder))"},
{"question":"what rivers run through colorado", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'colorado' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado) (arkansas) (canadian) (green) (north platte) (republican) (rio grande) (san juan) (san juan) (smoky hill) (south platte))", "goal-answer":"((colorado) (arkansas) (canadian) (green) (north platte) (republican) (rio grande) (san juan) (san juan) (smoky hill) (south platte))"},
{"question":"which rivers are in alaska", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'alaska' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"which rivers flow through alaska", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'alaska' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what is the river that cross over ohio", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'ohio' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE ohio))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((ohio) (wabash))", "goal-answer":"((ohio) (wabash))"},
{"question":"what rivers run through maine", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'maine' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE maine))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 maine) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what river flows through texas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((red) (canadian) (rio grande) (pecos) (washita))", "goal-answer":"((red) (canadian) (rio grande) (pecos) (washita))"},
{"question":"what river runs through virginia", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'virginia' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE virginia))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 virginia) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((potomac) (roanoke))", "goal-answer":"((potomac) (roanoke))"},
{"question":"what rivers are in oregon", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'oregon' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE oregon))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 oregon) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((snake) (columbia))", "goal-answer":"((snake) (columbia))"},
{"question":"what river runs through illinois", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'illinois' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE illinois))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 illinois) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi) (ohio) (ohio) (wabash) (rock))", "goal-answer":"((mississippi) (ohio) (ohio) (wabash) (rock))"},
{"question":"how many states border the state that borders the most states", "sql-query":"SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 ;", "s-sql-query":"(SELECT (MAX DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0) FROM (AS (SELECT BORDER_INFOALIAS0.STATE_NAME (AS (COUNT (DISTINCT BORDER_INFOALIAS0.BORDER)) DERIVED_FIELDALIAS0) FROM (AS BORDER_INFO BORDER_INFOALIAS0) GROUP-BY BORDER_INFOALIAS0.STATE_NAME) DERIVED_TABLEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (AS ?FILTER-0 ?AGGREGATOR-1 ?COLUMN-6) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (GROUP-BY ?FILTER-2 ?COLUMN-1) (FROM ?FILTER-3 ?FILTER-1) (AS ?FILTER-4 ?RESULT-1 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (MAX ?AGGREGATOR-2 ?COLUMN-3) (SELECT ?RESULT-0 ?AGGREGATOR-2 ?FILTER-5) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-1 ?FILTER-0) (SELECT ?RESULT-1 ?COMMA-CLAUSE-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-5 BORDER) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-2 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((8))", "goal-answer":"((8))"},
{"question":"what state is dallas in", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'dallas' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME dallas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 dallas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"where is san diego", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'san diego' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME san diego))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 san diego) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"san antonio is in what state", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'san antonio' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME san antonio))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 san antonio) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what state is austin in", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what state is miami in", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'miami' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME miami))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 miami) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((florida))", "goal-answer":"((florida))"},
{"question":"what states have cities named dallas", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'dallas' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME dallas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 dallas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what states have cities named plano", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'plano' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME plano))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 plano) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what states have cities named portland", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'portland' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME portland))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 portland) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((maine) (oregon))", "goal-answer":"((maine) (oregon))"},
{"question":"what states have cities named rochester", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'rochester' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME rochester))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 rochester) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((minnesota) (new york))", "goal-answer":"((minnesota) (new york))"},
{"question":"what states have cities named salt lake city", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'salt lake city' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME salt lake city))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 salt lake city) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((utah))", "goal-answer":"((utah))"},
{"question":"where is dallas", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'dallas' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME dallas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 dallas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"where is portland", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'portland' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME portland))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 portland) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((maine) (oregon))", "goal-answer":"((maine) (oregon))"},
{"question":"which states have cities named austin", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"which state is kalamazoo in", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'kalamazoo' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME kalamazoo))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 kalamazoo) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((michigan))", "goal-answer":"((michigan))"},
{"question":"where is austin", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what states have a city named austin", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what state is pittsburgh in", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'pittsburgh' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME pittsburgh))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 pittsburgh) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((pennsylvania))", "goal-answer":"((pennsylvania))"},
{"question":"what state has the city flint", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'flint' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME flint))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 flint) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((michigan))", "goal-answer":"((michigan))"},
{"question":"what states have towns named springfield", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'springfield' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME springfield))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 springfield) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((illinois) (massachusetts) (missouri) (ohio))", "goal-answer":"((illinois) (massachusetts) (missouri) (ohio))"},
{"question":"where is san jose", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'san jose' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME san jose))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 san jose) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"where is scotts valley", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'scotts valley' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME scotts valley))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 scotts valley) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"where is new orleans", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'new orleans' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME new orleans))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 new orleans) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((louisiana))", "goal-answer":"((louisiana))"},
{"question":"where is indianapolis", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'indianapolis' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME indianapolis))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 indianapolis) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((indiana))", "goal-answer":"((indiana))"},
{"question":"what state is des moines located in", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'des moines' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME des moines))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 des moines) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((iowa))", "goal-answer":"((iowa))"},
{"question":"what states have cities named austin", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what state is boston in", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'boston' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME boston))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 boston) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((massachusetts))", "goal-answer":"((massachusetts))"},
{"question":"where is fort wayne", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'fort wayne' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME fort wayne))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 fort wayne) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((indiana))", "goal-answer":"((indiana))"},
{"question":"where is houston", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'houston' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME houston))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 houston) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"where is springfield", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'springfield' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME springfield))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 springfield) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((illinois) (massachusetts) (missouri) (ohio))", "goal-answer":"((illinois) (massachusetts) (missouri) (ohio))"},
{"question":"where is baton rouge", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'baton rouge' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME baton rouge))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 baton rouge) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((louisiana))", "goal-answer":"((louisiana))"},
{"question":"in which state is rochester", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'rochester' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME rochester))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 rochester) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((minnesota) (new york))", "goal-answer":"((minnesota) (new york))"},
{"question":"which state is the city denver located in", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'denver' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME denver))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 denver) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"what states in the united states have a city of springfield", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'springfield' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME springfield))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 springfield) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((illinois) (massachusetts) (missouri) (ohio))", "goal-answer":"((illinois) (massachusetts) (missouri) (ohio))"},
{"question":"what is the population of the state with the largest area", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((401800))", "goal-answer":"((401800))"},
{"question":"what is the population of the largest state", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((401800))", "goal-answer":"((401800))"},
{"question":"how many people live in chicago", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'chicago' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME chicago))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 chicago) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((3005172))", "goal-answer":"((3005172))"},
{"question":"what is the population of dallas", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'dallas' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME dallas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 dallas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((904078))", "goal-answer":"((904078))"},
{"question":"how many people lived in austin", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((345496))", "goal-answer":"((345496))"},
{"question":"how many people live in detroit", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'detroit' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME detroit))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 detroit) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((1203339))", "goal-answer":"((1203339))"},
{"question":"how many people live in houston", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'houston' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME houston))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 houston) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((1595138))", "goal-answer":"((1595138))"},
{"question":"number of people in boulder", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'boulder' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME boulder))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 boulder) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((76685))", "goal-answer":"((76685))"},
{"question":"what is the population of boulder", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'boulder' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME boulder))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 boulder) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((76685))", "goal-answer":"((76685))"},
{"question":"what is the population of houston", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'houston' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME houston))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 houston) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((1595138))", "goal-answer":"((1595138))"},
{"question":"what is the population of new york city", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'new york' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((7071639))", "goal-answer":"((7071639))"},
{"question":"what is the population of san antonio", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'san antonio' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME san antonio))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 san antonio) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((785880))", "goal-answer":"((785880))"},
{"question":"what is the population of tucson", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'tucson' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME tucson))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 tucson) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((330537))", "goal-answer":"((330537))"},
{"question":"what is the population of austin", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((345496))", "goal-answer":"((345496))"},
{"question":"how big is the city of new york", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'new york' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((7071639))", "goal-answer":"((7071639))"},
{"question":"how many people live in san francisco", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'san francisco' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME san francisco))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 san francisco) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((678974))", "goal-answer":"((678974))"},
{"question":"what is the population of sacramento", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'sacramento' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME sacramento))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 sacramento) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((275741))", "goal-answer":"((275741))"},
{"question":"what is the population of denver", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'denver' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME denver))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 denver) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((492365))", "goal-answer":"((492365))"},
{"question":"what is the population of seattle", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'seattle' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME seattle))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 seattle) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((493846))", "goal-answer":"((493846))"},
{"question":"population of boulder", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'boulder' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME boulder))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 boulder) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((76685))", "goal-answer":"((76685))"},
{"question":"what is the population in boston", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'boston' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME boston))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 boston) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((562994))", "goal-answer":"((562994))"},
{"question":"how many people live in kalamazoo", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'kalamazoo' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME kalamazoo))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 kalamazoo) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((79722))", "goal-answer":"((79722))"},
{"question":"people in boulder", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'boulder' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME boulder))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 boulder) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((76685))", "goal-answer":"((76685))"},
{"question":"how many people in boulder", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'boulder' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME boulder))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 boulder) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((76685))", "goal-answer":"((76685))"},
{"question":"how many inhabitants does montgomery have", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'montgomery' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME montgomery))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 montgomery) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((177857))", "goal-answer":"((177857))"},
{"question":"how many people live in riverside", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'riverside' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME riverside))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 riverside) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((170876))", "goal-answer":"((170876))"},
{"question":"what is the population of atlanta", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'atlanta' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME atlanta))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 atlanta) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((425022))", "goal-answer":"((425022))"},
{"question":"how many people live in austin", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((345496))", "goal-answer":"((345496))"},
{"question":"number of citizens in boulder", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'boulder' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME boulder))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 boulder) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((76685))", "goal-answer":"((76685))"},
{"question":"how many citizens in boulder", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'boulder' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME boulder))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?COMPARATOR-0 boulder) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((76685))", "goal-answer":"((76685))"},
{"question":"what is the smallest city in arkansas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'arkansas' ) AND CITYalias0.STATE_NAME = 'arkansas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME arkansas))) (= CITYALIAS0.STATE_NAME arkansas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 arkansas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((north little rock))", "goal-answer":"((north little rock))"},
{"question":"what is the smallest city in hawaii", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'hawaii' ) AND CITYalias0.STATE_NAME = 'hawaii' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME hawaii))) (= CITYALIAS0.STATE_NAME hawaii)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 hawaii) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((koolaupoko))", "goal-answer":"((koolaupoko))"},
{"question":"what is the smallest city in washington", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'washington' ) AND CITYalias0.STATE_NAME = 'washington' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME washington))) (= CITYALIAS0.STATE_NAME washington)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 washington) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((bellevue))", "goal-answer":"((bellevue))"},
{"question":"what is the smallest city in alaska", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'alaska' ) AND CITYalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME alaska))) (= CITYALIAS0.STATE_NAME alaska)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((anchorage))", "goal-answer":"((anchorage))"},
{"question":"which states lie on the largest river in the united states", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))", "goal-answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))"},
{"question":"which states does the longest river run through", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))", "goal-answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))"},
{"question":"which state has the longest river", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))", "goal-answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))"},
{"question":"what are the states through which the longest river runs", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))", "goal-answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))"},
{"question":"which states does the longest river cross", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))", "goal-answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))"},
{"question":"what is the population density of the state with the smallest area", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 DENSITY) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((580.0D0))", "goal-answer":"((580.0D0))"},
{"question":"what is the population density of the smallest state", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 DENSITY) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((580.0D0))", "goal-answer":"((580.0D0))"},
{"question":"which states have points higher than the highest point in colorado", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION > ( SELECT HIGHLOWalias1.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = 'colorado' ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (> HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT HIGHLOWALIAS1.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS1) WHERE (= HIGHLOWALIAS1.STATE_NAME colorado))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-3 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (GREATER-THAN ?FILTER-4 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((alabama) (alaska) (arkansas) (california) (connecticut) (iowa) (michigan) (minnesota) (missouri) (new jersey) (ohio) (pennsylvania) (wisconsin))", "goal-answer":"((alabama) (alaska) (arkansas) (california) (connecticut) (iowa) (michigan) (minnesota) (missouri) (new jersey) (ohio) (pennsylvania) (wisconsin))"},
{"question":"which states have points that are higher than the highest point in texas", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION > ( SELECT HIGHLOWalias1.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (> HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT HIGHLOWALIAS1.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS1) WHERE (= HIGHLOWALIAS1.STATE_NAME texas))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-3 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (GREATER-THAN ?FILTER-4 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((alabama) (alaska) (arizona) (arkansas) (california) (colorado) (connecticut) (hawaii) (idaho) (illinois) (indiana) (iowa) (michigan) (minnesota) (missouri) (montana) (nevada) (new jersey) (new mexico) (ohio) (oregon) (pennsylvania) (utah) (washington) (wisconsin) (wyoming))", "goal-answer":"((alabama) (alaska) (arizona) (arkansas) (california) (colorado) (connecticut) (hawaii) (idaho) (illinois) (indiana) (iowa) (michigan) (minnesota) (missouri) (montana) (nevada) (new jersey) (new mexico) (ohio) (oregon) (pennsylvania) (utah) (washington) (wisconsin) (wyoming))"},
{"question":"what states high point are higher than that of colorado", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION > ( SELECT HIGHLOWalias1.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = 'colorado' ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (> HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT HIGHLOWALIAS1.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS1) WHERE (= HIGHLOWALIAS1.STATE_NAME colorado))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-3 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (GREATER-THAN ?FILTER-4 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((alabama) (alaska) (arkansas) (california) (connecticut) (iowa) (michigan) (minnesota) (missouri) (new jersey) (ohio) (pennsylvania) (wisconsin))", "goal-answer":"((alabama) (alaska) (arkansas) (california) (connecticut) (iowa) (michigan) (minnesota) (missouri) (new jersey) (ohio) (pennsylvania) (wisconsin))"},
{"question":"what is the highest elevation in new mexico", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'new mexico' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME new mexico))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 new mexico) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((4011))", "goal-answer":"((4011))"},
{"question":"how high is the highest point of florida", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'florida' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME florida))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 florida) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((105))", "goal-answer":"((105))"},
{"question":"how high is the highest point of alabama", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'alabama' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME alabama))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 alabama) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((734))", "goal-answer":"((734))"},
{"question":"how tall is the highest point in montana", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'montana' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME montana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((3901))", "goal-answer":"((3901))"},
{"question":"what is the highest elevation in texas", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((2667))", "goal-answer":"((2667))"},
{"question":"what is the highest point in nevada in meters", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'nevada' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME nevada))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 nevada) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((4005))", "goal-answer":"((4005))"},
{"question":"how high is the highest point in montana", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'montana' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME montana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((3901))", "goal-answer":"((3901))"},
{"question":"what is the highest elevation in south carolina", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'south carolina' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME south carolina))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 south carolina) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((1085))", "goal-answer":"((1085))"},
{"question":"how high is the highest point of louisiana", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'louisiana' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME louisiana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 louisiana) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((163))", "goal-answer":"((163))"},
{"question":"how high is the highest point of delaware", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'delaware' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME delaware))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 delaware) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((135))", "goal-answer":"((135))"},
{"question":"give me the longest river that passes through the us", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))", "goal-answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))"},
{"question":"which is the longest river in usa", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))", "goal-answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))"},
{"question":"what is the longest river in america", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))", "goal-answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))"},
{"question":"name the longest river in us", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))", "goal-answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))"},
{"question":"what river is the longest one in the united states", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))", "goal-answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))"},
{"question":"what is the longest river in the us", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))", "goal-answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))"},
{"question":"what is the longest river", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))", "goal-answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))"},
{"question":"what is the longest river in the united states", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))", "goal-answer":"((missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri))"},
{"question":"what state has the city with the largest population", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what state has the largest city", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"which state has the largest city", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what state has the city with the most population", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what is the smallest city in the largest state", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ) AND CITYalias0.STATE_NAME IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.AREA = ( SELECT MAX( STATEalias3.AREA ) FROM STATE AS STATEalias3 ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (IN CITYALIAS1.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))) (IN CITYALIAS0.STATE_NAME (SELECT STATEALIAS2.STATE_NAME FROM (AS STATE STATEALIAS2) WHERE (= STATEALIAS2.AREA (SELECT (MAX STATEALIAS3.AREA) FROM (AS STATE STATEALIAS3)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-13) (DOT ?COLUMN-3 ?ALIAS-4 ?COLUMN-13) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-13) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-15) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-15) (DOT ?COLUMN-8 ?ALIAS-5 ?COLUMN-14) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-15) (DOT ?COLUMN-10 ?ALIAS-0 ?COLUMN-14) (DOT ?COLUMN-11 ?ALIAS-4 ?COLUMN-15) (MIN ?AGGREGATOR-0 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-5) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-7) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-3) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-11 ?RESULT-5) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-5 ?RESULT-4) (WHERE ?FILTER-8 ?FILTER-7) (FROM ?FILTER-9 ?FILTER-0) (EQUALS ?FILTER-10 ?COLUMN-10 ?RESULT-3) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-2) (MAX ?AGGREGATOR-2 ?COLUMN-6) (AS ?FILTER-12 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-13 ?FILTER-12) (EQUALS ?FILTER-14 ?COLUMN-9 ?RESULT-2) (WHERE ?FILTER-15 ?FILTER-14) (FROM ?FILTER-16 ?FILTER-11) (IN ?FILTER-17 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-18 ?FILTER-10 ?FILTER-17) (WHERE ?FILTER-19 ?FILTER-18) (AS ?FILTER-20 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-21 ?FILTER-19) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-16 ?FILTER-15) (SELECT ?RESULT-2 ?AGGREGATOR-2 ?FILTER-13) (SELECT ?RESULT-3 ?AGGREGATOR-0 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-4 ?COLUMN-3 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-5 ?AGGREGATOR-1 ?FILTER-3) (BIND COLUMN ?COLUMN-15 AREA) (BIND COLUMN ?COLUMN-14 POPULATION) (BIND COLUMN ?COLUMN-13 STATE_NAME) (BIND COLUMN ?COLUMN-12 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS3) (BIND CONCEPT ?ALIAS-2 STATEALIAS2) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND CONCEPT ?ALIAS-4 STATEALIAS0) (BIND CONCEPT ?ALIAS-5 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((anchorage))", "goal-answer":"((anchorage))"},
{"question":"what state is the biggest", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what is the state with the largest area", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what state has the largest area", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what is the biggest state in continental us", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"state the state with the largest area", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what is the largest state in usa", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what is the biggest state", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what is the biggest state in the usa", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"give me the largest state", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what is the largest state in the us", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what is the largest state", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what are the highest points of states surrounding mississippi", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (IN HIGHLOWALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((cheaha mountain) (magazine mountain) (driskill mountain) (clingmans dome))", "goal-answer":"((cheaha mountain) (magazine mountain) (driskill mountain) (clingmans dome))"},
{"question":"what are the high points of states surrounding mississippi", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (IN HIGHLOWALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((cheaha mountain) (magazine mountain) (driskill mountain) (clingmans dome))", "goal-answer":"((cheaha mountain) (magazine mountain) (driskill mountain) (clingmans dome))"},
{"question":"what is the highest point in states bordering georgia", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'georgia' ) ORDER BY HIGHLOWalias0.HIGHEST_ELEVATION DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (IN HIGHLOWALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME georgia)))) (DESC HIGHLOWALIAS0.HIGHEST_ELEVATION)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-4) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-7 BORDER) (BIND COLUMN ?COLUMN-6 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 georgia) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((cheaha mountain))", "goal-answer":"((cheaha mountain))"},
{"question":"what is the highest point in the states bordering colorado", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'colorado' ) ORDER BY HIGHLOWalias0.HIGHEST_ELEVATION DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (IN HIGHLOWALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME colorado)))) (DESC HIGHLOWALIAS0.HIGHEST_ELEVATION)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-4) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-7 BORDER) (BIND COLUMN ?COLUMN-6 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 colorado) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((gannett peak))", "goal-answer":"((gannett peak))"},
{"question":"what is the state with the lowest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MIN STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what state has the lowest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MIN STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"which state has the lowest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MIN STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"which state has the smallest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MIN STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what state has the sparsest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MIN STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"which state has the sparsest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MIN STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what state has the least population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MIN STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"which state has the least population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MIN STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what state has the smallest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MIN STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"what is the longest river that passes the states that border the state that borders the most states", "sql-query":"SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH IN ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias0 ) FROM ( SELECT MAX( RIVERalias1.LENGTH ) AS DERIVED_FIELDalias0 , RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias2.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias2 GROUP BY BORDER_INFOalias2.BORDER ) AS DERIVED_TABLEalias0 ) ) ) GROUP BY RIVERalias1.TRAVERSE ) AS DERIVED_TABLEalias1 ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.LENGTH (SELECT (MAX DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS0) FROM (AS (SELECT (AS (MAX RIVERALIAS1.LENGTH) DERIVED_FIELDALIAS0) RIVERALIAS1.TRAVERSE FROM (AS RIVER RIVERALIAS1) WHERE (IN RIVERALIAS1.TRAVERSE (SELECT BORDER_INFOALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.BORDER (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) GROUP-BY BORDER_INFOALIAS1.BORDER HAVING (= (COUNT 1) (SELECT (MAX DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS1) FROM (AS (SELECT BORDER_INFOALIAS2.BORDER (AS (COUNT 1) DERIVED_FIELDALIAS1) FROM (AS BORDER_INFO BORDER_INFOALIAS2) GROUP-BY BORDER_INFOALIAS2.BORDER) DERIVED_TABLEALIAS0))))))) GROUP-BY RIVERALIAS1.TRAVERSE) DERIVED_TABLEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-6 ?COLUMN-11) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-16) (DOT ?COLUMN-3 ?ALIAS-6 ?COLUMN-13) (DOT ?COLUMN-4 ?ALIAS-7 ?COLUMN-12) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-13) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-13) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-14) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-15) (DOT ?COLUMN-9 ?ALIAS-7 ?COLUMN-16) (DOT ?COLUMN-10 ?ALIAS-1 ?COLUMN-17) (MAX ?AGGREGATOR-0 ?COLUMN-10) (MAX ?AGGREGATOR-1 ?COLUMN-9) (AS ?FILTER-0 ?AGGREGATOR-1 ?COLUMN-17) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-7) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-6) (AS ?FILTER-3 ?TABLE-0 ?ALIAS-5) (COUNT ?AGGREGATOR-2 ?COMPARATOR-0) (MAX ?AGGREGATOR-3 ?COLUMN-8) (AS ?FILTER-4 ?AGGREGATOR-2 ?COLUMN-15) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-3) (GROUP-BY ?FILTER-6 ?COLUMN-6) (FROM ?FILTER-7 ?FILTER-5) (AS ?FILTER-8 ?RESULT-6 ?ALIAS-2) (FROM ?FILTER-9 ?FILTER-8) (EQUALS ?FILTER-10 ?AGGREGATOR-2 ?RESULT-5) (HAVING ?FILTER-11 ?FILTER-10) (GROUP-BY ?FILTER-12 ?COLUMN-5) (FROM ?FILTER-13 ?FILTER-3) (IN ?FILTER-14 ?COLUMN-3 ?RESULT-4) (WHERE ?FILTER-15 ?FILTER-14) (FROM ?FILTER-16 ?FILTER-2) (IN ?FILTER-17 ?COLUMN-4 ?RESULT-3) (GROUP-BY ?FILTER-18 ?COLUMN-4) (WHERE ?FILTER-19 ?FILTER-17) (FROM ?FILTER-20 ?FILTER-1) (AS ?FILTER-21 ?RESULT-2 ?ALIAS-1) (FROM ?FILTER-22 ?FILTER-21) (IN ?FILTER-23 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-24 ?FILTER-23) (AS ?FILTER-25 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-26 ?FILTER-25) (DISTINCT ?AGGREGATOR-4 ?COLUMN-7) (SELECT ?RESULT-0 ?AGGREGATOR-4 ?FILTER-26 ?FILTER-24) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-22) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?COLUMN-4) (SELECT ?RESULT-2 ?COMMA-CLAUSE-1 ?FILTER-20 ?FILTER-19 ?FILTER-18) (SELECT ?RESULT-3 ?COLUMN-1 ?FILTER-16 ?FILTER-15) (SELECT ?RESULT-4 ?COLUMN-5 ?FILTER-13 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-5 ?AGGREGATOR-3 ?FILTER-9) (COMMA ?COMMA-CLAUSE-2 ?COLUMN-6 ?FILTER-4) (SELECT ?RESULT-6 ?COMMA-CLAUSE-2 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-17 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-16 LENGTH) (BIND COLUMN ?COLUMN-15 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-14 RIVER_NAME) (BIND COLUMN ?COLUMN-13 BORDER) (BIND COLUMN ?COLUMN-12 TRAVERSE) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS2) (BIND CONCEPT ?ALIAS-4 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-5 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-6 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-7 RIVERALIAS1) (BIND CONCEPT ?ALIAS-8 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((missouri))", "goal-answer":"((missouri))"},
{"question":"where is the highest point in montana", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'montana' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME montana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((granite peak))", "goal-answer":"((granite peak))"},
{"question":"what is the highest point in iowa", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'iowa' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((ocheyedan mound))", "goal-answer":"((ocheyedan mound))"},
{"question":"what is the highest point in maine", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'maine' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME maine))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 maine) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mount katahdin))", "goal-answer":"((mount katahdin))"},
{"question":"what is the highest point in montana", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'montana' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME montana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((granite peak))", "goal-answer":"((granite peak))"},
{"question":"what is the highest point in virginia", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'virginia' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME virginia))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 virginia) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mount rogers))", "goal-answer":"((mount rogers))"},
{"question":"what is the high point of wyoming", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'wyoming' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME wyoming))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 wyoming) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((gannett peak))", "goal-answer":"((gannett peak))"},
{"question":"where is the highest point in hawaii", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'hawaii' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME hawaii))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 hawaii) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mauna kea))", "goal-answer":"((mauna kea))"},
{"question":"what is the highest mountain in alaska", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mount mckinley))", "goal-answer":"((mount mckinley))"},
{"question":"what is the highest point in wyoming", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'wyoming' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME wyoming))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 wyoming) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((gannett peak))", "goal-answer":"((gannett peak))"},
{"question":"what is the highest point in colorado", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'colorado' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mount elbert))", "goal-answer":"((mount elbert))"},
{"question":"could you tell me what is the highest point in the state of oregon", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'oregon' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME oregon))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 oregon) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mount hood))", "goal-answer":"((mount hood))"},
{"question":"what is the highest point in ohio", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'ohio' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME ohio))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((campbell hill))", "goal-answer":"((campbell hill))"},
{"question":"what is the highest point in florida", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'florida' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME florida))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 florida) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((walton county))", "goal-answer":"((walton county))"},
{"question":"what is the highest point in rhode island", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'rhode island' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME rhode island))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 rhode island) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((jerimoth hill))", "goal-answer":"((jerimoth hill))"},
{"question":"what is the highest mountain in texas", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((guadalupe peak))", "goal-answer":"((guadalupe peak))"},
{"question":"what is the highest point in new mexico", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'new mexico' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME new mexico))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 new mexico) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((wheeler peak))", "goal-answer":"((wheeler peak))"},
{"question":"what is the highest point in kansas", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'kansas' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME kansas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 kansas) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mount sunflower))", "goal-answer":"((mount sunflower))"},
{"question":"what is the highest point in delaware", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'delaware' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME delaware))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 delaware) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((centerville))", "goal-answer":"((centerville))"},
{"question":"what is the highest point in texas", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((guadalupe peak))", "goal-answer":"((guadalupe peak))"},
{"question":"what states have no bordering state", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (NOT (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-3) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (IN ?FILTER-2 ?COLUMN-2 ?RESULT-1) (NOT ?FILTER-3 ?FILTER-2) (WHERE ?FILTER-4 ?FILTER-3) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-6 ?FILTER-4) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((alaska) (hawaii))", "goal-answer":"((alaska) (hawaii))"},
{"question":"name the states which have no surrounding states", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (NOT (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-3) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (IN ?FILTER-2 ?COLUMN-2 ?RESULT-1) (NOT ?FILTER-3 ?FILTER-2) (WHERE ?FILTER-4 ?FILTER-3) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-6 ?FILTER-4) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((alaska) (hawaii))", "goal-answer":"((alaska) (hawaii))"},
{"question":"which states border no other states", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (NOT (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-3) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (IN ?FILTER-2 ?COLUMN-2 ?RESULT-1) (NOT ?FILTER-3 ?FILTER-2) (WHERE ?FILTER-4 ?FILTER-3) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-6 ?FILTER-4) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((alaska) (hawaii))", "goal-answer":"((alaska) (hawaii))"},
{"question":"what is the area of the state with the smallest population density", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MIN STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((591000.0D0))", "goal-answer":"((591000.0D0))"},
{"question":"count the states which have elevations lower than what alabama has", "sql-query":"SELECT COUNT( HIGHLOWalias0.STATE_NAME ) FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION < ( SELECT HIGHLOWalias1.LOWEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = 'alabama' ) ;", "s-sql-query":"(SELECT (COUNT HIGHLOWALIAS0.STATE_NAME) FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (< HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT HIGHLOWALIAS1.LOWEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS1) WHERE (= HIGHLOWALIAS1.STATE_NAME alabama))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-3 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (LOWER-THAN ?FILTER-4 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 alabama) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((2))", "goal-answer":"((2))"},
{"question":"how high is mount mckinley", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_POINT = 'mount mckinley' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_POINT mount mckinley))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 HIGHEST_POINT) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 mount mckinley) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((6194))", "goal-answer":"((6194))"},
{"question":"how tall is mount mckinley", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_POINT = 'mount mckinley' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_POINT mount mckinley))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 HIGHEST_POINT) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 mount mckinley) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((6194))", "goal-answer":"((6194))"},
{"question":"what is the maximum elevation of san francisco", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_POINT = 'san francisco' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_POINT san francisco))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 HIGHEST_POINT) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 san francisco) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"how high is guadalupe peak", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_POINT = 'guadalupe peak' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_POINT guadalupe peak))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 HIGHEST_POINT) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 guadalupe peak) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((2667))", "goal-answer":"((2667))"},
{"question":"how high is the highest point in america", "sql-query":"SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "s-sql-query":"(SELECT (MAX HIGHLOWALIAS0.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 HIGHEST_ELEVATION) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((979))", "goal-answer":"((979))"},
{"question":"what is the highest elevation in the united states", "sql-query":"SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "s-sql-query":"(SELECT (MAX HIGHLOWALIAS0.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 HIGHEST_ELEVATION) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((979))", "goal-answer":"((979))"},
{"question":"what is the elevation of the highest point in the usa", "sql-query":"SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "s-sql-query":"(SELECT (MAX HIGHLOWALIAS0.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 HIGHEST_ELEVATION) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((979))", "goal-answer":"((979))"},
{"question":"what is the height of the highest point in the usa", "sql-query":"SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "s-sql-query":"(SELECT (MAX HIGHLOWALIAS0.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 HIGHEST_ELEVATION) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((979))", "goal-answer":"((979))"},
{"question":"how long is the colorado river", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((2333))", "goal-answer":"((2333))"},
{"question":"how long is the delaware river", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'delaware' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME delaware))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 delaware) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((451))", "goal-answer":"((451))"},
{"question":"how long is the north platte river", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'north platte' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME north platte))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 north platte) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((1094))", "goal-answer":"((1094))"},
{"question":"how long is the ohio river", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'ohio' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME ohio))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((1569))", "goal-answer":"((1569))"},
{"question":"what is the length of the colorado river", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((2333))", "goal-answer":"((2333))"},
{"question":"what is the length of the mississippi river", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3778))", "goal-answer":"((3778))"},
{"question":"what length is the mississippi", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3778))", "goal-answer":"((3778))"},
{"question":"how long is the mississippi", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3778))", "goal-answer":"((3778))"},
{"question":"how long is the mississippi river in miles", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3778))", "goal-answer":"((3778))"},
{"question":"how long is the mississippi river", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3778))", "goal-answer":"((3778))"},
{"question":"how long is the rio grande river", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'rio grande' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME rio grande))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 rio grande) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3033))", "goal-answer":"((3033))"},
{"question":"how long is the missouri river", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'missouri' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3968))", "goal-answer":"((3968))"},
{"question":"how long is rio grande", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'rio grande' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME rio grande))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?COMPARATOR-0 rio grande) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3033))", "goal-answer":"((3033))"},
{"question":"how long is the longest river in california", "sql-query":"SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'california' ) AND RIVERalias0.TRAVERSE = 'california' ;", "s-sql-query":"(SELECT RIVERALIAS0.LENGTH FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE california))) (= RIVERALIAS0.TRAVERSE california)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-6) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-3 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((2333))", "goal-answer":"((2333))"},
{"question":"what is the length of the longest river that runs through texas", "sql-query":"SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'texas' ) AND RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.LENGTH FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE texas))) (= RIVERALIAS0.TRAVERSE texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-6) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-3 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3033))", "goal-answer":"((3033))"},
{"question":"how many capitals does rhode island have", "sql-query":"SELECT COUNT( STATEalias0.CAPITAL ) FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'rhode island' ;", "s-sql-query":"(SELECT (COUNT STATEALIAS0.CAPITAL) FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME rhode island))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 rhode island) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((1))", "goal-answer":"((1))"},
{"question":"how many cities are there in the united states", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((386))", "goal-answer":"((386))"},
{"question":"how many cities does the usa have", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((386))", "goal-answer":"((386))"},
{"question":"how many cities are there in the us", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((386))", "goal-answer":"((386))"},
{"question":"how many cities are there in usa", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((386))", "goal-answer":"((386))"},
{"question":"how many cities are there in us", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((386))", "goal-answer":"((386))"},
{"question":"how many major cities are there", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (> CITYALIAS0.POPULATION 150000))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((107))", "goal-answer":"((107))"},
{"question":"how many citizens does the biggest city have in the usa", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-3) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-3 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((7071639))", "goal-answer":"((7071639))"},
{"question":"how many colorado rivers are there", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (EQUALS ?FILTER-0 ?COLUMN-1 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-2 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((5))", "goal-answer":"((5))"},
{"question":"how many rivers are called colorado", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (EQUALS ?FILTER-0 ?COLUMN-1 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-2 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((5))", "goal-answer":"((5))"},
{"question":"what is the population of washington dc", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'washington' AND CITYalias0.STATE_NAME = 'dc' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME washington) (= CITYALIAS0.STATE_NAME dc)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 dc) (BIND CONCEPT ?COMPARATOR-1 washington) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"how many people live in washington dc", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'washington' AND CITYalias0.STATE_NAME = 'dc' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME washington) (= CITYALIAS0.STATE_NAME dc)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 dc) (BIND CONCEPT ?COMPARATOR-1 washington) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"how many people live in minneapolis minnesota", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'minneapolis' AND CITYalias0.STATE_NAME = 'minnesota' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME minneapolis) (= CITYALIAS0.STATE_NAME minnesota)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 minnesota) (BIND CONCEPT ?COMPARATOR-1 minneapolis) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((370951))", "goal-answer":"((370951))"},
{"question":"what is the population of atlanta georgia", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'atlanta' AND CITYalias0.STATE_NAME = 'georgia' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME atlanta) (= CITYALIAS0.STATE_NAME georgia)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 georgia) (BIND CONCEPT ?COMPARATOR-1 atlanta) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((425022))", "goal-answer":"((425022))"},
{"question":"what is the population of erie pennsylvania", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'erie' AND CITYalias0.STATE_NAME = 'pennsylvania' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME erie) (= CITYALIAS0.STATE_NAME pennsylvania)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 pennsylvania) (BIND CONCEPT ?COMPARATOR-1 erie) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((119123))", "goal-answer":"((119123))"},
{"question":"what is the population of tempe arizona", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'tempe' AND CITYalias0.STATE_NAME = 'arizona' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME tempe) (= CITYALIAS0.STATE_NAME arizona)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 arizona) (BIND CONCEPT ?COMPARATOR-1 tempe) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((106919))", "goal-answer":"((106919))"},
{"question":"what is the population of boston massachusetts", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'boston' AND CITYalias0.STATE_NAME = 'massachusetts' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME boston) (= CITYALIAS0.STATE_NAME massachusetts)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 massachusetts) (BIND CONCEPT ?COMPARATOR-1 boston) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((562994))", "goal-answer":"((562994))"},
{"question":"what is the population of springfield missouri", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'springfield' AND CITYalias0.STATE_NAME = 'missouri' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME springfield) (= CITYALIAS0.STATE_NAME missouri)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?COMPARATOR-1 springfield) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((133116))", "goal-answer":"((133116))"},
{"question":"what is the population of springfield south dakota", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'springfield' AND CITYalias0.STATE_NAME = 'south dakota' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME springfield) (= CITYALIAS0.STATE_NAME south dakota)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 south dakota) (BIND CONCEPT ?COMPARATOR-1 springfield) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"how many people live in austin texas", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME austin) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?COMPARATOR-1 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((345496))", "goal-answer":"((345496))"},
{"question":"what is the population of portland maine", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'portland' AND CITYalias0.STATE_NAME = 'maine' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME portland) (= CITYALIAS0.STATE_NAME maine)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 maine) (BIND CONCEPT ?COMPARATOR-1 portland) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((61572))", "goal-answer":"((61572))"},
{"question":"how many people live in spokane washington", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'spokane' AND CITYalias0.STATE_NAME = 'washington' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME spokane) (= CITYALIAS0.STATE_NAME washington)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 washington) (BIND CONCEPT ?COMPARATOR-1 spokane) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((171300))", "goal-answer":"((171300))"},
{"question":"what is the population of austin texas", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME austin) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?COMPARATOR-1 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((345496))", "goal-answer":"((345496))"},
{"question":"what is the population of seattle washington", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'seattle' AND CITYalias0.STATE_NAME = 'washington' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME seattle) (= CITYALIAS0.STATE_NAME washington)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?COMPARATOR-0 washington) (BIND CONCEPT ?COMPARATOR-1 seattle) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((493846))", "goal-answer":"((493846))"},
{"question":"how many people live in the biggest city in new york state", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'new york' ) AND CITYalias0.STATE_NAME = 'new york' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME new york))) (= CITYALIAS0.STATE_NAME new york)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-6) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-3 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((7071639))", "goal-answer":"((7071639))"},
{"question":"how large is the largest city in alaska", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'alaska' ) AND CITYalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME alaska))) (= CITYALIAS0.STATE_NAME alaska)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-6) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-3 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((174431))", "goal-answer":"((174431))"},
{"question":"how many people live in the capital of texas", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = ( SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME (SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 CITY_NAME) (BIND COLUMN ?COLUMN-6 CAPITAL) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 STATE))", "answer":"((345496))", "goal-answer":"((345496))"},
{"question":"how many people live in the capital of georgia", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = ( SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'georgia' ) ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME (SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME georgia))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 CITY_NAME) (BIND COLUMN ?COLUMN-6 CAPITAL) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 georgia) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 STATE))", "answer":"((425022))", "goal-answer":"((425022))"},
{"question":"what is the size of the capital of texas", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = ( SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME (SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 CITY_NAME) (BIND COLUMN ?COLUMN-6 CAPITAL) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 STATE))", "answer":"((345496))", "goal-answer":"((345496))"},
{"question":"how many people live in the united states", "sql-query":"SELECT SUM( STATEalias0.POPULATION ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (SUM STATEALIAS0.POPULATION) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SUM ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 POPULATION) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((225195124))", "goal-answer":"((225195124))"},
{"question":"what is the combined population of all 50 states", "sql-query":"SELECT SUM( STATEalias0.POPULATION ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (SUM STATEALIAS0.POPULATION) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SUM ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 POPULATION) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((225195124))", "goal-answer":"((225195124))"},
{"question":"how many rivers are in the state that has the most rivers", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.TRAVERSE) (DESC (COUNT RIVERALIAS0.RIVER_NAME))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (DESC ?FILTER-3 ?AGGREGATOR-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((11))", "goal-answer":"((11))"},
{"question":"how many rivers are in the state that has the most rivers", "sql-query":"SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( RIVERalias0.RIVER_NAME ) AS DERIVED_FIELDalias0 , RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ) AS DERIVED_TABLEalias0 ;", "s-sql-query":"(SELECT (MAX DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0) FROM (AS (SELECT (AS (COUNT RIVERALIAS0.RIVER_NAME) DERIVED_FIELDALIAS0) RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.TRAVERSE) DERIVED_TABLEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (GROUP-BY ?FILTER-2 ?COLUMN-1) (FROM ?FILTER-3 ?FILTER-1) (AS ?FILTER-4 ?RESULT-1 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (MAX ?AGGREGATOR-1 ?COLUMN-3) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-5) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?COLUMN-1) (SELECT ?RESULT-1 ?COMMA-CLAUSE-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-5 RIVER_NAME) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?ALIAS-0 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND CONCEPT ?ALIAS-2 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((11))", "goal-answer":"((11))"},
{"question":"how many states are in the usa", "sql-query":"SELECT COUNT( STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (COUNT STATEALIAS0.STATE_NAME) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((51))", "goal-answer":"((51))"},
{"question":"how many states are there", "sql-query":"SELECT COUNT( STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (COUNT STATEALIAS0.STATE_NAME) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((51))", "goal-answer":"((51))"},
{"question":"how many states are there in the usa", "sql-query":"SELECT COUNT( STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (COUNT STATEALIAS0.STATE_NAME) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((51))", "goal-answer":"((51))"},
{"question":"how many states does usa have", "sql-query":"SELECT COUNT( STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (COUNT STATEALIAS0.STATE_NAME) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((51))", "goal-answer":"((51))"},
{"question":"how many states are in the united states", "sql-query":"SELECT COUNT( STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (COUNT STATEALIAS0.STATE_NAME) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((51))", "goal-answer":"((51))"},
{"question":"how many states are there in united states", "sql-query":"SELECT COUNT( STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (COUNT STATEALIAS0.STATE_NAME) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((51))", "goal-answer":"((51))"},
{"question":"how many states border iowa", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'iowa' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((6))", "goal-answer":"((6))"},
{"question":"how many states does tennessee border", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'tennessee' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME tennessee))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 tennessee) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((8))", "goal-answer":"((8))"},
{"question":"iowa borders how many states", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'iowa' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((6))", "goal-answer":"((6))"},
{"question":"number of states bordering iowa", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'iowa' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((6))", "goal-answer":"((6))"},
{"question":"how many states border hawaii", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'hawaii' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME hawaii))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 hawaii) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((0))", "goal-answer":"((0))"},
{"question":"how many states border tennessee", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'tennessee' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME tennessee))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 tennessee) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((8))", "goal-answer":"((8))"},
{"question":"how many states does iowa border", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'iowa' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((6))", "goal-answer":"((6))"},
{"question":"how many states border alaska", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((0))", "goal-answer":"((0))"},
{"question":"how many states does missouri border", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'missouri' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((8))", "goal-answer":"((8))"},
{"question":"how many states border texas", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((4))", "goal-answer":"((4))"},
{"question":"what is the number of neighboring states for kentucky", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'kentucky' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME kentucky))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 BORDER) (BIND CONCEPT ?COMPARATOR-0 kentucky) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((7))", "goal-answer":"((7))"},
{"question":"how many states border the state with the largest population", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (COUNT ?AGGREGATOR-1 ?COLUMN-3) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-8 POPULATION) (BIND COLUMN ?COLUMN-7 BORDER) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((3))", "goal-answer":"((3))"},
{"question":"how many states do not have rivers", "sql-query":"SELECT COUNT( DISTINCT STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ) ;", "s-sql-query":"(SELECT (COUNT (DISTINCT STATEALIAS0.STATE_NAME)) FROM (AS STATE STATEALIAS0) WHERE (NOT (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (IN ?FILTER-2 ?COLUMN-2 ?RESULT-1) (NOT ?FILTER-3 ?FILTER-2) (WHERE ?FILTER-4 ?FILTER-3) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-6 ?FILTER-5) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-6 ?FILTER-4) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((4))", "goal-answer":"((4))"},
{"question":"how many states have a higher point than the highest point of the state with the largest capital city in the us", "sql-query":"SELECT COUNT( HIGHLOWalias0.STATE_NAME ) FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION > ( SELECT HIGHLOWalias1.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = ( SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ) ) ) ;", "s-sql-query":"(SELECT (COUNT HIGHLOWALIAS0.STATE_NAME) FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (> HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT HIGHLOWALIAS1.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS1) WHERE (= HIGHLOWALIAS1.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL (SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-4 ?COLUMN-14) (DOT ?COLUMN-2 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-13) (DOT ?COLUMN-6 ?ALIAS-4 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-12) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-13) (DOT ?COLUMN-9 ?ALIAS-0 ?COLUMN-14) (AS ?FILTER-0 ?TABLE-2 ?ALIAS-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-3 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-4 ?FILTER-3) (EQUALS ?FILTER-5 ?COLUMN-8 ?RESULT-4) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-2) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-3) (WHERE ?FILTER-9 ?FILTER-8) (FROM ?FILTER-10 ?FILTER-1) (EQUALS ?FILTER-11 ?COLUMN-6 ?RESULT-2) (WHERE ?FILTER-12 ?FILTER-11) (FROM ?FILTER-13 ?FILTER-0) (GREATER-THAN ?FILTER-14 ?COLUMN-9 ?RESULT-1) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-2 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (COUNT ?AGGREGATOR-1 ?COLUMN-4) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-2 ?COLUMN-2 ?FILTER-10 ?FILTER-9) (SELECT ?RESULT-3 ?COLUMN-3 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-4 ?AGGREGATOR-0 ?FILTER-4) (BIND COLUMN ?COLUMN-14 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-13 POPULATION) (BIND COLUMN ?COLUMN-12 CAPITAL) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 CITY_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND CONCEPT ?ALIAS-2 CITYALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS0) (BIND CONCEPT ?ALIAS-4 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 STATE) (BIND TABLE ?TABLE-2 HIGHLOW))", "answer":"((0))", "goal-answer":"((0))"},
{"question":"name the major rivers in florida", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = 'florida' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (> RIVERALIAS0.LENGTH 750) (= RIVERALIAS0.TRAVERSE florida)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 LENGTH) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 florida) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what are the major rivers in ohio", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = 'ohio' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (> RIVERALIAS0.LENGTH 750) (= RIVERALIAS0.TRAVERSE ohio)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 LENGTH) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((ohio) (wabash))", "goal-answer":"((ohio) (wabash))"},
{"question":"what are major rivers in texas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (> RIVERALIAS0.LENGTH 750) (= RIVERALIAS0.TRAVERSE texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 LENGTH) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((red) (canadian) (rio grande) (pecos) (washita))", "goal-answer":"((red) (canadian) (rio grande) (pecos) (washita))"},
{"question":"what major rivers run through illinois", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = 'illinois' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (> RIVERALIAS0.LENGTH 750) (= RIVERALIAS0.TRAVERSE illinois)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 LENGTH) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 illinois) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi) (ohio) (ohio) (wabash))", "goal-answer":"((mississippi) (ohio) (ohio) (wabash))"},
{"question":"through which states does the longest river in texas run", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'texas' ) ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE texas))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-6) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado) (new mexico) (texas))", "goal-answer":"((colorado) (new mexico) (texas))"},
{"question":"what are the capital city in texas", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((austin))", "goal-answer":"((austin))"},
{"question":"what is the capital of california", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((sacramento))", "goal-answer":"((sacramento))"},
{"question":"what is the capital of colorado", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'colorado' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((denver))", "goal-answer":"((denver))"},
{"question":"what is the capital of illinois", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'illinois' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME illinois))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 illinois) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((springfield))", "goal-answer":"((springfield))"},
{"question":"what is the capital of iowa", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'iowa' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((des moines))", "goal-answer":"((des moines))"},
{"question":"what is the capital of massachusetts", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'massachusetts' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME massachusetts))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 massachusetts) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((boston))", "goal-answer":"((boston))"},
{"question":"what is the capital of new jersey", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new jersey' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new jersey))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 new jersey) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((trenton))", "goal-answer":"((trenton))"},
{"question":"what is the capital of new york", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new york' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((albany))", "goal-answer":"((albany))"},
{"question":"what is the capital of north dakota", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'north dakota' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME north dakota))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 north dakota) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((bismarck))", "goal-answer":"((bismarck))"},
{"question":"what is the capital of ohio", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'ohio' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME ohio))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((columbus))", "goal-answer":"((columbus))"},
{"question":"what is the capital of the florida state", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'florida' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME florida))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 florida) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((tallahassee))", "goal-answer":"((tallahassee))"},
{"question":"what is the capital of pennsylvania", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'pennsylvania' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME pennsylvania))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 pennsylvania) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((harrisburg))", "goal-answer":"((harrisburg))"},
{"question":"what is the capital of texas", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((austin))", "goal-answer":"((austin))"},
{"question":"what is the capital of maryland", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'maryland' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME maryland))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 maryland) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((annapolis))", "goal-answer":"((annapolis))"},
{"question":"what is capital of iowa", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'iowa' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((des moines))", "goal-answer":"((des moines))"},
{"question":"what is the capital of vermont", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'vermont' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME vermont))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 vermont) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((montpelier))", "goal-answer":"((montpelier))"},
{"question":"what is the capital of georgia", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'georgia' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME georgia))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 georgia) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((atlanta))", "goal-answer":"((atlanta))"},
{"question":"what is the capital of utah", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'utah' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME utah))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 utah) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((salt lake city))", "goal-answer":"((salt lake city))"},
{"question":"what is the capital of maine", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'maine' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME maine))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 maine) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((augusta))", "goal-answer":"((augusta))"},
{"question":"what is the capital of the state texas", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((austin))", "goal-answer":"((austin))"},
{"question":"what is the capital of washington", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'washington' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME washington))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 washington) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((olympia))", "goal-answer":"((olympia))"},
{"question":"what is the capital of indiana", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'indiana' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME indiana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 indiana) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((indianapolis))", "goal-answer":"((indianapolis))"},
{"question":"what is the capital of the alabama state", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'alabama' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME alabama))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 alabama) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((montgomery))", "goal-answer":"((montgomery))"},
{"question":"what is the capital of michigan", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'michigan' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME michigan))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 michigan) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((lansing))", "goal-answer":"((lansing))"},
{"question":"what is the capital of hawaii", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'hawaii' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME hawaii))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 hawaii) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((honolulu))", "goal-answer":"((honolulu))"},
{"question":"what is the capital of new hampshire", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new hampshire' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new hampshire))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 new hampshire) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((concord))", "goal-answer":"((concord))"},
{"question":"can you tell me the capital of texas", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((austin))", "goal-answer":"((austin))"},
{"question":"what are the capitals of states that border missouri", "sql-query":"SELECT STATEalias0.CAPITAL FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'missouri' AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= BORDER_INFOALIAS0.STATE_NAME missouri) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (EQUALS ?FILTER-0 ?COLUMN-4 ?COMPARATOR-0) (EQUALS ?FILTER-1 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-6 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((des moines) (springfield) (frankfort) (nashville) (little rock) (oklahoma city) (topeka) (lincoln))", "goal-answer":"((des moines) (springfield) (frankfort) (nashville) (little rock) (oklahoma city) (topeka) (lincoln))"},
{"question":"what are the capital cities of the states which border texas", "sql-query":"SELECT STATEalias0.CAPITAL FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= BORDER_INFOALIAS0.STATE_NAME texas) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (EQUALS ?FILTER-0 ?COLUMN-4 ?COMPARATOR-0) (EQUALS ?FILTER-1 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-6 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((little rock) (baton rouge) (santa fe) (oklahoma city))", "goal-answer":"((little rock) (baton rouge) (santa fe) (oklahoma city))"},
{"question":"what are the capitals of the states that border texas", "sql-query":"SELECT STATEalias0.CAPITAL FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= BORDER_INFOALIAS0.STATE_NAME texas) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (EQUALS ?FILTER-0 ?COLUMN-4 ?COMPARATOR-0) (EQUALS ?FILTER-1 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-6 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((little rock) (baton rouge) (santa fe) (oklahoma city))", "goal-answer":"((little rock) (baton rouge) (santa fe) (oklahoma city))"},
{"question":"which capitals are in the states that border texas", "sql-query":"SELECT STATEalias0.CAPITAL FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= BORDER_INFOALIAS0.STATE_NAME texas) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (EQUALS ?FILTER-0 ?COLUMN-4 ?COMPARATOR-0) (EQUALS ?FILTER-1 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-6 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((little rock) (baton rouge) (santa fe) (oklahoma city))", "goal-answer":"((little rock) (baton rouge) (santa fe) (oklahoma city))"},
{"question":"what are the cities in states through which the mississippi runs", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (IN CITYALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((little rock) (fort smith) (north little rock) (chicago) (rockford) (peoria) (springfield) (decatur) (aurora) (joliet) (evanston) (waukegan) (arlington heights) (elgin) (cicero) (oak lawn) (skokie) (champaign) (des moines) (cedar rapids) (davenport) (sioux city) (waterloo) (dubuque) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (lafayette) (lake charles) (kenner) (monroe) (minneapolis) (st. paul) (duluth) (bloomington) (rochester) (jackson) (st. louis) (kansas city) (springfield) (independence) (st. joseph) (columbia) (memphis) (nashville) (knoxville) (chattanooga) (milwaukee) (madison) (green bay) (racine) (kenosha) (west allis) (appleton))", "goal-answer":"((little rock) (fort smith) (north little rock) (chicago) (rockford) (peoria) (springfield) (decatur) (aurora) (joliet) (evanston) (waukegan) (arlington heights) (elgin) (cicero) (oak lawn) (skokie) (champaign) (des moines) (cedar rapids) (davenport) (sioux city) (waterloo) (dubuque) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (lafayette) (lake charles) (kenner) (monroe) (minneapolis) (st. paul) (duluth) (bloomington) (rochester) (jackson) (st. louis) (kansas city) (springfield) (independence) (st. joseph) (columbia) (memphis) (nashville) (knoxville) (chattanooga) (milwaukee) (madison) (green bay) (racine) (kenosha) (west allis) (appleton))"},
{"question":"what are the cities of the state with the highest point", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (IN CITYALIAS0.STATE_NAME (SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-8 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND CONCEPT ?ALIAS-2 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((philadelphia) (pittsburgh) (erie) (allentown) (scranton) (upper darby) (reading) (bethlehem) (lower merion) (abingdon) (bristol township) (penn hills) (altoona))", "goal-answer":"((philadelphia) (pittsburgh) (erie) (allentown) (scranton) (upper darby) (reading) (bethlehem) (lower merion) (abingdon) (bristol township) (penn hills) (altoona))"},
{"question":"what are the highest points of all the states", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 HIGHEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((cheaha mountain) (mount mckinley) (humphreys peak) (magazine mountain) (mount whitney) (mount elbert) (mount frissell) (centerville) (tenleytown) (walton county) (brasstown bald) (mauna kea) (borah peak) (charles mound) (franklin township) (ocheyedan mound) (mount sunflower) (black mountain) (driskill mountain) (mount katahdin) (backbone mountain) (mount greylock) (mount curwood) (eagle mountain) (woodall mountain) (taum sauk mountain) (granite peak) (johnson township) (boundary peak) (mount washington) (high point) (wheeler peak) (mount marcy) (mount mitchell) (white butte) (campbell hill) (black mesa) (mount hood) (mount davis) (jerimoth hill) (sassafras mountain) (harney peak) (clingmans dome) (guadalupe peak) (kings peak) (mount mansfield) (mount rogers) (mount rainier) (spruce knob) (timms hill) (gannett peak))", "goal-answer":"((cheaha mountain) (mount mckinley) (humphreys peak) (magazine mountain) (mount whitney) (mount elbert) (mount frissell) (centerville) (tenleytown) (walton county) (brasstown bald) (mauna kea) (borah peak) (charles mound) (franklin township) (ocheyedan mound) (mount sunflower) (black mountain) (driskill mountain) (mount katahdin) (backbone mountain) (mount greylock) (mount curwood) (eagle mountain) (woodall mountain) (taum sauk mountain) (granite peak) (johnson township) (boundary peak) (mount washington) (high point) (wheeler peak) (mount marcy) (mount mitchell) (white butte) (campbell hill) (black mesa) (mount hood) (mount davis) (jerimoth hill) (sassafras mountain) (harney peak) (clingmans dome) (guadalupe peak) (kings peak) (mount mansfield) (mount rogers) (mount rainier) (spruce knob) (timms hill) (gannett peak))"},
{"question":"what are the major cities in alabama", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'alabama' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME alabama)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 alabama) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((birmingham) (mobile) (montgomery))", "goal-answer":"((birmingham) (mobile) (montgomery))"},
{"question":"what are the major cities in alaska", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME alaska)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((anchorage))", "goal-answer":"((anchorage))"},
{"question":"what are the major cities in new york", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'new york' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME new york)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york) (buffalo) (rochester) (yonkers) (syracuse))", "goal-answer":"((new york) (buffalo) (rochester) (yonkers) (syracuse))"},
{"question":"what are the major cities in the state of california", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME california)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach))", "goal-answer":"((los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach))"},
{"question":"what are the major cities in vermont", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'vermont' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME vermont)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 vermont) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what major cities are located in pennsylvania", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'pennsylvania' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME pennsylvania)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 pennsylvania) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((philadelphia) (pittsburgh))", "goal-answer":"((philadelphia) (pittsburgh))"},
{"question":"what are the major cities in texas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington))", "goal-answer":"((houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington))"},
{"question":"what are the major cities in oklahoma", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'oklahoma' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME oklahoma)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 oklahoma) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((oklahoma city) (tulsa))", "goal-answer":"((oklahoma city) (tulsa))"},
{"question":"show major cities in colorado", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'colorado' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME colorado)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((denver) (colorado springs) (aurora))", "goal-answer":"((denver) (colorado springs) (aurora))"},
{"question":"what are the major cities in new mexico", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'new mexico' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME new mexico)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 new mexico) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((albuquerque))", "goal-answer":"((albuquerque))"},
{"question":"what are the names of the major cities in illinois", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'illinois' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME illinois)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 illinois) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((chicago))", "goal-answer":"((chicago))"},
{"question":"what are the major cities in north carolina", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'north carolina' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME north carolina)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 north carolina) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((charlotte) (greensboro))", "goal-answer":"((charlotte) (greensboro))"},
{"question":"what are the major cities in ohio", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'ohio' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME ohio)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((cleveland) (columbus) (cincinnati) (toledo) (akron) (dayton))", "goal-answer":"((cleveland) (columbus) (cincinnati) (toledo) (akron) (dayton))"},
{"question":"what are the major cities of texas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington))", "goal-answer":"((houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington))"},
{"question":"what are the major cities in wyoming", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'wyoming' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME wyoming)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 wyoming) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what are the major cities in california", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME california)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach))", "goal-answer":"((los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach))"},
{"question":"what are the major cities in delaware", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'delaware' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME delaware)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 delaware) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what is the major cities in montana", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'montana' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME montana)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what are the major cities in rhode island", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'rhode island' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME rhode island)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 rhode island) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((providence))", "goal-answer":"((providence))"},
{"question":"what are the major cities in missouri", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'missouri' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME missouri)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((st. louis) (kansas city))", "goal-answer":"((st. louis) (kansas city))"},
{"question":"what are the major cities in kansas", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'kansas' ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME kansas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 kansas) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((wichita) (kansas city))", "goal-answer":"((wichita) (kansas city))"},
{"question":"what are the major cities in states through which the mississippi runs", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (IN CITYALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (AND (> RIVERALIAS0.LENGTH 750) (= RIVERALIAS0.RIVER_NAME mississippi))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-0 ?COLUMN-12) (GREATER-THAN ?FILTER-0 ?COLUMN-6 ?COMPARATOR-2) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (GREATER-THAN ?FILTER-2 ?COLUMN-5 ?COMPARATOR-1) (EQUALS ?FILTER-3 ?COLUMN-4 ?COMPARATOR-0) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-8 ?FILTER-0 ?FILTER-7) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-11 ?FILTER-10) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-11 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-6 ?FILTER-5) (BIND COLUMN ?COLUMN-12 POPULATION) (BIND COLUMN ?COLUMN-11 LENGTH) (BIND COLUMN ?COLUMN-10 RIVER_NAME) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?COMPARATOR-2 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((little rock) (chicago) (des moines) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (minneapolis) (st. paul) (jackson) (st. louis) (kansas city) (memphis) (nashville) (knoxville) (chattanooga) (milwaukee) (madison))", "goal-answer":"((little rock) (chicago) (des moines) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (minneapolis) (st. paul) (jackson) (st. louis) (kansas city) (memphis) (nashville) (knoxville) (chattanooga) (milwaukee) (madison))"},
{"question":"what are the major cities in the usa", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (> CITYALIAS0.POPULATION 150000))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((birmingham) (mobile) (montgomery) (anchorage) (phoenix) (tucson) (mesa) (little rock) (los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (denver) (colorado springs) (aurora) (washington) (jacksonville) (miami) (tampa) (st. petersburg) (fort lauderdale) (atlanta) (columbus) (honolulu) (ewa) (chicago) (indianapolis) (fort wayne) (gary) (des moines) (wichita) (kansas city) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (baltimore) (boston) (worcester) (springfield) (detroit) (grand rapids) (warren) (flint) (minneapolis) (st. paul) (jackson) (st. louis) (kansas city) (omaha) (lincoln) (las vegas) (newark) (jersey city) (albuquerque) (new york) (buffalo) (rochester) (yonkers) (syracuse) (charlotte) (greensboro) (cleveland) (columbus) (cincinnati) (toledo) (akron) (dayton) (oklahoma city) (tulsa) (portland) (philadelphia) (pittsburgh) (providence) (memphis) (nashville) (knoxville) (chattanooga) (houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (salt lake city) (norfolk) (virginia beach) (richmond) (arlington) (seattle) (spokane) (tacoma) (milwaukee) (madison))", "goal-answer":"((birmingham) (mobile) (montgomery) (anchorage) (phoenix) (tucson) (mesa) (little rock) (los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (denver) (colorado springs) (aurora) (washington) (jacksonville) (miami) (tampa) (st. petersburg) (fort lauderdale) (atlanta) (columbus) (honolulu) (ewa) (chicago) (indianapolis) (fort wayne) (gary) (des moines) (wichita) (kansas city) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (baltimore) (boston) (worcester) (springfield) (detroit) (grand rapids) (warren) (flint) (minneapolis) (st. paul) (jackson) (st. louis) (kansas city) (omaha) (lincoln) (las vegas) (newark) (jersey city) (albuquerque) (new york) (buffalo) (rochester) (yonkers) (syracuse) (charlotte) (greensboro) (cleveland) (columbus) (cincinnati) (toledo) (akron) (dayton) (oklahoma city) (tulsa) (portland) (philadelphia) (pittsburgh) (providence) (memphis) (nashville) (knoxville) (chattanooga) (houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (salt lake city) (norfolk) (virginia beach) (richmond) (arlington) (seattle) (spokane) (tacoma) (milwaukee) (madison))"},
{"question":"what are the major cities of the united states", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (> CITYALIAS0.POPULATION 150000))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((birmingham) (mobile) (montgomery) (anchorage) (phoenix) (tucson) (mesa) (little rock) (los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (denver) (colorado springs) (aurora) (washington) (jacksonville) (miami) (tampa) (st. petersburg) (fort lauderdale) (atlanta) (columbus) (honolulu) (ewa) (chicago) (indianapolis) (fort wayne) (gary) (des moines) (wichita) (kansas city) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (baltimore) (boston) (worcester) (springfield) (detroit) (grand rapids) (warren) (flint) (minneapolis) (st. paul) (jackson) (st. louis) (kansas city) (omaha) (lincoln) (las vegas) (newark) (jersey city) (albuquerque) (new york) (buffalo) (rochester) (yonkers) (syracuse) (charlotte) (greensboro) (cleveland) (columbus) (cincinnati) (toledo) (akron) (dayton) (oklahoma city) (tulsa) (portland) (philadelphia) (pittsburgh) (providence) (memphis) (nashville) (knoxville) (chattanooga) (houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (salt lake city) (norfolk) (virginia beach) (richmond) (arlington) (seattle) (spokane) (tacoma) (milwaukee) (madison))", "goal-answer":"((birmingham) (mobile) (montgomery) (anchorage) (phoenix) (tucson) (mesa) (little rock) (los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (denver) (colorado springs) (aurora) (washington) (jacksonville) (miami) (tampa) (st. petersburg) (fort lauderdale) (atlanta) (columbus) (honolulu) (ewa) (chicago) (indianapolis) (fort wayne) (gary) (des moines) (wichita) (kansas city) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (baltimore) (boston) (worcester) (springfield) (detroit) (grand rapids) (warren) (flint) (minneapolis) (st. paul) (jackson) (st. louis) (kansas city) (omaha) (lincoln) (las vegas) (newark) (jersey city) (albuquerque) (new york) (buffalo) (rochester) (yonkers) (syracuse) (charlotte) (greensboro) (cleveland) (columbus) (cincinnati) (toledo) (akron) (dayton) (oklahoma city) (tulsa) (portland) (philadelphia) (pittsburgh) (providence) (memphis) (nashville) (knoxville) (chattanooga) (houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (salt lake city) (norfolk) (virginia beach) (richmond) (arlington) (seattle) (spokane) (tacoma) (milwaukee) (madison))"},
{"question":"what are the major cities of the us", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (> CITYALIAS0.POPULATION 150000))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((birmingham) (mobile) (montgomery) (anchorage) (phoenix) (tucson) (mesa) (little rock) (los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (denver) (colorado springs) (aurora) (washington) (jacksonville) (miami) (tampa) (st. petersburg) (fort lauderdale) (atlanta) (columbus) (honolulu) (ewa) (chicago) (indianapolis) (fort wayne) (gary) (des moines) (wichita) (kansas city) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (baltimore) (boston) (worcester) (springfield) (detroit) (grand rapids) (warren) (flint) (minneapolis) (st. paul) (jackson) (st. louis) (kansas city) (omaha) (lincoln) (las vegas) (newark) (jersey city) (albuquerque) (new york) (buffalo) (rochester) (yonkers) (syracuse) (charlotte) (greensboro) (cleveland) (columbus) (cincinnati) (toledo) (akron) (dayton) (oklahoma city) (tulsa) (portland) (philadelphia) (pittsburgh) (providence) (memphis) (nashville) (knoxville) (chattanooga) (houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (salt lake city) (norfolk) (virginia beach) (richmond) (arlington) (seattle) (spokane) (tacoma) (milwaukee) (madison))", "goal-answer":"((birmingham) (mobile) (montgomery) (anchorage) (phoenix) (tucson) (mesa) (little rock) (los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (denver) (colorado springs) (aurora) (washington) (jacksonville) (miami) (tampa) (st. petersburg) (fort lauderdale) (atlanta) (columbus) (honolulu) (ewa) (chicago) (indianapolis) (fort wayne) (gary) (des moines) (wichita) (kansas city) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (baltimore) (boston) (worcester) (springfield) (detroit) (grand rapids) (warren) (flint) (minneapolis) (st. paul) (jackson) (st. louis) (kansas city) (omaha) (lincoln) (las vegas) (newark) (jersey city) (albuquerque) (new york) (buffalo) (rochester) (yonkers) (syracuse) (charlotte) (greensboro) (cleveland) (columbus) (cincinnati) (toledo) (akron) (dayton) (oklahoma city) (tulsa) (portland) (philadelphia) (pittsburgh) (providence) (memphis) (nashville) (knoxville) (chattanooga) (houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (salt lake city) (norfolk) (virginia beach) (richmond) (arlington) (seattle) (spokane) (tacoma) (milwaukee) (madison))"},
{"question":"what are the population densities of each us state", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 DENSITY) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((75.31914893617021D0) (0.6798646362098139D0) (23.842105263157894D0) (42.96992481203007D0) (149.81012658227849D0) (27.778846153846154D0) (618.9243027888447D0) (290.60665362035224D0) (580.0D0) (141.9375509728533D0) (92.75042444821732D0) (148.97233812393756D0) (11.373493975903614D0) (202.4866785079929D0) (151.65745856353593D0) (51.740674955595026D0) (28.724179829890645D0) (28.724179829890645D0) (88.17610062893081D0) (33.81932962573275D0) (403.1548757170172D0) (692.5398358281024D0) (158.32478632478632D0) (48.29383886255924D0) (52.83018867924528D0) (70.53084648493544D0) (5.351700680272109D0) (20.297542043984475D0) (7.244343891402715D0) (99.21327729281173D0) (945.8071144214717D0) (10.71546052631579D0) (357.5967413441955D0) (111.67647617239415D0) (9.231966053748233D0) (261.50121065375305D0) (43.24517512508935D0) (27.12391705211542D0) (261.8301403725611D0) (781.5181518151816D0) (100.3374795101726D0) (8.957505576015354D0) (108.94636924537257D0) (53.33068472716233D0) (17.208480565371026D0) (53.203661327231124D0) (131.1776251226693D0) (60.36484245439469D0) (80.57851239669421D0) (83.69989136822609D0) (4.8007545317915525D0))", "goal-answer":"((75.31914893617021D0) (0.6798646362098139D0) (23.842105263157894D0) (42.96992481203007D0) (149.81012658227849D0) (27.778846153846154D0) (618.9243027888447D0) (290.60665362035224D0) (580.0D0) (141.9375509728533D0) (92.75042444821732D0) (148.97233812393756D0) (11.373493975903614D0) (202.4866785079929D0) (151.65745856353593D0) (51.740674955595026D0) (28.724179829890645D0) (28.724179829890645D0) (88.17610062893081D0) (33.81932962573275D0) (403.1548757170172D0) (692.5398358281024D0) (158.32478632478632D0) (48.29383886255924D0) (52.83018867924528D0) (70.53084648493544D0) (5.351700680272109D0) (20.297542043984475D0) (7.244343891402715D0) (99.21327729281173D0) (945.8071144214717D0) (10.71546052631579D0) (357.5967413441955D0) (111.67647617239415D0) (9.231966053748233D0) (261.50121065375305D0) (43.24517512508935D0) (27.12391705211542D0) (261.8301403725611D0) (781.5181518151816D0) (100.3374795101726D0) (8.957505576015354D0) (108.94636924537257D0) (53.33068472716233D0) (17.208480565371026D0) (53.203661327231124D0) (131.1776251226693D0) (60.36484245439469D0) (80.57851239669421D0) (83.69989136822609D0) (4.8007545317915525D0))"},
{"question":"what are the populations of states through which the mississippi river run", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))", "goal-answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))"},
{"question":"what are the populations of states through which the mississippi runs", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))", "goal-answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))"},
{"question":"what are the populations of the states through which the mississippi runs", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))", "goal-answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))"},
{"question":"what are the populations of states through which the mississippi river runs", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))", "goal-answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))"},
{"question":"what are the populations of the states through which the mississippi run", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))", "goal-answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))"},
{"question":"what are the populations of the states through which the mississippi river run", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))", "goal-answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))"},
{"question":"what are the populations of states through which the mississippi run", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))", "goal-answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))"},
{"question":"what are the populations of the states through which the mississippi river runs", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))", "goal-answer":"((2286000) (11400000) (2913000) (2364000) (4206000) (4076000) (2520000) (4916000) (4591000) (4700000))"},
{"question":"what are the populations of states which border texas", "sql-query":"SELECT STATEalias0.POPULATION FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= BORDER_INFOALIAS0.STATE_NAME texas) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (EQUALS ?FILTER-0 ?COLUMN-4 ?COMPARATOR-0) (EQUALS ?FILTER-1 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-6 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((2286000) (4206000) (1303000) (3025000))", "goal-answer":"((2286000) (4206000) (1303000) (3025000))"},
{"question":"what are the populations of the major cities of texas", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-1 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((1595138) (904078) (785880) (425259) (385164) (345496) (231999) (173979) (160123))", "goal-answer":"((1595138) (904078) (785880) (425259) (385164) (345496) (231999) (173979) (160123))"},
{"question":"what are the populations of all the major cities in montana", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'montana' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME montana)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-1 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what is the population of the major cities in wisconsin", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'wisconsin' ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME wisconsin)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-1 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 wisconsin) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((636212) (170616))", "goal-answer":"((636212) (170616))"},
{"question":"what city has the most people", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what city in the united states has the highest population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what is the most populous city", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"which us city has the highest population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what is the biggest city in the usa", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"whats the largest city", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what city has the largest population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what is the biggest city in the us", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what is the biggest city in usa", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what is capital of the state with the lowest point", "sql-query":"SELECT STATEalias0.CAPITAL FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS HIGHLOW HIGHLOWALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))) (= STATEALIAS0.STATE_NAME HIGHLOWALIAS0.STATE_NAME)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-8) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?RESULT-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-7 ?FILTER-6) (FROM ?FILTER-8 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-5) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-8 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 CAPITAL) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((baton rouge))", "goal-answer":"((baton rouge))"},
{"question":"what is the biggest american city in a state with a river", "sql-query":"SELECT DISTINCT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 , RIVER AS RIVERalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = CITYalias1.STATE_NAME ) AND RIVERalias0.TRAVERSE = CITYalias0.STATE_NAME ;", "s-sql-query":"(SELECT (DISTINCT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) (AS RIVER RIVERALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE CITYALIAS1.STATE_NAME))) (= RIVERALIAS0.TRAVERSE CITYALIAS0.STATE_NAME)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-3 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-2 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-6 ?COLUMN-7) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-2 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-2) (EQUALS ?FILTER-5 ?COLUMN-5 ?RESULT-1) (EQUALS ?FILTER-6 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-7 ?FILTER-5 ?FILTER-6) (WHERE ?FILTER-8 ?FILTER-7) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-10 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-10 ?FILTER-9) (FROM ?FILTER-11 ?COMMA-CLAUSE-1) (DISTINCT ?AGGREGATOR-1 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-11 ?FILTER-8) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 TRAVERSE) (BIND COLUMN ?COLUMN-9 POPULATION) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND CONCEPT ?ALIAS-2 RIVERALIAS1) (BIND CONCEPT ?ALIAS-3 CITYALIAS1) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 CITY))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what is the biggest capital city in the us", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COLUMN-5) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((phoenix))", "goal-answer":"((phoenix))"},
{"question":"what is the largest capital city in the usa", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COLUMN-5) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((phoenix))", "goal-answer":"((phoenix))"},
{"question":"what is the largest state capital in population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COLUMN-5) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((phoenix))", "goal-answer":"((phoenix))"},
{"question":"what is the largest capital", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COLUMN-5) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((phoenix))", "goal-answer":"((phoenix))"},
{"question":"what is the most populated capital in the usa", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COLUMN-5) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((phoenix))", "goal-answer":"((phoenix))"},
{"question":"what capital is the largest in the us", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COLUMN-5) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((phoenix))", "goal-answer":"((phoenix))"},
{"question":"what capital has the largest population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COLUMN-5) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((phoenix))", "goal-answer":"((phoenix))"},
{"question":"what is largest capital", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COLUMN-5) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((phoenix))", "goal-answer":"((phoenix))"},
{"question":"what is the capital of states that have cities named durham", "sql-query":"SELECT STATEalias0.CAPITAL FROM CITY AS CITYalias0 , STATE AS STATEalias0 WHERE CITYalias0.CITY_NAME = 'durham' AND STATEalias0.STATE_NAME = CITYalias0.STATE_NAME ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS CITY CITYALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME durham) (= STATEALIAS0.STATE_NAME CITYALIAS0.STATE_NAME)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (EQUALS ?FILTER-0 ?COLUMN-4 ?COMPARATOR-0) (EQUALS ?FILTER-1 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-6 ?FILTER-3) (BIND COLUMN ?COLUMN-7 CITY_NAME) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 durham) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 STATE))", "answer":"((raleigh))", "goal-answer":"((raleigh))"},
{"question":"what is the capital of the smallest state", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((washington))", "goal-answer":"((washington))"},
{"question":"what is the capital of the state with the largest population density", "sql-query":"SELECT DISTINCT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT (DISTINCT STATEALIAS0.CAPITAL) FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (DISTINCT ?AGGREGATOR-1 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((trenton))", "goal-answer":"((trenton))"},
{"question":"what is the capital of the state with the largest population", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((sacramento))", "goal-answer":"((sacramento))"},
{"question":"what is the capital of the state with the most inhabitants", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((sacramento))", "goal-answer":"((sacramento))"},
{"question":"what is the capital of the state with the longest river", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-9 LENGTH) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 CAPITAL) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((des moines) (jefferson city) (helena) (lincoln) (bismarck) (pierre))", "goal-answer":"((des moines) (jefferson city) (helena) (lincoln) (bismarck) (pierre))"},
{"question":"what is the combined area of all 50 states", "sql-query":"SELECT SUM( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (SUM STATEALIAS0.AREA) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SUM ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((3670038.0D0))", "goal-answer":"((3670038.0D0))"},
{"question":"what is the area of all the states combined", "sql-query":"SELECT SUM( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (SUM STATEALIAS0.AREA) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SUM ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((3670038.0D0))", "goal-answer":"((3670038.0D0))"},
{"question":"how many square kilometers in the us", "sql-query":"SELECT SUM( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (SUM STATEALIAS0.AREA) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SUM ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((3670038.0D0))", "goal-answer":"((3670038.0D0))"},
{"question":"what is the total area of the usa", "sql-query":"SELECT SUM( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (SUM STATEALIAS0.AREA) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SUM ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((3670038.0D0))", "goal-answer":"((3670038.0D0))"},
{"question":"what is the density of the new york", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new york' ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new york))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 DENSITY) (BIND CONCEPT ?COMPARATOR-0 new york) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((357.5967413441955D0))", "goal-answer":"((357.5967413441955D0))"},
{"question":"what is the population density of maine", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'maine' ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME maine))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 DENSITY) (BIND CONCEPT ?COMPARATOR-0 maine) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((33.81932962573275D0))", "goal-answer":"((33.81932962573275D0))"},
{"question":"what is the population density of south dakota", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'south dakota' ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME south dakota))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 DENSITY) (BIND CONCEPT ?COMPARATOR-0 south dakota) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((8.957505576015354D0))", "goal-answer":"((8.957505576015354D0))"},
{"question":"what is the population density of texas", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 DENSITY) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((53.33068472716233D0))", "goal-answer":"((53.33068472716233D0))"},
{"question":"what is the density of texas", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 DENSITY) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((53.33068472716233D0))", "goal-answer":"((53.33068472716233D0))"},
{"question":"what is the population density of wyoming", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'wyoming' ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME wyoming))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 DENSITY) (BIND CONCEPT ?COMPARATOR-0 wyoming) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((4.8007545317915525D0))", "goal-answer":"((4.8007545317915525D0))"},
{"question":"what is the highest mountain in the us", "sql-query":"SELECT MOUNTAINalias0.MOUNTAIN_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_ALTITUDE = ( SELECT MAX( MOUNTAINalias1.MOUNTAIN_ALTITUDE ) FROM MOUNTAIN AS MOUNTAINalias1 ) ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.MOUNTAIN_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_ALTITUDE (SELECT (MAX MOUNTAINALIAS1.MOUNTAIN_ALTITUDE) FROM (AS MOUNTAIN MOUNTAINALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 MOUNTAIN_ALTITUDE) (BIND COLUMN ?COLUMN-4 MOUNTAIN_NAME) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND CONCEPT ?ALIAS-1 MOUNTAINALIAS1) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((mckinley))", "goal-answer":"((mckinley))"},
{"question":"what is the highest mountain in us", "sql-query":"SELECT MOUNTAINalias0.MOUNTAIN_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_ALTITUDE = ( SELECT MAX( MOUNTAINalias1.MOUNTAIN_ALTITUDE ) FROM MOUNTAIN AS MOUNTAINalias1 ) ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.MOUNTAIN_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_ALTITUDE (SELECT (MAX MOUNTAINALIAS1.MOUNTAIN_ALTITUDE) FROM (AS MOUNTAIN MOUNTAINALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 MOUNTAIN_ALTITUDE) (BIND COLUMN ?COLUMN-4 MOUNTAIN_NAME) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND CONCEPT ?ALIAS-1 MOUNTAINALIAS1) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((mckinley))", "goal-answer":"((mckinley))"},
{"question":"what is the tallest mountain in america", "sql-query":"SELECT MOUNTAINalias0.MOUNTAIN_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_ALTITUDE = ( SELECT MAX( MOUNTAINalias1.MOUNTAIN_ALTITUDE ) FROM MOUNTAIN AS MOUNTAINalias1 ) ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.MOUNTAIN_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_ALTITUDE (SELECT (MAX MOUNTAINALIAS1.MOUNTAIN_ALTITUDE) FROM (AS MOUNTAIN MOUNTAINALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 MOUNTAIN_ALTITUDE) (BIND COLUMN ?COLUMN-4 MOUNTAIN_NAME) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND CONCEPT ?ALIAS-1 MOUNTAINALIAS1) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((mckinley))", "goal-answer":"((mckinley))"},
{"question":"what is the tallest mountain in the united states", "sql-query":"SELECT MOUNTAINalias0.MOUNTAIN_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_ALTITUDE = ( SELECT MAX( MOUNTAINalias1.MOUNTAIN_ALTITUDE ) FROM MOUNTAIN AS MOUNTAINalias1 ) ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.MOUNTAIN_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_ALTITUDE (SELECT (MAX MOUNTAINALIAS1.MOUNTAIN_ALTITUDE) FROM (AS MOUNTAIN MOUNTAINALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 MOUNTAIN_ALTITUDE) (BIND COLUMN ?COLUMN-4 MOUNTAIN_NAME) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND CONCEPT ?ALIAS-1 MOUNTAINALIAS1) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((mckinley))", "goal-answer":"((mckinley))"},
{"question":"what is the highest point in the state with capital austin", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'austin' ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (IN HIGHLOWALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL austin))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 STATE))", "answer":"((guadalupe peak))", "goal-answer":"((guadalupe peak))"},
{"question":"what is the highest point in the state with capital des moines", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'des moines' ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (IN HIGHLOWALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL des moines))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 des moines) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 STATE))", "answer":"((ocheyedan mound))", "goal-answer":"((ocheyedan mound))"},
{"question":"what is the highest point in the state with the capital des moines", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'des moines' ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (IN HIGHLOWALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL des moines))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 HIGHEST_POINT) (BIND CONCEPT ?COMPARATOR-0 des moines) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 STATE))", "answer":"((ocheyedan mound))", "goal-answer":"((ocheyedan mound))"},
{"question":"what is the highest point in the usa", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 HIGHEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mount davis))", "goal-answer":"((mount davis))"},
{"question":"what is the highest point of the usa", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 HIGHEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mount davis))", "goal-answer":"((mount davis))"},
{"question":"what is the highest point in the country", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 HIGHEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mount davis))", "goal-answer":"((mount davis))"},
{"question":"what is the highest point in the us", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 HIGHEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mount davis))", "goal-answer":"((mount davis))"},
{"question":"what is the highest point in the united states", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 HIGHEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mount davis))", "goal-answer":"((mount davis))"},
{"question":"what is the highest point of the state with the smallest population density", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (IN HIGHLOWALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MIN STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MIN ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-8 DENSITY) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 HIGHEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 STATE))", "answer":"((mount mckinley))", "goal-answer":"((mount mckinley))"},
{"question":"what is the largest city in smallest state through which the mississippi runs", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = 'mississippi' ) AND STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ) ) ORDER BY CITYalias0.POPULATION DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (IN CITYALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS1.TRAVERSE FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.RIVER_NAME mississippi))) (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))))))) (DESC CITYALIAS0.POPULATION)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-4 ?COLUMN-12) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-13) (DOT ?COLUMN-4 ?ALIAS-4 ?COLUMN-14) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-14) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-14) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-16) (DOT ?COLUMN-8 ?ALIAS-4 ?COLUMN-15) (DOT ?COLUMN-9 ?ALIAS-3 ?COLUMN-16) (DOT ?COLUMN-10 ?ALIAS-0 ?COLUMN-17) (DOT ?COLUMN-11 ?ALIAS-2 ?COLUMN-17) (AS ?FILTER-0 ?TABLE-2 ?ALIAS-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-3 ?COLUMN-11 ?COMPARATOR-1) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-2) (IN ?FILTER-6 ?COLUMN-6 ?RESULT-4) (MIN ?AGGREGATOR-0 ?COLUMN-7) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-9 ?COLUMN-10 ?COMPARATOR-1) (WHERE ?FILTER-10 ?FILTER-9) (FROM ?FILTER-11 ?FILTER-8) (IN ?FILTER-12 ?COLUMN-5 ?RESULT-3) (WHERE ?FILTER-13 ?FILTER-12) (FROM ?FILTER-14 ?FILTER-7) (EQUALS ?FILTER-15 ?COLUMN-9 ?RESULT-2) (AND ?FILTER-16 ?FILTER-6 ?FILTER-15) (WHERE ?FILTER-17 ?FILTER-16) (FROM ?FILTER-18 ?FILTER-1) (IN ?FILTER-19 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-20 ?FILTER-19) (FROM ?FILTER-21 ?FILTER-0) (DESC ?FILTER-22 ?COLUMN-8) (ORDER-BY ?FILTER-23 ?RESULT-0 ?FILTER-22) (LIMIT ?FILTER-24 ?FILTER-23 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-1 ?COLUMN-6 ?FILTER-18 ?FILTER-17) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-14 ?FILTER-13) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-11 ?FILTER-10) (SELECT ?RESULT-4 ?COLUMN-3 ?FILTER-5 ?FILTER-4) (BIND COLUMN ?COLUMN-17 RIVER_NAME) (BIND COLUMN ?COLUMN-16 AREA) (BIND COLUMN ?COLUMN-15 POPULATION) (BIND COLUMN ?COLUMN-14 STATE_NAME) (BIND COLUMN ?COLUMN-13 TRAVERSE) (BIND COLUMN ?COLUMN-12 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS1) (BIND CONCEPT ?ALIAS-3 STATEALIAS0) (BIND CONCEPT ?ALIAS-4 CITYALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE) (BIND TABLE ?TABLE-2 CITY))", "answer":"((memphis))", "goal-answer":"((memphis))"},
{"question":"what is the largest city in the smallest state in the usa", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ) AND CITYalias0.STATE_NAME IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.AREA = ( SELECT MIN( STATEalias3.AREA ) FROM STATE AS STATEalias3 ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (IN CITYALIAS1.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))) (IN CITYALIAS0.STATE_NAME (SELECT STATEALIAS2.STATE_NAME FROM (AS STATE STATEALIAS2) WHERE (= STATEALIAS2.AREA (SELECT (MIN STATEALIAS3.AREA) FROM (AS STATE STATEALIAS3)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-13) (DOT ?COLUMN-3 ?ALIAS-4 ?COLUMN-13) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-13) (DOT ?COLUMN-6 ?ALIAS-5 ?COLUMN-14) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-15) (DOT ?COLUMN-8 ?ALIAS-3 ?COLUMN-15) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-15) (DOT ?COLUMN-10 ?ALIAS-0 ?COLUMN-14) (DOT ?COLUMN-11 ?ALIAS-4 ?COLUMN-15) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-5) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-4) (MIN ?AGGREGATOR-1 ?COLUMN-8) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-3) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-11 ?RESULT-5) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-5 ?RESULT-4) (WHERE ?FILTER-8 ?FILTER-7) (FROM ?FILTER-9 ?FILTER-0) (EQUALS ?FILTER-10 ?COLUMN-10 ?RESULT-3) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-2) (MIN ?AGGREGATOR-2 ?COLUMN-7) (AS ?FILTER-12 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-13 ?FILTER-12) (EQUALS ?FILTER-14 ?COLUMN-9 ?RESULT-2) (WHERE ?FILTER-15 ?FILTER-14) (FROM ?FILTER-16 ?FILTER-11) (IN ?FILTER-17 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-18 ?FILTER-10 ?FILTER-17) (WHERE ?FILTER-19 ?FILTER-18) (AS ?FILTER-20 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-21 ?FILTER-19) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-16 ?FILTER-15) (SELECT ?RESULT-2 ?AGGREGATOR-2 ?FILTER-13) (SELECT ?RESULT-3 ?AGGREGATOR-0 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-4 ?COLUMN-3 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-5 ?AGGREGATOR-1 ?FILTER-3) (BIND COLUMN ?COLUMN-15 AREA) (BIND COLUMN ?COLUMN-14 POPULATION) (BIND COLUMN ?COLUMN-13 STATE_NAME) (BIND COLUMN ?COLUMN-12 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS3) (BIND CONCEPT ?ALIAS-2 STATEALIAS2) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND CONCEPT ?ALIAS-4 STATEALIAS0) (BIND CONCEPT ?ALIAS-5 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((washington))", "goal-answer":"((washington))"},
{"question":"what is the biggest city in the smallest state", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ) AND CITYalias0.STATE_NAME IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.AREA = ( SELECT MIN( STATEalias3.AREA ) FROM STATE AS STATEalias3 ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (IN CITYALIAS1.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))) (IN CITYALIAS0.STATE_NAME (SELECT STATEALIAS2.STATE_NAME FROM (AS STATE STATEALIAS2) WHERE (= STATEALIAS2.AREA (SELECT (MIN STATEALIAS3.AREA) FROM (AS STATE STATEALIAS3)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-13) (DOT ?COLUMN-3 ?ALIAS-4 ?COLUMN-13) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-13) (DOT ?COLUMN-6 ?ALIAS-5 ?COLUMN-14) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-15) (DOT ?COLUMN-8 ?ALIAS-3 ?COLUMN-15) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-15) (DOT ?COLUMN-10 ?ALIAS-0 ?COLUMN-14) (DOT ?COLUMN-11 ?ALIAS-4 ?COLUMN-15) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-5) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-4) (MIN ?AGGREGATOR-1 ?COLUMN-8) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-3) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-11 ?RESULT-5) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-5 ?RESULT-4) (WHERE ?FILTER-8 ?FILTER-7) (FROM ?FILTER-9 ?FILTER-0) (EQUALS ?FILTER-10 ?COLUMN-10 ?RESULT-3) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-2) (MIN ?AGGREGATOR-2 ?COLUMN-7) (AS ?FILTER-12 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-13 ?FILTER-12) (EQUALS ?FILTER-14 ?COLUMN-9 ?RESULT-2) (WHERE ?FILTER-15 ?FILTER-14) (FROM ?FILTER-16 ?FILTER-11) (IN ?FILTER-17 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-18 ?FILTER-10 ?FILTER-17) (WHERE ?FILTER-19 ?FILTER-18) (AS ?FILTER-20 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-21 ?FILTER-19) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-16 ?FILTER-15) (SELECT ?RESULT-2 ?AGGREGATOR-2 ?FILTER-13) (SELECT ?RESULT-3 ?AGGREGATOR-0 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-4 ?COLUMN-3 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-5 ?AGGREGATOR-1 ?FILTER-3) (BIND COLUMN ?COLUMN-15 AREA) (BIND COLUMN ?COLUMN-14 POPULATION) (BIND COLUMN ?COLUMN-13 STATE_NAME) (BIND COLUMN ?COLUMN-12 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS3) (BIND CONCEPT ?ALIAS-2 STATEALIAS2) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND CONCEPT ?ALIAS-4 STATEALIAS0) (BIND CONCEPT ?ALIAS-5 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((washington))", "goal-answer":"((washington))"},
{"question":"what is the largest state bordering arkansas", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'arkansas' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'arkansas' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME arkansas))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME arkansas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 AREA) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 arkansas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what is the largest state that borders texas", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME texas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 AREA) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((new mexico))", "goal-answer":"((new mexico))"},
{"question":"what is the largest state bordering texas", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME texas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 AREA) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((new mexico))", "goal-answer":"((new mexico))"},
{"question":"what state that borders texas is the largest", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME texas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 AREA) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((new mexico))", "goal-answer":"((new mexico))"},
{"question":"what is the largest state that borders california", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'california' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'california' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME california))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME california)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 AREA) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((arizona))", "goal-answer":"((arizona))"},
{"question":"what is the largest state bordering arkansas", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'arkansas' ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME arkansas)))) (DESC STATEALIAS0.AREA)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-3) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 AREA) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 arkansas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what is the largest state that borders texas", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas)))) (DESC STATEALIAS0.AREA)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-3) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 AREA) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((new mexico))", "goal-answer":"((new mexico))"},
{"question":"what is the largest state bordering texas", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas)))) (DESC STATEALIAS0.AREA)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-3) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 AREA) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((new mexico))", "goal-answer":"((new mexico))"},
{"question":"what state that borders texas is the largest", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas)))) (DESC STATEALIAS0.AREA)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-3) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 AREA) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((new mexico))", "goal-answer":"((new mexico))"},
{"question":"what is the largest state that borders california", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'california' ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME california)))) (DESC STATEALIAS0.AREA)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-3) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 AREA) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 california) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((arizona))", "goal-answer":"((arizona))"},
{"question":"what is the largest state bordering arkansas", "sql query":"SELECT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'arkansas' AND STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'arkansas' AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (AND (= BORDER_INFOALIAS0.STATE_NAME arkansas) (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS BORDER_INFO BORDER_INFOALIAS1) (AS STATE STATEALIAS1) WHERE (AND (= BORDER_INFOALIAS1.STATE_NAME arkansas) (= STATEALIAS1.STATE_NAME BORDER_INFOALIAS1.BORDER))))) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-11) (EQUALS ?FILTER-0 ?COLUMN-8 ?COMPARATOR-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-3 ?COLUMN-7 ?COMPARATOR-0) (EQUALS ?FILTER-4 ?COLUMN-5 ?COLUMN-6) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (COMMA ?COMMA-CLAUSE-2 ?FILTER-1 ?FILTER-2) (FROM ?FILTER-7 ?COMMA-CLAUSE-2) (EQUALS ?FILTER-8 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-9 ?FILTER-0 ?FILTER-8) (EQUALS ?FILTER-10 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-11 ?FILTER-9 ?FILTER-10) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-14 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-14 ?FILTER-13) (FROM ?FILTER-15 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-15 ?FILTER-12) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 AREA) (BIND CONCEPT ?COMPARATOR-0 arkansas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what is the largest state that borders texas", "sql query":"SELECT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' AND STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (AND (= BORDER_INFOALIAS0.STATE_NAME texas) (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS BORDER_INFO BORDER_INFOALIAS1) (AS STATE STATEALIAS1) WHERE (AND (= BORDER_INFOALIAS1.STATE_NAME texas) (= STATEALIAS1.STATE_NAME BORDER_INFOALIAS1.BORDER))))) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-11) (EQUALS ?FILTER-0 ?COLUMN-8 ?COMPARATOR-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-3 ?COLUMN-7 ?COMPARATOR-0) (EQUALS ?FILTER-4 ?COLUMN-5 ?COLUMN-6) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (COMMA ?COMMA-CLAUSE-2 ?FILTER-1 ?FILTER-2) (FROM ?FILTER-7 ?COMMA-CLAUSE-2) (EQUALS ?FILTER-8 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-9 ?FILTER-0 ?FILTER-8) (EQUALS ?FILTER-10 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-11 ?FILTER-9 ?FILTER-10) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-14 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-14 ?FILTER-13) (FROM ?FILTER-15 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-15 ?FILTER-12) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 AREA) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((new mexico))", "goal-answer":"((new mexico))"},
{"question":"what is the largest state bordering texas", "sql query":"SELECT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' AND STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (AND (= BORDER_INFOALIAS0.STATE_NAME texas) (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS BORDER_INFO BORDER_INFOALIAS1) (AS STATE STATEALIAS1) WHERE (AND (= BORDER_INFOALIAS1.STATE_NAME texas) (= STATEALIAS1.STATE_NAME BORDER_INFOALIAS1.BORDER))))) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-11) (EQUALS ?FILTER-0 ?COLUMN-8 ?COMPARATOR-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-3 ?COLUMN-7 ?COMPARATOR-0) (EQUALS ?FILTER-4 ?COLUMN-5 ?COLUMN-6) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (COMMA ?COMMA-CLAUSE-2 ?FILTER-1 ?FILTER-2) (FROM ?FILTER-7 ?COMMA-CLAUSE-2) (EQUALS ?FILTER-8 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-9 ?FILTER-0 ?FILTER-8) (EQUALS ?FILTER-10 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-11 ?FILTER-9 ?FILTER-10) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-14 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-14 ?FILTER-13) (FROM ?FILTER-15 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-15 ?FILTER-12) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 AREA) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((new mexico))", "goal-answer":"((new mexico))"},
{"question":"what state that borders texas is the largest", "sql query":"SELECT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' AND STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (AND (= BORDER_INFOALIAS0.STATE_NAME texas) (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS BORDER_INFO BORDER_INFOALIAS1) (AS STATE STATEALIAS1) WHERE (AND (= BORDER_INFOALIAS1.STATE_NAME texas) (= STATEALIAS1.STATE_NAME BORDER_INFOALIAS1.BORDER))))) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-11) (EQUALS ?FILTER-0 ?COLUMN-8 ?COMPARATOR-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-3 ?COLUMN-7 ?COMPARATOR-0) (EQUALS ?FILTER-4 ?COLUMN-5 ?COLUMN-6) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (COMMA ?COMMA-CLAUSE-2 ?FILTER-1 ?FILTER-2) (FROM ?FILTER-7 ?COMMA-CLAUSE-2) (EQUALS ?FILTER-8 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-9 ?FILTER-0 ?FILTER-8) (EQUALS ?FILTER-10 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-11 ?FILTER-9 ?FILTER-10) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-14 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-14 ?FILTER-13) (FROM ?FILTER-15 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-15 ?FILTER-12) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 AREA) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((new mexico))", "goal-answer":"((new mexico))"},
{"question":"what is the largest state that borders california", "sql query":"SELECT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'california' AND STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'california' AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (AND (= BORDER_INFOALIAS0.STATE_NAME california) (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS BORDER_INFO BORDER_INFOALIAS1) (AS STATE STATEALIAS1) WHERE (AND (= BORDER_INFOALIAS1.STATE_NAME california) (= STATEALIAS1.STATE_NAME BORDER_INFOALIAS1.BORDER))))) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-11) (EQUALS ?FILTER-0 ?COLUMN-8 ?COMPARATOR-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-3 ?COLUMN-7 ?COMPARATOR-0) (EQUALS ?FILTER-4 ?COLUMN-5 ?COLUMN-6) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (COMMA ?COMMA-CLAUSE-2 ?FILTER-1 ?FILTER-2) (FROM ?FILTER-7 ?COMMA-CLAUSE-2) (EQUALS ?FILTER-8 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-9 ?FILTER-0 ?FILTER-8) (EQUALS ?FILTER-10 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-11 ?FILTER-9 ?FILTER-10) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-14 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-14 ?FILTER-13) (FROM ?FILTER-15 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-15 ?FILTER-12) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 AREA) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((arizona))", "goal-answer":"((arizona))"},
{"question":"what is the length of the river that flows through the most states", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME (SELECT RIVER_NAME FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS0) RIVERALIAS1.RIVER_NAME FROM (AS RIVER RIVERALIAS1) GROUP-BY RIVERALIAS1.RIVER_NAME) DERIVED_TABLEALIAS0) WHERE (= DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0 (SELECT (MAX DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS1) FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS1) RIVERALIAS2.RIVER_NAME FROM (AS RIVER RIVERALIAS2) GROUP-BY RIVERALIAS2.RIVER_NAME) DERIVED_TABLEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-5 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-4 ?COLUMN-10) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (AS ?FILTER-0 ?AGGREGATOR-0 ?COLUMN-10) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-5) (GROUP-BY ?FILTER-2 ?COLUMN-2) (FROM ?FILTER-3 ?FILTER-1) (AS ?FILTER-4 ?RESULT-4 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-4) (AS ?FILTER-5 ?AGGREGATOR-0 ?COLUMN-8) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-2) (GROUP-BY ?FILTER-7 ?COLUMN-1) (FROM ?FILTER-8 ?FILTER-6) (AS ?FILTER-9 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-10 ?FILTER-9) (EQUALS ?FILTER-11 ?COLUMN-6 ?RESULT-2) (WHERE ?FILTER-12 ?FILTER-11) (FROM ?FILTER-13 ?FILTER-4) (EQUALS ?FILTER-14 ?COLUMN-5 ?RESULT-1) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (DISTINCT ?AGGREGATOR-2 ?COLUMN-3) (SELECT ?RESULT-0 ?AGGREGATOR-2 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-9 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-10) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?COLUMN-1) (SELECT ?RESULT-3 ?COMMA-CLAUSE-1 ?FILTER-8 ?FILTER-7) (COMMA ?COMMA-CLAUSE-2 ?FILTER-0 ?COLUMN-2) (SELECT ?RESULT-4 ?COMMA-CLAUSE-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-10 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-9 RIVER_NAME) (BIND COLUMN ?COLUMN-8 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS2) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-4 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-5 RIVERALIAS1) (BIND CONCEPT ?ALIAS-6 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3778))", "goal-answer":"((3778))"},
{"question":"what is the length of the river that runs through the most states", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME (SELECT RIVER_NAME FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS0) RIVERALIAS1.RIVER_NAME FROM (AS RIVER RIVERALIAS1) GROUP-BY RIVERALIAS1.RIVER_NAME) DERIVED_TABLEALIAS0) WHERE (= DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0 (SELECT (MAX DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS1) FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS1) RIVERALIAS2.RIVER_NAME FROM (AS RIVER RIVERALIAS2) GROUP-BY RIVERALIAS2.RIVER_NAME) DERIVED_TABLEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-5 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-4 ?COLUMN-10) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (AS ?FILTER-0 ?AGGREGATOR-0 ?COLUMN-10) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-5) (GROUP-BY ?FILTER-2 ?COLUMN-2) (FROM ?FILTER-3 ?FILTER-1) (AS ?FILTER-4 ?RESULT-4 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-4) (AS ?FILTER-5 ?AGGREGATOR-0 ?COLUMN-8) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-2) (GROUP-BY ?FILTER-7 ?COLUMN-1) (FROM ?FILTER-8 ?FILTER-6) (AS ?FILTER-9 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-10 ?FILTER-9) (EQUALS ?FILTER-11 ?COLUMN-6 ?RESULT-2) (WHERE ?FILTER-12 ?FILTER-11) (FROM ?FILTER-13 ?FILTER-4) (EQUALS ?FILTER-14 ?COLUMN-5 ?RESULT-1) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (DISTINCT ?AGGREGATOR-2 ?COLUMN-3) (SELECT ?RESULT-0 ?AGGREGATOR-2 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-9 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-10) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?COLUMN-1) (SELECT ?RESULT-3 ?COMMA-CLAUSE-1 ?FILTER-8 ?FILTER-7) (COMMA ?COMMA-CLAUSE-2 ?FILTER-0 ?COLUMN-2) (SELECT ?RESULT-4 ?COMMA-CLAUSE-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-10 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-9 RIVER_NAME) (BIND COLUMN ?COLUMN-8 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS2) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-4 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-5 RIVERALIAS1) (BIND CONCEPT ?ALIAS-6 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3778))", "goal-answer":"((3778))"},
{"question":"what is the length of the river that traverses the most states", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME (SELECT RIVER_NAME FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS0) RIVERALIAS1.RIVER_NAME FROM (AS RIVER RIVERALIAS1) GROUP-BY RIVERALIAS1.RIVER_NAME) DERIVED_TABLEALIAS0) WHERE (= DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0 (SELECT (MAX DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS1) FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS1) RIVERALIAS2.RIVER_NAME FROM (AS RIVER RIVERALIAS2) GROUP-BY RIVERALIAS2.RIVER_NAME) DERIVED_TABLEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-5 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-4 ?COLUMN-10) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (AS ?FILTER-0 ?AGGREGATOR-0 ?COLUMN-10) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-5) (GROUP-BY ?FILTER-2 ?COLUMN-2) (FROM ?FILTER-3 ?FILTER-1) (AS ?FILTER-4 ?RESULT-4 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-4) (AS ?FILTER-5 ?AGGREGATOR-0 ?COLUMN-8) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-2) (GROUP-BY ?FILTER-7 ?COLUMN-1) (FROM ?FILTER-8 ?FILTER-6) (AS ?FILTER-9 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-10 ?FILTER-9) (EQUALS ?FILTER-11 ?COLUMN-6 ?RESULT-2) (WHERE ?FILTER-12 ?FILTER-11) (FROM ?FILTER-13 ?FILTER-4) (EQUALS ?FILTER-14 ?COLUMN-5 ?RESULT-1) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (DISTINCT ?AGGREGATOR-2 ?COLUMN-3) (SELECT ?RESULT-0 ?AGGREGATOR-2 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-9 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-10) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?COLUMN-1) (SELECT ?RESULT-3 ?COMMA-CLAUSE-1 ?FILTER-8 ?FILTER-7) (COMMA ?COMMA-CLAUSE-2 ?FILTER-0 ?COLUMN-2) (SELECT ?RESULT-4 ?COMMA-CLAUSE-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-10 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-9 RIVER_NAME) (BIND COLUMN ?COLUMN-8 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS2) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-4 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-5 RIVERALIAS1) (BIND CONCEPT ?ALIAS-6 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3778))", "goal-answer":"((3778))"},
{"question":"what is the length of the river that runs through the most number of states", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME (SELECT RIVER_NAME FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS0) RIVERALIAS1.RIVER_NAME FROM (AS RIVER RIVERALIAS1) GROUP-BY RIVERALIAS1.RIVER_NAME) DERIVED_TABLEALIAS0) WHERE (= DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0 (SELECT (MAX DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS1) FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS1) RIVERALIAS2.RIVER_NAME FROM (AS RIVER RIVERALIAS2) GROUP-BY RIVERALIAS2.RIVER_NAME) DERIVED_TABLEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-5 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-4 ?COLUMN-10) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (AS ?FILTER-0 ?AGGREGATOR-0 ?COLUMN-10) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-5) (GROUP-BY ?FILTER-2 ?COLUMN-2) (FROM ?FILTER-3 ?FILTER-1) (AS ?FILTER-4 ?RESULT-4 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-4) (AS ?FILTER-5 ?AGGREGATOR-0 ?COLUMN-8) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-2) (GROUP-BY ?FILTER-7 ?COLUMN-1) (FROM ?FILTER-8 ?FILTER-6) (AS ?FILTER-9 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-10 ?FILTER-9) (EQUALS ?FILTER-11 ?COLUMN-6 ?RESULT-2) (WHERE ?FILTER-12 ?FILTER-11) (FROM ?FILTER-13 ?FILTER-4) (EQUALS ?FILTER-14 ?COLUMN-5 ?RESULT-1) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (DISTINCT ?AGGREGATOR-2 ?COLUMN-3) (SELECT ?RESULT-0 ?AGGREGATOR-2 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-9 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-10) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?COLUMN-1) (SELECT ?RESULT-3 ?COMMA-CLAUSE-1 ?FILTER-8 ?FILTER-7) (COMMA ?COMMA-CLAUSE-2 ?FILTER-0 ?COLUMN-2) (SELECT ?RESULT-4 ?COMMA-CLAUSE-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-10 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-9 RIVER_NAME) (BIND COLUMN ?COLUMN-8 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS2) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-4 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-5 RIVERALIAS1) (BIND CONCEPT ?ALIAS-6 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((3778))", "goal-answer":"((3778))"},
{"question":"what is the longest river in the largest state", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ) AND RIVERalias0.TRAVERSE IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.AREA = ( SELECT MAX( STATEalias3.AREA ) FROM STATE AS STATEalias3 ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (IN RIVERALIAS1.TRAVERSE (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))) (IN RIVERALIAS0.TRAVERSE (SELECT STATEALIAS2.STATE_NAME FROM (AS STATE STATEALIAS2) WHERE (= STATEALIAS2.AREA (SELECT (MAX STATEALIAS3.AREA) FROM (AS STATE STATEALIAS3)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-13) (DOT ?COLUMN-3 ?ALIAS-4 ?COLUMN-13) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-14) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-14) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-16) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-16) (DOT ?COLUMN-8 ?ALIAS-5 ?COLUMN-15) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-16) (DOT ?COLUMN-10 ?ALIAS-0 ?COLUMN-15) (DOT ?COLUMN-11 ?ALIAS-4 ?COLUMN-16) (MAX ?AGGREGATOR-0 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-5) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-7) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-3) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-11 ?RESULT-5) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-5 ?RESULT-4) (WHERE ?FILTER-8 ?FILTER-7) (FROM ?FILTER-9 ?FILTER-0) (EQUALS ?FILTER-10 ?COLUMN-10 ?RESULT-3) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-2) (MAX ?AGGREGATOR-2 ?COLUMN-6) (AS ?FILTER-12 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-13 ?FILTER-12) (EQUALS ?FILTER-14 ?COLUMN-9 ?RESULT-2) (WHERE ?FILTER-15 ?FILTER-14) (FROM ?FILTER-16 ?FILTER-11) (IN ?FILTER-17 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-18 ?FILTER-10 ?FILTER-17) (WHERE ?FILTER-19 ?FILTER-18) (AS ?FILTER-20 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-21 ?FILTER-19) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-16 ?FILTER-15) (SELECT ?RESULT-2 ?AGGREGATOR-2 ?FILTER-13) (SELECT ?RESULT-3 ?AGGREGATOR-0 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-4 ?COLUMN-3 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-5 ?AGGREGATOR-1 ?FILTER-3) (BIND COLUMN ?COLUMN-16 AREA) (BIND COLUMN ?COLUMN-15 LENGTH) (BIND COLUMN ?COLUMN-14 TRAVERSE) (BIND COLUMN ?COLUMN-13 STATE_NAME) (BIND COLUMN ?COLUMN-12 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS3) (BIND CONCEPT ?ALIAS-2 STATEALIAS2) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND CONCEPT ?ALIAS-4 STATEALIAS0) (BIND CONCEPT ?ALIAS-5 RIVERALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what is the longest river in the states that border nebraska", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'nebraska' ) ) AND RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'nebraska' ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (IN RIVERALIAS1.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME nebraska))))) (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME nebraska)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-12) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-13) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-14) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-14) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-9 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-8 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-7 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-14 STATE_NAME) (BIND COLUMN ?COLUMN-13 LENGTH) (BIND COLUMN ?COLUMN-12 TRAVERSE) (BIND COLUMN ?COLUMN-11 BORDER) (BIND COLUMN ?COLUMN-10 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 nebraska) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 RIVERALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((missouri) (missouri) (missouri) (missouri))", "goal-answer":"((missouri) (missouri) (missouri) (missouri))"},
{"question":"what is the longest river that flows through a state that borders indiana", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'indiana' ) ) AND RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'indiana' ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (IN RIVERALIAS1.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME indiana))))) (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME indiana)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-12) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-13) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-14) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-14) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-9 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-8 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-7 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-14 STATE_NAME) (BIND COLUMN ?COLUMN-13 LENGTH) (BIND COLUMN ?COLUMN-12 TRAVERSE) (BIND COLUMN ?COLUMN-11 BORDER) (BIND COLUMN ?COLUMN-10 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 indiana) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 RIVERALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((mississippi) (mississippi))", "goal-answer":"((mississippi) (mississippi))"},
{"question":"what is the longest river that runs through a state that borders tennessee", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'tennessee' ) ) AND RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'tennessee' ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (IN RIVERALIAS1.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME tennessee))))) (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME tennessee)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-12) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-13) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-14) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-14) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-9 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-8 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-7 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-14 STATE_NAME) (BIND COLUMN ?COLUMN-13 LENGTH) (BIND COLUMN ?COLUMN-12 TRAVERSE) (BIND COLUMN ?COLUMN-11 BORDER) (BIND COLUMN ?COLUMN-10 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 tennessee) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 RIVERALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((missouri) (missouri))", "goal-answer":"((missouri) (missouri))"},
{"question":"what is the longest river in the states that border nebraska", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , RIVER AS RIVERalias0 WHERE BORDER_INFOalias0.BORDER = 'nebraska' AND RIVERalias0.TRAVERSE = BORDER_INFOalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS RIVER RIVERALIAS0) WHERE (AND (= BORDER_INFOALIAS0.BORDER nebraska) (= RIVERALIAS0.TRAVERSE BORDER_INFOALIAS0.STATE_NAME))) (DESC RIVERALIAS0.LENGTH)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-10) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?COMPARATOR-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (DESC ?FILTER-7 ?COLUMN-2) (ORDER-BY ?FILTER-8 ?RESULT-0 ?FILTER-7) (LIMIT ?FILTER-9 ?FILTER-8 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-6 ?FILTER-5) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 nebraska) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((missouri))", "goal-answer":"((missouri))"},
{"question":"what is the longest river that flows through a state that borders indiana", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , RIVER AS RIVERalias0 WHERE BORDER_INFOalias0.BORDER = 'indiana' AND RIVERalias0.TRAVERSE = BORDER_INFOalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS RIVER RIVERALIAS0) WHERE (AND (= BORDER_INFOALIAS0.BORDER indiana) (= RIVERALIAS0.TRAVERSE BORDER_INFOALIAS0.STATE_NAME))) (DESC RIVERALIAS0.LENGTH)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-10) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?COMPARATOR-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (DESC ?FILTER-7 ?COLUMN-2) (ORDER-BY ?FILTER-8 ?RESULT-0 ?FILTER-7) (LIMIT ?FILTER-9 ?FILTER-8 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-6 ?FILTER-5) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 indiana) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"what is the longest river that runs through a state that borders tennessee", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , RIVER AS RIVERalias0 WHERE BORDER_INFOalias0.BORDER = 'tennessee' AND RIVERalias0.TRAVERSE = BORDER_INFOalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS RIVER RIVERALIAS0) WHERE (AND (= BORDER_INFOALIAS0.BORDER tennessee) (= RIVERALIAS0.TRAVERSE BORDER_INFOALIAS0.STATE_NAME))) (DESC RIVERALIAS0.LENGTH)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-10) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?COMPARATOR-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (DESC ?FILTER-7 ?COLUMN-2) (ORDER-BY ?FILTER-8 ?RESULT-0 ?FILTER-7) (LIMIT ?FILTER-9 ?FILTER-8 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-6 ?FILTER-5) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 tennessee) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((missouri))", "goal-answer":"((missouri))"},
{"question":"what is the longest river in the state with the most major cities", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = ( SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( CITYalias0.CITY_NAME ) DESC LIMIT 1 ) ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE (LIMIT (ORDER-BY (SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (> CITYALIAS0.POPULATION 150000) GROUP-BY CITYALIAS0.STATE_NAME) (DESC (COUNT CITYALIAS0.CITY_NAME))) 1))) (DESC RIVERALIAS0.LENGTH)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-0 ?COLUMN-12) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (GREATER-THAN ?FILTER-2 ?COLUMN-6 ?COMPARATOR-1) (GROUP-BY ?FILTER-3 ?COLUMN-2) (WHERE ?FILTER-4 ?FILTER-2) (FROM ?FILTER-5 ?FILTER-1) (COUNT ?AGGREGATOR-0 ?COLUMN-3) (DESC ?FILTER-6 ?AGGREGATOR-0) (ORDER-BY ?FILTER-7 ?RESULT-1 ?FILTER-6) (LIMIT ?FILTER-8 ?FILTER-7 ?COMPARATOR-0) (EQUALS ?FILTER-9 ?COLUMN-5 ?FILTER-8) (WHERE ?FILTER-10 ?FILTER-9) (FROM ?FILTER-11 ?FILTER-0) (DESC ?FILTER-12 ?COLUMN-4) (ORDER-BY ?FILTER-13 ?RESULT-0 ?FILTER-12) (LIMIT ?FILTER-14 ?FILTER-13 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-11 ?FILTER-10) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-12 POPULATION) (BIND COLUMN ?COLUMN-11 TRAVERSE) (BIND COLUMN ?COLUMN-10 LENGTH) (BIND COLUMN ?COLUMN-9 CITY_NAME) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"what is the lowest point in arkansas", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'arkansas' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME arkansas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 arkansas) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((ouachita river))", "goal-answer":"((ouachita river))"},
{"question":"what is the lowest point in massachusetts", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'massachusetts' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME massachusetts))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 massachusetts) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((atlantic ocean))", "goal-answer":"((atlantic ocean))"},
{"question":"what is the lowest point in mississippi", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'mississippi' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((gulf of mexico))", "goal-answer":"((gulf of mexico))"},
{"question":"what is the lowest point in nebraska in meters", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'nebraska' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME nebraska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 nebraska) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((southeast corner))", "goal-answer":"((southeast corner))"},
{"question":"what is the lowest point in the state of california", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((death valley))", "goal-answer":"((death valley))"},
{"question":"where is the lowest point in maryland", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'maryland' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME maryland))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 maryland) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((atlantic ocean))", "goal-answer":"((atlantic ocean))"},
{"question":"what is the lowest point in wisconsin", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'wisconsin' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME wisconsin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 wisconsin) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((lake michigan))", "goal-answer":"((lake michigan))"},
{"question":"what is the lowest point in oregon", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'oregon' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME oregon))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 oregon) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((pacific ocean))", "goal-answer":"((pacific ocean))"},
{"question":"what is the lowest point in louisiana", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'louisiana' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME louisiana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 louisiana) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((new orleans))", "goal-answer":"((new orleans))"},
{"question":"what is the lowest point in california", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'california' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME california))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((death valley))", "goal-answer":"((death valley))"},
{"question":"what is the lowest point in the state of texas", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((gulf of mexico))", "goal-answer":"((gulf of mexico))"},
{"question":"what is the lowest point in texas", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((gulf of mexico))", "goal-answer":"((gulf of mexico))"},
{"question":"what is the lowest point of colorado", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'colorado' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((arkansas river))", "goal-answer":"((arkansas river))"},
{"question":"where is the lowest spot in iowa", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'iowa' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME iowa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((mississippi river))", "goal-answer":"((mississippi river))"},
{"question":"what is the lowest point in usa", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-4 LOWEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((new orleans))", "goal-answer":"((new orleans))"},
{"question":"what is the lowest point in the united states", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-4 LOWEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((new orleans))", "goal-answer":"((new orleans))"},
{"question":"where is the lowest point in the us", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-4 LOWEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((new orleans))", "goal-answer":"((new orleans))"},
{"question":"what is the lowest point of the us", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-4 LOWEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((new orleans))", "goal-answer":"((new orleans))"},
{"question":"what is the lowest point of all states through which the colorado river runs through", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ) ORDER BY HIGHLOWalias0.LOWEST_ELEVATION LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (IN HIGHLOWALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado)))) HIGHLOWALIAS0.LOWEST_ELEVATION) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-10) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (ORDER-BY ?FILTER-8 ?RESULT-0 ?COLUMN-4) (LIMIT ?FILTER-9 ?FILTER-8 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-10 RIVER_NAME) (BIND COLUMN ?COLUMN-9 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((death valley))", "goal-answer":"((death valley))"},
{"question":"which is the lowest point of the states that the mississippi runs through", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ORDER BY HIGHLOWalias0.LOWEST_ELEVATION LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (IN HIGHLOWALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi)))) HIGHLOWALIAS0.LOWEST_ELEVATION) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-10) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (ORDER-BY ?FILTER-8 ?RESULT-0 ?COLUMN-4) (LIMIT ?FILTER-9 ?FILTER-8 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-10 RIVER_NAME) (BIND COLUMN ?COLUMN-9 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 LOWEST_POINT) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((new orleans))", "goal-answer":"((new orleans))"},
{"question":"what is the most dense state in the usa", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((new jersey))", "goal-answer":"((new jersey))"},
{"question":"which state has the highest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((new jersey))", "goal-answer":"((new jersey))"},
{"question":"which state has the greatest density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((new jersey))", "goal-answer":"((new jersey))"},
{"question":"what state has the highest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((new jersey))", "goal-answer":"((new jersey))"},
{"question":"what state has the greatest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((new jersey))", "goal-answer":"((new jersey))"},
{"question":"what state has the largest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((new jersey))", "goal-answer":"((new jersey))"},
{"question":"what is the state with the largest density in usa", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((new jersey))", "goal-answer":"((new jersey))"},
{"question":"what is the state with the largest population density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((new jersey))", "goal-answer":"((new jersey))"},
{"question":"which state has the largest density", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((new jersey))", "goal-answer":"((new jersey))"},
{"question":"what is the most populous state through which the mississippi runs", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))) (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS1.TRAVERSE FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.RIVER_NAME mississippi)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-12) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-12 RIVER_NAME) (BIND COLUMN ?COLUMN-11 POPULATION) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE))", "answer":"((illinois))", "goal-answer":"((illinois))"},
{"question":"what state which the mississippi runs through has the largest population", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))) (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS1.TRAVERSE FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.RIVER_NAME mississippi)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-12) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-12 RIVER_NAME) (BIND COLUMN ?COLUMN-11 POPULATION) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE))", "answer":"((illinois))", "goal-answer":"((illinois))"},
{"question":"what is the most populous state through which the mississippi runs", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi)))) (DESC STATEALIAS0.POPULATION)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-3) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE))", "answer":"((illinois))", "goal-answer":"((illinois))"},
{"question":"what state which the mississippi runs through has the largest population", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi)))) (DESC STATEALIAS0.POPULATION)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-3) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE))", "answer":"((illinois))", "goal-answer":"((illinois))"},
{"question":"what is the population density of the largest state", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 DENSITY) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((0.6798646362098139D0))", "goal-answer":"((0.6798646362098139D0))"},
{"question":"what is the population of the largest city in the state with the largest area", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ) AND CITYalias0.STATE_NAME IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.AREA = ( SELECT MAX( STATEalias3.AREA ) FROM STATE AS STATEalias3 ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (IN CITYALIAS1.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))) (IN CITYALIAS0.STATE_NAME (SELECT STATEALIAS2.STATE_NAME FROM (AS STATE STATEALIAS2) WHERE (= STATEALIAS2.AREA (SELECT (MAX STATEALIAS3.AREA) FROM (AS STATE STATEALIAS3)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-2 ?ALIAS-4 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-5 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-13) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-13) (DOT ?COLUMN-7 ?ALIAS-5 ?COLUMN-12) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-13) (DOT ?COLUMN-9 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-10 ?ALIAS-4 ?COLUMN-13) (MAX ?AGGREGATOR-0 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-5) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-6) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-3) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-10 ?RESULT-5) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-4 ?RESULT-4) (WHERE ?FILTER-8 ?FILTER-7) (FROM ?FILTER-9 ?FILTER-0) (EQUALS ?FILTER-10 ?COLUMN-9 ?RESULT-3) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-2) (MAX ?AGGREGATOR-2 ?COLUMN-5) (AS ?FILTER-12 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-13 ?FILTER-12) (EQUALS ?FILTER-14 ?COLUMN-8 ?RESULT-2) (WHERE ?FILTER-15 ?FILTER-14) (FROM ?FILTER-16 ?FILTER-11) (IN ?FILTER-17 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-18 ?FILTER-10 ?FILTER-17) (WHERE ?FILTER-19 ?FILTER-18) (AS ?FILTER-20 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-0 ?COLUMN-9 ?FILTER-21 ?FILTER-19) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-16 ?FILTER-15) (SELECT ?RESULT-2 ?AGGREGATOR-2 ?FILTER-13) (SELECT ?RESULT-3 ?AGGREGATOR-0 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-4 ?COLUMN-2 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-5 ?AGGREGATOR-1 ?FILTER-3) (BIND COLUMN ?COLUMN-13 AREA) (BIND COLUMN ?COLUMN-12 POPULATION) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS3) (BIND CONCEPT ?ALIAS-2 STATEALIAS2) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND CONCEPT ?ALIAS-4 STATEALIAS0) (BIND CONCEPT ?ALIAS-5 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((174431))", "goal-answer":"((174431))"},
{"question":"what is the population of the smallest state", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((638000))", "goal-answer":"((638000))"},
{"question":"what is the population of the state that borders the most states", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) GROUP-BY BORDER_INFOALIAS0.BORDER HAVING (= (COUNT 1) (SELECT (MAX DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0) FROM (AS (SELECT BORDER_INFOALIAS1.BORDER (AS (COUNT 1) DERIVED_FIELDALIAS0) FROM (AS BORDER_INFO BORDER_INFOALIAS1) GROUP-BY BORDER_INFOALIAS1.BORDER) DERIVED_TABLEALIAS0))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-4 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-4) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (MAX ?AGGREGATOR-1 ?COLUMN-5) (AS ?FILTER-1 ?AGGREGATOR-0 ?COLUMN-9) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-2) (GROUP-BY ?FILTER-3 ?COLUMN-4) (FROM ?FILTER-4 ?FILTER-2) (AS ?FILTER-5 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-6 ?FILTER-5) (EQUALS ?FILTER-7 ?AGGREGATOR-0 ?RESULT-2) (HAVING ?FILTER-8 ?FILTER-7) (GROUP-BY ?FILTER-9 ?COLUMN-3) (FROM ?FILTER-10 ?FILTER-0) (IN ?FILTER-11 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-14 ?FILTER-13) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-14 ?FILTER-12) (SELECT ?RESULT-1 ?COLUMN-3 ?FILTER-10 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-6) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-4 ?FILTER-1) (SELECT ?RESULT-3 ?COMMA-CLAUSE-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-8 BORDER) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS0) (BIND CONCEPT ?ALIAS-4 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((4916000) (4591000))", "goal-answer":"((4916000) (4591000))"},
{"question":"what is the population of the state with the highest population density", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((7365000))", "goal-answer":"((7365000))"},
{"question":"how many people live in the state with the largest population density", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MAX( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.DENSITY (SELECT (MAX STATEALIAS1.DENSITY) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 DENSITY) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((7365000))", "goal-answer":"((7365000))"},
{"question":"what is the smallest city in the usa", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((scotts valley))", "goal-answer":"((scotts valley))"},
{"question":"what is the smallest city in the us", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((scotts valley))", "goal-answer":"((scotts valley))"},
{"question":"what city has the least population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((scotts valley))", "goal-answer":"((scotts valley))"},
{"question":"what is the city with the smallest population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((scotts valley))", "goal-answer":"((scotts valley))"},
{"question":"what is the smallest state that borders the most states", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT DERIVED_TABLEALIAS0.STATE_NAME FROM (AS (SELECT BORDER_INFOALIAS0.STATE_NAME (AS (COUNT (DISTINCT BORDER_INFOALIAS0.BORDER)) DERIVED_FIELDALIAS0) FROM (AS BORDER_INFO BORDER_INFOALIAS0) GROUP-BY BORDER_INFOALIAS0.STATE_NAME) DERIVED_TABLEALIAS0) WHERE (= DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0 (SELECT (MAX DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS1) FROM (AS (SELECT BORDER_INFOALIAS1.STATE_NAME (AS (COUNT (DISTINCT BORDER_INFOALIAS1.BORDER)) DERIVED_FIELDALIAS1) FROM (AS BORDER_INFO BORDER_INFOALIAS1) GROUP-BY BORDER_INFOALIAS1.STATE_NAME) DERIVED_TABLEALIAS1))))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-2 ?ALIAS-4 ?COLUMN-12) (DOT ?COLUMN-3 ?ALIAS-7 ?COLUMN-12) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-12) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-12) (DOT ?COLUMN-6 ?ALIAS-2 ?COLUMN-13) (DOT ?COLUMN-7 ?ALIAS-5 ?COLUMN-13) (DOT ?COLUMN-8 ?ALIAS-1 ?COLUMN-14) (DOT ?COLUMN-9 ?ALIAS-7 ?COLUMN-15) (DOT ?COLUMN-10 ?ALIAS-0 ?COLUMN-15) (DOT ?COLUMN-11 ?ALIAS-4 ?COLUMN-16) (MIN ?AGGREGATOR-0 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-7) (DISTINCT ?AGGREGATOR-1 ?COLUMN-7) (COUNT ?AGGREGATOR-2 ?AGGREGATOR-1) (AS ?FILTER-1 ?AGGREGATOR-2 ?COLUMN-16) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-5) (GROUP-BY ?FILTER-3 ?COLUMN-5) (FROM ?FILTER-4 ?FILTER-2) (AS ?FILTER-5 ?RESULT-5 ?ALIAS-4) (MAX ?AGGREGATOR-3 ?COLUMN-8) (DISTINCT ?AGGREGATOR-4 ?COLUMN-6) (COUNT ?AGGREGATOR-5 ?AGGREGATOR-4) (AS ?FILTER-6 ?AGGREGATOR-5 ?COLUMN-14) (AS ?FILTER-7 ?TABLE-0 ?ALIAS-2) (GROUP-BY ?FILTER-8 ?COLUMN-4) (FROM ?FILTER-9 ?FILTER-7) (AS ?FILTER-10 ?RESULT-4 ?ALIAS-1) (FROM ?FILTER-11 ?FILTER-10) (EQUALS ?FILTER-12 ?COLUMN-11 ?RESULT-3) (WHERE ?FILTER-13 ?FILTER-12) (FROM ?FILTER-14 ?FILTER-5) (IN ?FILTER-15 ?COLUMN-3 ?RESULT-2) (WHERE ?FILTER-16 ?FILTER-15) (FROM ?FILTER-17 ?FILTER-0) (EQUALS ?FILTER-18 ?COLUMN-10 ?RESULT-1) (WHERE ?FILTER-19 ?FILTER-18) (AS ?FILTER-20 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-21 ?FILTER-19) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-2 ?COLUMN-2 ?FILTER-14 ?FILTER-13) (SELECT ?RESULT-3 ?AGGREGATOR-3 ?FILTER-11) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-4 ?FILTER-6) (SELECT ?RESULT-4 ?COMMA-CLAUSE-1 ?FILTER-9 ?FILTER-8) (COMMA ?COMMA-CLAUSE-2 ?COLUMN-5 ?FILTER-1) (SELECT ?RESULT-5 ?COMMA-CLAUSE-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-16 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-15 AREA) (BIND COLUMN ?COLUMN-14 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-13 BORDER) (BIND COLUMN ?COLUMN-12 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-4 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-5 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-6 DERIVED_FIELDALIAS0) (BIND CONCEPT ?ALIAS-7 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((tennessee))", "goal-answer":"((tennessee))"},
{"question":"what is the smallest state bordering wyoming", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'wyoming' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'wyoming' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME wyoming))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME wyoming)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MIN ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 AREA) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 wyoming) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((south dakota))", "goal-answer":"((south dakota))"},
{"question":"what is the smallest state that borders texas", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME texas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MIN ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 AREA) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((louisiana))", "goal-answer":"((louisiana))"},
{"question":"what is the smallest state bordering ohio", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'ohio' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'ohio' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME ohio))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME ohio)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MIN ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 AREA) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((west virginia))", "goal-answer":"((west virginia))"},
{"question":"which state has the smallest area that borders texas", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME texas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MIN ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 AREA) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((louisiana))", "goal-answer":"((louisiana))"},
{"question":"what is the smallest state that the mississippi river runs through", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))) (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS1.TRAVERSE FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.RIVER_NAME mississippi)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-12) (MIN ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-12 RIVER_NAME) (BIND COLUMN ?COLUMN-11 AREA) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE))", "answer":"((tennessee))", "goal-answer":"((tennessee))"},
{"question":"what is the state with the smallest area", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((district of columbia))", "goal-answer":"((district of columbia))"},
{"question":"which is the smallest state", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((district of columbia))", "goal-answer":"((district of columbia))"},
{"question":"which state is the smallest", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((district of columbia))", "goal-answer":"((district of columbia))"},
{"question":"what is the smallest state in the usa", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((district of columbia))", "goal-answer":"((district of columbia))"},
{"question":"what is the smallest state by area", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((district of columbia))", "goal-answer":"((district of columbia))"},
{"question":"what state has the smallest area", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((district of columbia))", "goal-answer":"((district of columbia))"},
{"question":"what is the total length of all rivers in the usa", "sql-query":"SELECT SUM( DERIVED_TABLEalias0.LENGTH ) FROM ( SELECT DISTINCT RIVERalias0.RIVER_NAME , RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 ) AS DERIVED_TABLEalias0 ;", "s-sql-query":"(SELECT (SUM DERIVED_TABLEALIAS0.LENGTH) FROM (AS (SELECT (DISTINCT RIVERALIAS0.RIVER_NAME) RIVERALIAS0.LENGTH FROM (AS RIVER RIVERALIAS0)) DERIVED_TABLEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-4) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?RESULT-1 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SUM ?AGGREGATOR-1 ?COLUMN-3) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-3) (COMMA ?COMMA-CLAUSE-1 ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-1 ?COMMA-CLAUSE-1 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((51393))", "goal-answer":"((51393))"},
{"question":"what river flows through the most states", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY  RIVERalias0.RIVER_NAME ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.RIVER_NAME) (DESC (COUNT (DISTINCT RIVERALIAS0.TRAVERSE)))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (DESC ?FILTER-3 ?AGGREGATOR-1) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"which river goes through the most states", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY  RIVERalias0.RIVER_NAME ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.RIVER_NAME) (DESC (COUNT (DISTINCT RIVERALIAS0.TRAVERSE)))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (DESC ?FILTER-3 ?AGGREGATOR-1) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"which river runs through most states", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY  RIVERalias0.RIVER_NAME ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.RIVER_NAME) (DESC (COUNT (DISTINCT RIVERALIAS0.TRAVERSE)))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (DESC ?FILTER-3 ?AGGREGATOR-1) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"which river traverses most states", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY  RIVERalias0.RIVER_NAME ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.RIVER_NAME) (DESC (COUNT (DISTINCT RIVERALIAS0.TRAVERSE)))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (DESC ?FILTER-3 ?AGGREGATOR-1) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"what river traverses the most states", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY  RIVERalias0.RIVER_NAME ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.RIVER_NAME) (DESC (COUNT (DISTINCT RIVERALIAS0.TRAVERSE)))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (DESC ?FILTER-3 ?AGGREGATOR-1) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"which river runs through the most states", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY  RIVERalias0.RIVER_NAME ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.RIVER_NAME) (DESC (COUNT (DISTINCT RIVERALIAS0.TRAVERSE)))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (DESC ?FILTER-3 ?AGGREGATOR-1) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"what river runs through the most states", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY  RIVERalias0.RIVER_NAME ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.RIVER_NAME) (DESC (COUNT (DISTINCT RIVERALIAS0.TRAVERSE)))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (DESC ?FILTER-3 ?AGGREGATOR-1) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"what river runs through the state with the most cities", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT DERIVED_TABLEALIAS0.STATE_NAME FROM (AS (SELECT CITYALIAS0.STATE_NAME (AS (COUNT 1) DERIVED_FIELDALIAS0) FROM (AS CITY CITYALIAS0) GROUP-BY CITYALIAS0.STATE_NAME) DERIVED_TABLEALIAS0) WHERE (= DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0 (SELECT (MAX DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS1) FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS1) FROM (AS CITY CITYALIAS1) GROUP-BY CITYALIAS1.STATE_NAME) DERIVED_TABLEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-4 ?COLUMN-10) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-4 ?COLUMN-12) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (AS ?FILTER-0 ?AGGREGATOR-0 ?COLUMN-12) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-5) (GROUP-BY ?FILTER-2 ?COLUMN-5) (FROM ?FILTER-3 ?FILTER-1) (AS ?FILTER-4 ?RESULT-4 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-6) (AS ?FILTER-5 ?AGGREGATOR-0 ?COLUMN-11) (AS ?FILTER-6 ?TABLE-1 ?ALIAS-2) (GROUP-BY ?FILTER-7 ?COLUMN-4) (FROM ?FILTER-8 ?FILTER-6) (AS ?FILTER-9 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-10 ?FILTER-9) (EQUALS ?FILTER-11 ?COLUMN-7 ?RESULT-2) (WHERE ?FILTER-12 ?FILTER-11) (FROM ?FILTER-13 ?FILTER-4) (IN ?FILTER-14 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-10) (SELECT ?RESULT-3 ?FILTER-5 ?FILTER-8 ?FILTER-7) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-5 ?FILTER-0) (SELECT ?RESULT-4 ?COMMA-CLAUSE-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-12 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-11 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 TRAVERSE) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-4 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-5 CITYALIAS0) (BIND CONCEPT ?ALIAS-6 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 CITY))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"what rivers are in states that border texas", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((mississippi) (mississippi) (mississippi) (red) (red) (red) (red) (red) (arkansas) (arkansas) (canadian) (canadian) (cimarron) (cimarron) (rio grande) (san juan) (gila) (neosho) (ouachita) (ouachita) (pearl) (pecos) (st. francis) (washita) (white) (white))", "goal-answer":"((mississippi) (mississippi) (mississippi) (red) (red) (red) (red) (red) (arkansas) (arkansas) (canadian) (canadian) (cimarron) (cimarron) (rio grande) (san juan) (gila) (neosho) (ouachita) (ouachita) (pearl) (pecos) (st. francis) (washita) (white) (white))"},
{"question":"which rivers run through states bordering new mexico", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'new mexico' ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME new mexico))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 new mexico) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((colorado) (colorado) (colorado) (red) (red) (arkansas) (arkansas) (canadian) (canadian) (canadian) (cimarron) (green) (green) (green) (north platte) (republican) (rio grande) (rio grande) (san juan) (san juan) (san juan) (gila) (neosho) (pecos) (smoky hill) (south platte) (washita) (washita))", "goal-answer":"((colorado) (colorado) (colorado) (red) (red) (arkansas) (arkansas) (canadian) (canadian) (canadian) (cimarron) (green) (green) (green) (north platte) (republican) (rio grande) (rio grande) (san juan) (san juan) (san juan) (gila) (neosho) (pecos) (smoky hill) (south platte) (washita) (washita))"},
{"question":"what rivers flow through states that alabama borders", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'alabama' ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME alabama))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 alabama) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((mississippi) (mississippi) (chattahoochee) (chattahoochee) (chattahoochee) (tennessee) (tennessee) (cumberland) (tombigbee))", "goal-answer":"((mississippi) (mississippi) (chattahoochee) (chattahoochee) (chattahoochee) (tennessee) (tennessee) (cumberland) (tombigbee))"},
{"question":"what rivers traverses the state which borders the most states", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) GROUP-BY BORDER_INFOALIAS0.BORDER HAVING (= (COUNT 1) (SELECT (MAX DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0) FROM (AS (SELECT BORDER_INFOALIAS1.BORDER (AS (COUNT 1) DERIVED_FIELDALIAS0) FROM (AS BORDER_INFO BORDER_INFOALIAS1) GROUP-BY BORDER_INFOALIAS1.BORDER) DERIVED_TABLEALIAS0))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-4 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-4) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (MAX ?AGGREGATOR-1 ?COLUMN-5) (AS ?FILTER-1 ?AGGREGATOR-0 ?COLUMN-9) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-2) (GROUP-BY ?FILTER-3 ?COLUMN-4) (FROM ?FILTER-4 ?FILTER-2) (AS ?FILTER-5 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-6 ?FILTER-5) (EQUALS ?FILTER-7 ?AGGREGATOR-0 ?RESULT-2) (HAVING ?FILTER-8 ?FILTER-7) (GROUP-BY ?FILTER-9 ?COLUMN-3) (FROM ?FILTER-10 ?FILTER-0) (IN ?FILTER-11 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-14 ?FILTER-13) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-14 ?FILTER-12) (SELECT ?RESULT-1 ?COLUMN-3 ?FILTER-10 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-6) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-4 ?FILTER-1) (SELECT ?RESULT-3 ?COMMA-CLAUSE-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-8 BORDER) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS0) (BIND CONCEPT ?ALIAS-4 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((mississippi) (mississippi) (missouri) (missouri) (tennessee) (tennessee) (cumberland) (st. francis) (white))", "goal-answer":"((mississippi) (mississippi) (missouri) (missouri) (tennessee) (tennessee) (cumberland) (st. francis) (white))"},
{"question":"what river traverses the state which borders the most states", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) GROUP-BY BORDER_INFOALIAS0.BORDER HAVING (= (COUNT 1) (SELECT (MAX DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0) FROM (AS (SELECT BORDER_INFOALIAS1.BORDER (AS (COUNT 1) DERIVED_FIELDALIAS0) FROM (AS BORDER_INFO BORDER_INFOALIAS1) GROUP-BY BORDER_INFOALIAS1.BORDER) DERIVED_TABLEALIAS0))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-4 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-4) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (MAX ?AGGREGATOR-1 ?COLUMN-5) (AS ?FILTER-1 ?AGGREGATOR-0 ?COLUMN-9) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-2) (GROUP-BY ?FILTER-3 ?COLUMN-4) (FROM ?FILTER-4 ?FILTER-2) (AS ?FILTER-5 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-6 ?FILTER-5) (EQUALS ?FILTER-7 ?AGGREGATOR-0 ?RESULT-2) (HAVING ?FILTER-8 ?FILTER-7) (GROUP-BY ?FILTER-9 ?COLUMN-3) (FROM ?FILTER-10 ?FILTER-0) (IN ?FILTER-11 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-14 ?FILTER-13) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-14 ?FILTER-12) (SELECT ?RESULT-1 ?COLUMN-3 ?FILTER-10 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-6) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-4 ?FILTER-1) (SELECT ?RESULT-3 ?COMMA-CLAUSE-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-8 BORDER) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS0) (BIND CONCEPT ?ALIAS-4 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((mississippi) (mississippi) (missouri) (missouri) (tennessee) (tennessee) (cumberland) (st. francis) (white))", "goal-answer":"((mississippi) (mississippi) (missouri) (missouri) (tennessee) (tennessee) (cumberland) (st. francis) (white))"},
{"question":"what state bordering nevada has the largest population", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'nevada' ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME nevada)))) (DESC STATEALIAS0.POPULATION)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-3) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 nevada) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"which of the states bordering pennsylvania has the largest population", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'pennsylvania' ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME pennsylvania)))) (DESC STATEALIAS0.POPULATION)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-3) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 pennsylvania) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what state that borders texas has the highest population", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas)))) (DESC STATEALIAS0.POPULATION)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-3) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((louisiana))", "goal-answer":"((louisiana))"},
{"question":"what is the most populated state bordering oklahoma", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'oklahoma' ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME oklahoma)))) (DESC STATEALIAS0.POPULATION)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (DESC ?FILTER-8 ?COLUMN-3) (ORDER-BY ?FILTER-9 ?RESULT-0 ?FILTER-8) (LIMIT ?FILTER-10 ?FILTER-9 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 oklahoma) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what state bordering nevada has the largest population", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'nevada' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'nevada' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME nevada))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME nevada)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 POPULATION) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 nevada) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"which of the states bordering pennsylvania has the largest population", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'pennsylvania' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'pennsylvania' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME pennsylvania))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME pennsylvania)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 POPULATION) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 pennsylvania) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what state that borders texas has the highest population", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME texas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 POPULATION) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((louisiana))", "goal-answer":"((louisiana))"},
{"question":"what is the most populated state bordering oklahoma", "sql query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'oklahoma' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'oklahoma' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME oklahoma))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME oklahoma)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 POPULATION) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 oklahoma) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what state bordering nevada has the largest population", "sql query":"SELECT DISTINCT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'nevada' AND STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'nevada' AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT (DISTINCT STATEALIAS0.STATE_NAME) FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (AND (= BORDER_INFOALIAS0.STATE_NAME nevada) (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS BORDER_INFO BORDER_INFOALIAS1) (AS STATE STATEALIAS1) WHERE (AND (= BORDER_INFOALIAS1.STATE_NAME nevada) (= STATEALIAS1.STATE_NAME BORDER_INFOALIAS1.BORDER))))) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-11) (EQUALS ?FILTER-0 ?COLUMN-8 ?COMPARATOR-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-3 ?COLUMN-7 ?COMPARATOR-0) (EQUALS ?FILTER-4 ?COLUMN-5 ?COLUMN-6) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (COMMA ?COMMA-CLAUSE-2 ?FILTER-1 ?FILTER-2) (FROM ?FILTER-7 ?COMMA-CLAUSE-2) (EQUALS ?FILTER-8 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-9 ?FILTER-0 ?FILTER-8) (EQUALS ?FILTER-10 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-11 ?FILTER-9 ?FILTER-10) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-14 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-14 ?FILTER-13) (FROM ?FILTER-15 ?COMMA-CLAUSE-1) (DISTINCT ?AGGREGATOR-1 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-15 ?FILTER-12) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 POPULATION) (BIND CONCEPT ?COMPARATOR-0 nevada) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"which of the states bordering pennsylvania has the largest population", "sql query":"SELECT DISTINCT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'pennsylvania' AND STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'pennsylvania' AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT (DISTINCT STATEALIAS0.STATE_NAME) FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (AND (= BORDER_INFOALIAS0.STATE_NAME pennsylvania) (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS BORDER_INFO BORDER_INFOALIAS1) (AS STATE STATEALIAS1) WHERE (AND (= BORDER_INFOALIAS1.STATE_NAME pennsylvania) (= STATEALIAS1.STATE_NAME BORDER_INFOALIAS1.BORDER))))) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-11) (EQUALS ?FILTER-0 ?COLUMN-8 ?COMPARATOR-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-3 ?COLUMN-7 ?COMPARATOR-0) (EQUALS ?FILTER-4 ?COLUMN-5 ?COLUMN-6) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (COMMA ?COMMA-CLAUSE-2 ?FILTER-1 ?FILTER-2) (FROM ?FILTER-7 ?COMMA-CLAUSE-2) (EQUALS ?FILTER-8 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-9 ?FILTER-0 ?FILTER-8) (EQUALS ?FILTER-10 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-11 ?FILTER-9 ?FILTER-10) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-14 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-14 ?FILTER-13) (FROM ?FILTER-15 ?COMMA-CLAUSE-1) (DISTINCT ?AGGREGATOR-1 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-15 ?FILTER-12) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 POPULATION) (BIND CONCEPT ?COMPARATOR-0 pennsylvania) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((new york))", "goal-answer":"((new york))"},
{"question":"what state that borders texas has the highest population", "sql query":"SELECT DISTINCT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' AND STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT (DISTINCT STATEALIAS0.STATE_NAME) FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (AND (= BORDER_INFOALIAS0.STATE_NAME texas) (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS BORDER_INFO BORDER_INFOALIAS1) (AS STATE STATEALIAS1) WHERE (AND (= BORDER_INFOALIAS1.STATE_NAME texas) (= STATEALIAS1.STATE_NAME BORDER_INFOALIAS1.BORDER))))) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-11) (EQUALS ?FILTER-0 ?COLUMN-8 ?COMPARATOR-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-3 ?COLUMN-7 ?COMPARATOR-0) (EQUALS ?FILTER-4 ?COLUMN-5 ?COLUMN-6) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (COMMA ?COMMA-CLAUSE-2 ?FILTER-1 ?FILTER-2) (FROM ?FILTER-7 ?COMMA-CLAUSE-2) (EQUALS ?FILTER-8 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-9 ?FILTER-0 ?FILTER-8) (EQUALS ?FILTER-10 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-11 ?FILTER-9 ?FILTER-10) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-14 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-14 ?FILTER-13) (FROM ?FILTER-15 ?COMMA-CLAUSE-1) (DISTINCT ?AGGREGATOR-1 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-15 ?FILTER-12) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((louisiana))", "goal-answer":"((louisiana))"},
{"question":"what is the most populated state bordering oklahoma", "sql query":"SELECT DISTINCT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'oklahoma' AND STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'oklahoma' AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT (DISTINCT STATEALIAS0.STATE_NAME) FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (AND (= BORDER_INFOALIAS0.STATE_NAME oklahoma) (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS BORDER_INFO BORDER_INFOALIAS1) (AS STATE STATEALIAS1) WHERE (AND (= BORDER_INFOALIAS1.STATE_NAME oklahoma) (= STATEALIAS1.STATE_NAME BORDER_INFOALIAS1.BORDER))))) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-11) (EQUALS ?FILTER-0 ?COLUMN-8 ?COMPARATOR-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-3 ?COLUMN-7 ?COMPARATOR-0) (EQUALS ?FILTER-4 ?COLUMN-5 ?COLUMN-6) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (COMMA ?COMMA-CLAUSE-2 ?FILTER-1 ?FILTER-2) (FROM ?FILTER-7 ?COMMA-CLAUSE-2) (EQUALS ?FILTER-8 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-9 ?FILTER-0 ?FILTER-8) (EQUALS ?FILTER-10 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-11 ?FILTER-9 ?FILTER-10) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-14 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-14 ?FILTER-13) (FROM ?FILTER-15 ?COMMA-CLAUSE-1) (DISTINCT ?AGGREGATOR-1 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-15 ?FILTER-12) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 BORDER) (BIND COLUMN ?COLUMN-9 POPULATION) (BIND CONCEPT ?COMPARATOR-0 oklahoma) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what state contains the highest point of those the colorado river traverses", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ) ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1) WHERE (IN HIGHLOWALIAS1.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-10) (MAX ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-3 ?RESULT-2) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-5 ?RESULT-1) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-11 ?FILTER-10) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-11 ?FILTER-9) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-2 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-10 RIVER_NAME) (BIND COLUMN ?COLUMN-9 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND CONCEPT ?ALIAS-2 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"what state has the largest capital", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COLUMN-5) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 CITY_NAME) (BIND COLUMN ?COLUMN-8 CAPITAL) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((arizona))", "goal-answer":"((arizona))"},
{"question":"which state 's capital city is the largest", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COLUMN-5) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 CITY_NAME) (BIND COLUMN ?COLUMN-8 CAPITAL) (BIND COLUMN ?COLUMN-7 POPULATION) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((arizona))", "goal-answer":"((arizona))"},
{"question":"what state has the longest river", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( DISTINCT RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX (DISTINCT RIVERALIAS1.LENGTH)) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (MAX ?AGGREGATOR-1 ?AGGREGATOR-0) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-1 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))", "goal-answer":"((montana) (north dakota) (south dakota) (iowa) (nebraska) (missouri) (missouri))"},
{"question":"what state has the most major cities", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (> CITYALIAS0.POPULATION 150000) GROUP-BY CITYALIAS0.STATE_NAME) (DESC (COUNT 1))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GREATER-THAN ?FILTER-1 ?COLUMN-2 ?COMPARATOR-1) (GROUP-BY ?FILTER-2 ?COLUMN-1) (WHERE ?FILTER-3 ?FILTER-1) (FROM ?FILTER-4 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (DESC ?FILTER-5 ?AGGREGATOR-0) (ORDER-BY ?FILTER-6 ?RESULT-0 ?FILTER-5) (LIMIT ?FILTER-7 ?FILTER-6 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-4 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"which state has the most major cities", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (> CITYALIAS0.POPULATION 150000) GROUP-BY CITYALIAS0.STATE_NAME) (DESC (COUNT 1))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GREATER-THAN ?FILTER-1 ?COLUMN-2 ?COMPARATOR-1) (GROUP-BY ?FILTER-2 ?COLUMN-1) (WHERE ?FILTER-3 ?FILTER-1) (FROM ?FILTER-4 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (DESC ?FILTER-5 ?AGGREGATOR-0) (ORDER-BY ?FILTER-6 ?RESULT-0 ?FILTER-5) (LIMIT ?FILTER-7 ?FILTER-6 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-4 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"what state has the smallest urban population", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ORDER BY SUM( CITYalias0.POPULATION ) LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) GROUP-BY CITYALIAS0.STATE_NAME) (SUM CITYALIAS0.POPULATION)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (SUM ?AGGREGATOR-0 ?COLUMN-2) (ORDER-BY ?FILTER-3 ?RESULT-0 ?AGGREGATOR-0) (LIMIT ?FILTER-4 ?FILTER-3 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((wyoming))", "goal-answer":"((wyoming))"},
{"question":"what states border states that border mississippi", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((tennessee) (georgia) (florida) (mississippi) (missouri) (tennessee) (mississippi) (louisiana) (texas) (oklahoma) (arkansas) (mississippi) (texas) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri))", "goal-answer":"((tennessee) (georgia) (florida) (mississippi) (missouri) (tennessee) (mississippi) (louisiana) (texas) (oklahoma) (arkansas) (mississippi) (texas) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri))"},
{"question":"what states border states that border colorado", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'colorado' ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME colorado))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((utah) (colorado) (new mexico) (california) (nevada) (nebraska) (missouri) (oklahoma) (colorado) (south dakota) (iowa) (missouri) (kansas) (colorado) (wyoming) (colorado) (oklahoma) (texas) (arizona) (utah) (kansas) (missouri) (arkansas) (texas) (new mexico) (colorado) (wyoming) (colorado) (new mexico) (arizona) (nevada) (idaho) (montana) (south dakota) (nebraska) (colorado) (utah) (idaho))", "goal-answer":"((utah) (colorado) (new mexico) (california) (nevada) (nebraska) (missouri) (oklahoma) (colorado) (south dakota) (iowa) (missouri) (kansas) (colorado) (wyoming) (colorado) (oklahoma) (texas) (arizona) (utah) (kansas) (missouri) (arkansas) (texas) (new mexico) (colorado) (wyoming) (colorado) (new mexico) (arizona) (nevada) (idaho) (montana) (south dakota) (nebraska) (colorado) (utah) (idaho))"},
{"question":"what states border states that the ohio runs through", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'ohio' ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME ohio))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((wisconsin) (indiana) (kentucky) (missouri) (iowa) (michigan) (ohio) (kentucky) (illinois) (indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois) (michigan) (pennsylvania) (west virginia) (kentucky) (indiana) (new york) (new jersey) (delaware) (maryland) (west virginia) (ohio) (pennsylvania) (maryland) (virginia) (kentucky) (ohio))", "goal-answer":"((wisconsin) (indiana) (kentucky) (missouri) (iowa) (michigan) (ohio) (kentucky) (illinois) (indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois) (michigan) (pennsylvania) (west virginia) (kentucky) (indiana) (new york) (new jersey) (delaware) (maryland) (west virginia) (ohio) (pennsylvania) (maryland) (virginia) (kentucky) (ohio))"},
{"question":"what states border states that the mississippi runs through", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((missouri) (tennessee) (mississippi) (louisiana) (texas) (oklahoma) (wisconsin) (indiana) (kentucky) (missouri) (iowa) (minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota) (indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois) (arkansas) (mississippi) (texas) (wisconsin) (iowa) (south dakota) (north dakota) (tennessee) (alabama) (louisiana) (arkansas) (iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri) (michigan) (illinois) (iowa) (minnesota))", "goal-answer":"((missouri) (tennessee) (mississippi) (louisiana) (texas) (oklahoma) (wisconsin) (indiana) (kentucky) (missouri) (iowa) (minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota) (indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois) (arkansas) (mississippi) (texas) (wisconsin) (iowa) (south dakota) (north dakota) (tennessee) (alabama) (louisiana) (arkansas) (iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri) (michigan) (illinois) (iowa) (minnesota))"},
{"question":"which states border states through which the mississippi traverses", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((missouri) (tennessee) (mississippi) (louisiana) (texas) (oklahoma) (wisconsin) (indiana) (kentucky) (missouri) (iowa) (minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota) (indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois) (arkansas) (mississippi) (texas) (wisconsin) (iowa) (south dakota) (north dakota) (tennessee) (alabama) (louisiana) (arkansas) (iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri) (michigan) (illinois) (iowa) (minnesota))", "goal-answer":"((missouri) (tennessee) (mississippi) (louisiana) (texas) (oklahoma) (wisconsin) (indiana) (kentucky) (missouri) (iowa) (minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota) (indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois) (arkansas) (mississippi) (texas) (wisconsin) (iowa) (south dakota) (north dakota) (tennessee) (alabama) (louisiana) (arkansas) (iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri) (michigan) (illinois) (iowa) (minnesota))"},
{"question":"what states border states which the mississippi runs through", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((missouri) (tennessee) (mississippi) (louisiana) (texas) (oklahoma) (wisconsin) (indiana) (kentucky) (missouri) (iowa) (minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota) (indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois) (arkansas) (mississippi) (texas) (wisconsin) (iowa) (south dakota) (north dakota) (tennessee) (alabama) (louisiana) (arkansas) (iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri) (michigan) (illinois) (iowa) (minnesota))", "goal-answer":"((missouri) (tennessee) (mississippi) (louisiana) (texas) (oklahoma) (wisconsin) (indiana) (kentucky) (missouri) (iowa) (minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota) (indiana) (ohio) (west virginia) (virginia) (tennessee) (missouri) (illinois) (arkansas) (mississippi) (texas) (wisconsin) (iowa) (south dakota) (north dakota) (tennessee) (alabama) (louisiana) (arkansas) (iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri) (michigan) (illinois) (iowa) (minnesota))"},
{"question":"what states border texas and have a major river", "sql-query":"SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER = 'texas' AND BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (AND (= BORDER_INFOALIAS0.BORDER texas) (IN BORDER_INFOALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (> RIVERALIAS0.LENGTH 750)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-0) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (GREATER-THAN ?FILTER-2 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (AND ?FILTER-6 ?FILTER-0 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 LENGTH) (BIND COLUMN ?COLUMN-7 BORDER) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((arkansas) (new mexico) (louisiana) (oklahoma))", "goal-answer":"((arkansas) (new mexico) (louisiana) (oklahoma))"},
{"question":"what states border the most populous state", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (EQUALS ?FILTER-6 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-8 POPULATION) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((oregon) (nevada) (arizona))", "goal-answer":"((oregon) (nevada) (arizona))"},
{"question":"what are the states that border the state with the greatest population", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (EQUALS ?FILTER-6 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-8 POPULATION) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((oregon) (nevada) (arizona))", "goal-answer":"((oregon) (nevada) (arizona))"},
{"question":"what states border the most populous state", "sql-query":"SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?RESULT-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-7 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-7 ?FILTER-6) (FROM ?FILTER-8 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-5) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-8 POPULATION) (BIND COLUMN ?COLUMN-7 BORDER) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((arizona) (nevada) (oregon))", "goal-answer":"((arizona) (nevada) (oregon))"},
{"question":"what are the states that border the state with the greatest population", "sql-query":"SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?RESULT-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-7 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-7 ?FILTER-6) (FROM ?FILTER-8 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-5) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-8 POPULATION) (BIND COLUMN ?COLUMN-7 BORDER) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((arizona) (nevada) (oregon))", "goal-answer":"((arizona) (nevada) (oregon))"},
{"question":"what states border the state that borders the most states", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias2.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias2 GROUP BY BORDER_INFOalias2.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) GROUP-BY BORDER_INFOALIAS1.BORDER HAVING (= (COUNT 1) (SELECT (MAX DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0) FROM (AS (SELECT BORDER_INFOALIAS2.BORDER (AS (COUNT 1) DERIVED_FIELDALIAS0) FROM (AS BORDER_INFO BORDER_INFOALIAS2) GROUP-BY BORDER_INFOALIAS2.BORDER) DERIVED_TABLEALIAS0))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-4 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-4) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (MAX ?AGGREGATOR-1 ?COLUMN-5) (AS ?FILTER-1 ?AGGREGATOR-0 ?COLUMN-8) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-2) (GROUP-BY ?FILTER-3 ?COLUMN-4) (FROM ?FILTER-4 ?FILTER-2) (AS ?FILTER-5 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-6 ?FILTER-5) (EQUALS ?FILTER-7 ?AGGREGATOR-0 ?RESULT-2) (HAVING ?FILTER-8 ?FILTER-7) (GROUP-BY ?FILTER-9 ?COLUMN-3) (FROM ?FILTER-10 ?FILTER-0) (IN ?FILTER-11 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-14 ?FILTER-13) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-14 ?FILTER-12) (SELECT ?RESULT-1 ?COLUMN-3 ?FILTER-10 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-6) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-4 ?FILTER-1) (SELECT ?RESULT-3 ?COMMA-CLAUSE-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-7 BORDER) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS2) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS0) (BIND CONCEPT ?ALIAS-4 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri))", "goal-answer":"((iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri))"},
{"question":"what states border the state with the most cities", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT DERIVED_TABLEALIAS0.STATE_NAME FROM (AS (SELECT CITYALIAS0.STATE_NAME (AS (COUNT 1) DERIVED_FIELDALIAS0) FROM (AS CITY CITYALIAS0) GROUP-BY CITYALIAS0.STATE_NAME) DERIVED_TABLEALIAS0) WHERE (= DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0 (SELECT (MAX DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS1) FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS1) FROM (AS CITY CITYALIAS1) GROUP-BY CITYALIAS1.STATE_NAME) DERIVED_TABLEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-4 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-4 ?COLUMN-11) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (AS ?FILTER-0 ?AGGREGATOR-0 ?COLUMN-11) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-5) (GROUP-BY ?FILTER-2 ?COLUMN-5) (FROM ?FILTER-3 ?FILTER-1) (AS ?FILTER-4 ?RESULT-4 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-6) (AS ?FILTER-5 ?AGGREGATOR-0 ?COLUMN-10) (AS ?FILTER-6 ?TABLE-1 ?ALIAS-2) (GROUP-BY ?FILTER-7 ?COLUMN-4) (FROM ?FILTER-8 ?FILTER-6) (AS ?FILTER-9 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-10 ?FILTER-9) (EQUALS ?FILTER-11 ?COLUMN-7 ?RESULT-2) (WHERE ?FILTER-12 ?FILTER-11) (FROM ?FILTER-13 ?FILTER-4) (IN ?FILTER-14 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-10) (SELECT ?RESULT-3 ?FILTER-5 ?FILTER-8 ?FILTER-7) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-5 ?FILTER-0) (SELECT ?RESULT-4 ?COMMA-CLAUSE-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-11 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-10 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-4 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-5 CITYALIAS0) (BIND CONCEPT ?ALIAS-6 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 CITY))", "answer":"((oregon) (nevada) (arizona))", "goal-answer":"((oregon) (nevada) (arizona))"},
{"question":"what states border the states with the most cities", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT DERIVED_TABLEALIAS0.STATE_NAME FROM (AS (SELECT CITYALIAS0.STATE_NAME (AS (COUNT 1) DERIVED_FIELDALIAS0) FROM (AS CITY CITYALIAS0) GROUP-BY CITYALIAS0.STATE_NAME) DERIVED_TABLEALIAS0) WHERE (= DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0 (SELECT (MAX DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS1) FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS1) FROM (AS CITY CITYALIAS1) GROUP-BY CITYALIAS1.STATE_NAME) DERIVED_TABLEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-4 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-4 ?COLUMN-11) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (AS ?FILTER-0 ?AGGREGATOR-0 ?COLUMN-11) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-5) (GROUP-BY ?FILTER-2 ?COLUMN-5) (FROM ?FILTER-3 ?FILTER-1) (AS ?FILTER-4 ?RESULT-4 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-6) (AS ?FILTER-5 ?AGGREGATOR-0 ?COLUMN-10) (AS ?FILTER-6 ?TABLE-1 ?ALIAS-2) (GROUP-BY ?FILTER-7 ?COLUMN-4) (FROM ?FILTER-8 ?FILTER-6) (AS ?FILTER-9 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-10 ?FILTER-9) (EQUALS ?FILTER-11 ?COLUMN-7 ?RESULT-2) (WHERE ?FILTER-12 ?FILTER-11) (FROM ?FILTER-13 ?FILTER-4) (IN ?FILTER-14 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-10) (SELECT ?RESULT-3 ?FILTER-5 ?FILTER-8 ?FILTER-7) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-5 ?FILTER-0) (SELECT ?RESULT-4 ?COMMA-CLAUSE-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-11 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-10 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-4 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-5 CITYALIAS0) (BIND CONCEPT ?ALIAS-6 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 CITY))", "answer":"((oregon) (nevada) (arizona))", "goal-answer":"((oregon) (nevada) (arizona))"},
{"question":"what states border the state with the most major cities", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 WHERE CITYalias1.POPULATION > 150000 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT DERIVED_TABLEALIAS0.STATE_NAME FROM (AS (SELECT CITYALIAS0.STATE_NAME (AS (COUNT 1) DERIVED_FIELDALIAS0) FROM (AS CITY CITYALIAS0) WHERE (> CITYALIAS0.POPULATION 150000) GROUP-BY CITYALIAS0.STATE_NAME) DERIVED_TABLEALIAS0) WHERE (= DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0 (SELECT (MAX DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS1) FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS1) FROM (AS CITY CITYALIAS1) WHERE (> CITYALIAS1.POPULATION 150000) GROUP-BY CITYALIAS1.STATE_NAME) DERIVED_TABLEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-2 ?ALIAS-4 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-4 ?COLUMN-13) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-14) (DOT ?COLUMN-9 ?ALIAS-5 ?COLUMN-14) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (AS ?FILTER-0 ?AGGREGATOR-0 ?COLUMN-13) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-5) (GREATER-THAN ?FILTER-2 ?COLUMN-9 ?COMPARATOR-1) (GROUP-BY ?FILTER-3 ?COLUMN-5) (WHERE ?FILTER-4 ?FILTER-2) (FROM ?FILTER-5 ?FILTER-1) (AS ?FILTER-6 ?RESULT-4 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-6) (AS ?FILTER-7 ?AGGREGATOR-0 ?COLUMN-12) (AS ?FILTER-8 ?TABLE-1 ?ALIAS-2) (GREATER-THAN ?FILTER-9 ?COLUMN-8 ?COMPARATOR-1) (GROUP-BY ?FILTER-10 ?COLUMN-4) (WHERE ?FILTER-11 ?FILTER-9) (FROM ?FILTER-12 ?FILTER-8) (AS ?FILTER-13 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-14 ?FILTER-13) (EQUALS ?FILTER-15 ?COLUMN-7 ?RESULT-2) (WHERE ?FILTER-16 ?FILTER-15) (FROM ?FILTER-17 ?FILTER-6) (IN ?FILTER-18 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-19 ?FILTER-18) (AS ?FILTER-20 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-21 ?FILTER-19) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-14) (SELECT ?RESULT-3 ?FILTER-7 ?FILTER-12 ?FILTER-11 ?FILTER-10) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-5 ?FILTER-0) (SELECT ?RESULT-4 ?COMMA-CLAUSE-1 ?FILTER-5 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-14 POPULATION) (BIND COLUMN ?COLUMN-13 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-12 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 BORDER) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-4 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-5 CITYALIAS0) (BIND CONCEPT ?ALIAS-6 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 CITY))", "answer":"((oregon) (nevada) (arizona))", "goal-answer":"((oregon) (nevada) (arizona))"},
{"question":"what states border the state with the smallest area", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MIN ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (EQUALS ?FILTER-6 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-8 AREA) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((maryland) (virginia))", "goal-answer":"((maryland) (virginia))"},
{"question":"which states border the state with the smallest area", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MIN ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (EQUALS ?FILTER-6 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-8 AREA) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((maryland) (virginia))", "goal-answer":"((maryland) (virginia))"},
{"question":"what states contain at least one major rivers", "sql-query":"SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.TRAVERSE) FROM (AS RIVER RIVERALIAS0) WHERE (> RIVERALIAS0.LENGTH 750))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 LENGTH) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((kentucky) (utah) (nebraska) (texas) (indiana) (nevada) (iowa) (south dakota) (arkansas) (new mexico) (ohio) (montana) (california) (michigan) (kansas) (west virginia) (louisiana) (oklahoma) (mississippi) (missouri) (colorado) (north dakota) (wyoming) (washington) (oregon) (wisconsin) (pennsylvania) (minnesota) (illinois) (alabama) (arizona) (tennessee) (idaho))", "goal-answer":"((kentucky) (utah) (nebraska) (texas) (indiana) (nevada) (iowa) (south dakota) (arkansas) (new mexico) (ohio) (montana) (california) (michigan) (kansas) (west virginia) (louisiana) (oklahoma) (mississippi) (missouri) (colorado) (north dakota) (wyoming) (washington) (oregon) (wisconsin) (pennsylvania) (minnesota) (illinois) (alabama) (arizona) (tennessee) (idaho))"},
{"question":"where are mountains", "sql-query":"SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.STATE_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (california) (california) (california) (california) (california) (california) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (washington))", "goal-answer":"((alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (alaska) (california) (california) (california) (california) (california) (california) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (washington))"},
{"question":"where is the highest mountain of the united states", "sql-query":"SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_ALTITUDE = ( SELECT MAX( MOUNTAINalias1.MOUNTAIN_ALTITUDE ) FROM MOUNTAIN AS MOUNTAINalias1 ) ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.STATE_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_ALTITUDE (SELECT (MAX MOUNTAINALIAS1.MOUNTAIN_ALTITUDE) FROM (AS MOUNTAIN MOUNTAINALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 MOUNTAIN_ALTITUDE) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND CONCEPT ?ALIAS-1 MOUNTAINALIAS1) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"which state has the highest peak in the country", "sql-query":"SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_ALTITUDE = ( SELECT MAX( MOUNTAINalias1.MOUNTAIN_ALTITUDE ) FROM MOUNTAIN AS MOUNTAINalias1 ) ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.STATE_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_ALTITUDE (SELECT (MAX MOUNTAINALIAS1.MOUNTAIN_ALTITUDE) FROM (AS MOUNTAIN MOUNTAINALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 MOUNTAIN_ALTITUDE) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND CONCEPT ?ALIAS-1 MOUNTAINALIAS1) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"where is the smallest city", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"which is the density of the state that the largest river in the united states runs through", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-9 LENGTH) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 DENSITY) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((51.740674955595026D0) (70.53084648493544D0) (5.351700680272109D0) (20.297542043984475D0) (9.231966053748233D0) (8.957505576015354D0))", "goal-answer":"((51.740674955595026D0) (70.53084648493544D0) (5.351700680272109D0) (20.297542043984475D0) (9.231966053748233D0) (8.957505576015354D0))"},
{"question":"which is the highest peak not in alaska", "sql-query":"SELECT MOUNTAINalias0.MOUNTAIN_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_ALTITUDE = ( SELECT MAX( MOUNTAINalias1.MOUNTAIN_ALTITUDE ) FROM MOUNTAIN AS MOUNTAINalias1 WHERE MOUNTAINalias1.STATE_NAME <> 'alaska' ) ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.MOUNTAIN_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_ALTITUDE (SELECT (MAX MOUNTAINALIAS1.MOUNTAIN_ALTITUDE) FROM (AS MOUNTAIN MOUNTAINALIAS1) WHERE (<> MOUNTAINALIAS1.STATE_NAME alaska))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (DIFFERENT ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 MOUNTAIN_ALTITUDE) (BIND COLUMN ?COLUMN-5 MOUNTAIN_NAME) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND CONCEPT ?ALIAS-1 MOUNTAINALIAS1) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((whitney))", "goal-answer":"((whitney))"},
{"question":"which rivers do not run through texas", "sql-query":"SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME NOT IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'texas' ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (NOT (IN RIVERALIAS0.RIVER_NAME (SELECT RIVERALIAS1.RIVER_NAME FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE texas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-3 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-2 ?RESULT-1) (NOT ?FILTER-5 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((south platte) (roanoke) (tennessee) (neosho) (north platte) (chattahoochee) (ouachita) (little missouri) (dakota) (tombigbee) (cumberland) (arkansas) (wateree catawba) (bighorn) (ohio) (smoky hill) (rock) (white) (connecticut) (mississippi) (missouri) (delaware) (niobrara) (yellowstone) (clark fork) (allegheny) (san juan) (colorado) (gila) (wabash) (st. francis) (powder) (green) (hudson) (cheyenne) (pearl) (potomac) (cimarron) (snake) (columbia) (republican))", "goal-answer":"((south platte) (roanoke) (tennessee) (neosho) (north platte) (chattahoochee) (ouachita) (little missouri) (dakota) (tombigbee) (cumberland) (arkansas) (wateree catawba) (bighorn) (ohio) (smoky hill) (rock) (white) (connecticut) (mississippi) (missouri) (delaware) (niobrara) (yellowstone) (clark fork) (allegheny) (san juan) (colorado) (gila) (wabash) (st. francis) (powder) (green) (hudson) (cheyenne) (pearl) (potomac) (cimarron) (snake) (columbia) (republican))"},
{"question":"what rivers do not run through tennessee", "sql-query":"SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME NOT IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'tennessee' ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (NOT (IN RIVERALIAS0.RIVER_NAME (SELECT RIVERALIAS1.RIVER_NAME FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE tennessee)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-3 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-2 ?RESULT-1) (NOT ?FILTER-5 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (DISTINCT ?AGGREGATOR-0 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 tennessee) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((snake) (washita) (columbia) (republican) (south platte) (roanoke) (pecos) (neosho) (north platte) (chattahoochee) (canadian) (ouachita) (little missouri) (dakota) (tombigbee) (arkansas) (wateree catawba) (bighorn) (ohio) (smoky hill) (rock) (white) (connecticut) (missouri) (delaware) (niobrara) (yellowstone) (clark fork) (allegheny) (san juan) (colorado) (gila) (wabash) (st. francis) (powder) (green) (hudson) (cheyenne) (pearl) (potomac) (cimarron) (red) (rio grande))", "goal-answer":"((snake) (washita) (columbia) (republican) (south platte) (roanoke) (pecos) (neosho) (north platte) (chattahoochee) (canadian) (ouachita) (little missouri) (dakota) (tombigbee) (arkansas) (wateree catawba) (bighorn) (ohio) (smoky hill) (rock) (white) (connecticut) (missouri) (delaware) (niobrara) (yellowstone) (clark fork) (allegheny) (san juan) (colorado) (gila) (wabash) (st. francis) (powder) (green) (hudson) (cheyenne) (pearl) (potomac) (cimarron) (red) (rio grande))"},
{"question":"which rivers do not run through usa", "sql-query":"SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.COUNTRY_NAME <> 'usa' ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (<> RIVERALIAS0.COUNTRY_NAME usa))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (DIFFERENT ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 COUNTRY_NAME) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 usa) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"which rivers run through states that border the state with the capital austin", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'austin' ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL austin))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (AS ?FILTER-0 ?TABLE-2 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (IN ?FILTER-8 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-11 ?FILTER-10) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-11 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-2 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 CAPITAL) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 TRAVERSE) (BIND COLUMN ?COLUMN-8 BORDER) (BIND COLUMN ?COLUMN-7 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE) (BIND TABLE ?TABLE-2 BORDER_INFO))", "answer":"((mississippi) (mississippi) (mississippi) (red) (red) (red) (red) (red) (arkansas) (arkansas) (canadian) (canadian) (cimarron) (cimarron) (rio grande) (san juan) (gila) (neosho) (ouachita) (ouachita) (pearl) (pecos) (st. francis) (washita) (white) (white))", "goal-answer":"((mississippi) (mississippi) (mississippi) (red) (red) (red) (red) (red) (arkansas) (arkansas) (canadian) (canadian) (cimarron) (cimarron) (rio grande) (san juan) (gila) (neosho) (ouachita) (ouachita) (pearl) (pecos) (st. francis) (washita) (white) (white))"},
{"question":"what rivers run through the states that border the state with the capital atlanta", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'atlanta' ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL atlanta))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (AS ?FILTER-0 ?TABLE-2 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (IN ?FILTER-8 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-11 ?FILTER-10) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-11 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-2 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 CAPITAL) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 TRAVERSE) (BIND COLUMN ?COLUMN-8 BORDER) (BIND COLUMN ?COLUMN-7 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 atlanta) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE) (BIND TABLE ?TABLE-2 BORDER_INFO))", "answer":"((mississippi) (chattahoochee) (tennessee) (tennessee) (tennessee) (cumberland) (roanoke) (tombigbee) (wateree catawba) (wateree catawba))", "goal-answer":"((mississippi) (chattahoochee) (tennessee) (tennessee) (tennessee) (cumberland) (roanoke) (tombigbee) (wateree catawba) (wateree catawba))"},
{"question":"which rivers run through states with fewest cities", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MIN( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT DERIVED_TABLEALIAS0.STATE_NAME FROM (AS (SELECT CITYALIAS0.STATE_NAME (AS (COUNT 1) DERIVED_FIELDALIAS0) FROM (AS CITY CITYALIAS0) GROUP-BY CITYALIAS0.STATE_NAME) DERIVED_TABLEALIAS0) WHERE (= DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0 (SELECT (MIN DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS1) FROM (AS (SELECT (AS (COUNT 1) DERIVED_FIELDALIAS1) FROM (AS CITY CITYALIAS1) GROUP-BY CITYALIAS1.STATE_NAME) DERIVED_TABLEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-4 ?COLUMN-10) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-4 ?COLUMN-12) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (AS ?FILTER-0 ?AGGREGATOR-0 ?COLUMN-12) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-5) (GROUP-BY ?FILTER-2 ?COLUMN-5) (FROM ?FILTER-3 ?FILTER-1) (AS ?FILTER-4 ?RESULT-4 ?ALIAS-4) (MIN ?AGGREGATOR-1 ?COLUMN-6) (AS ?FILTER-5 ?AGGREGATOR-0 ?COLUMN-11) (AS ?FILTER-6 ?TABLE-1 ?ALIAS-2) (GROUP-BY ?FILTER-7 ?COLUMN-4) (FROM ?FILTER-8 ?FILTER-6) (AS ?FILTER-9 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-10 ?FILTER-9) (EQUALS ?FILTER-11 ?COLUMN-7 ?RESULT-2) (WHERE ?FILTER-12 ?FILTER-11) (FROM ?FILTER-13 ?FILTER-4) (IN ?FILTER-14 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-10) (SELECT ?RESULT-3 ?FILTER-5 ?FILTER-8 ?FILTER-7) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-5 ?FILTER-0) (SELECT ?RESULT-4 ?COMMA-CLAUSE-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-12 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-11 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 TRAVERSE) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-4 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-5 CITYALIAS0) (BIND CONCEPT ?ALIAS-6 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 CITY))", "answer":"((mississippi) (missouri) (missouri) (red) (canadian) (delaware) (little missouri) (little missouri) (little missouri) (snake) (snake) (cimarron) (green) (north platte) (potomac) (rio grande) (san juan) (yellowstone) (yellowstone) (bighorn) (cheyenne) (cheyenne) (clark fork) (dakota) (dakota) (gila) (niobrara) (pecos) (powder) (tombigbee))", "goal-answer":"((mississippi) (missouri) (missouri) (red) (canadian) (delaware) (little missouri) (little missouri) (little missouri) (snake) (snake) (cimarron) (green) (north platte) (potomac) (rio grande) (san juan) (yellowstone) (yellowstone) (bighorn) (cheyenne) (cheyenne) (clark fork) (dakota) (dakota) (gila) (niobrara) (pecos) (powder) (tombigbee))"},
{"question":"which state capital has the smallest population", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COLUMN-5) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((columbia))", "goal-answer":"((columbia))"},
{"question":"which state has the highest elevation", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((pennsylvania))", "goal-answer":"((pennsylvania))"},
{"question":"which state has the highest point", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((pennsylvania))", "goal-answer":"((pennsylvania))"},
{"question":"what state has the highest elevation", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((pennsylvania))", "goal-answer":"((pennsylvania))"},
{"question":"in which state does the highest point in usa exist", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((pennsylvania))", "goal-answer":"((pennsylvania))"},
{"question":"what state has highest elevation", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((pennsylvania))", "goal-answer":"((pennsylvania))"},
{"question":"what is the state with the highest elevation in the united states", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((pennsylvania))", "goal-answer":"((pennsylvania))"},
{"question":"what is the state that contains the highest point", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((pennsylvania))", "goal-answer":"((pennsylvania))"},
{"question":"what state contains the highest point in the us", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((pennsylvania))", "goal-answer":"((pennsylvania))"},
{"question":"which state has the lowest elevation", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((louisiana))", "goal-answer":"((louisiana))"},
{"question":"what is the name of the state with the lowest point", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((louisiana))", "goal-answer":"((louisiana))"},
{"question":"what is the state with the lowest point", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((louisiana))", "goal-answer":"((louisiana))"},
{"question":"which state has the lowest point that borders idaho", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'idaho' ) ) AND HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'idaho' ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (AND (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1) WHERE (IN HIGHLOWALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME idaho))))) (IN HIGHLOWALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME idaho)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MIN ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 idaho) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((oregon) (washington))", "goal-answer":"((oregon) (washington))"},
{"question":"which state has the most major rivers", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (> RIVERALIAS0.LENGTH 750) GROUP-BY RIVERALIAS0.TRAVERSE) (DESC (COUNT RIVERALIAS0.RIVER_NAME))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GREATER-THAN ?FILTER-1 ?COLUMN-3 ?COMPARATOR-1) (GROUP-BY ?FILTER-2 ?COLUMN-1) (WHERE ?FILTER-3 ?FILTER-1) (FROM ?FILTER-4 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (DESC ?FILTER-5 ?AGGREGATOR-0) (ORDER-BY ?FILTER-6 ?RESULT-0 ?FILTER-5) (LIMIT ?FILTER-7 ?FILTER-6 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-4 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 LENGTH) (BIND COLUMN ?COLUMN-5 RIVER_NAME) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((arkansas))", "goal-answer":"((arkansas))"},
{"question":"which state has the most major rivers running through it", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (> RIVERALIAS0.LENGTH 750) GROUP-BY RIVERALIAS0.TRAVERSE) (DESC (COUNT RIVERALIAS0.RIVER_NAME))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GREATER-THAN ?FILTER-1 ?COLUMN-3 ?COMPARATOR-1) (GROUP-BY ?FILTER-2 ?COLUMN-1) (WHERE ?FILTER-3 ?FILTER-1) (FROM ?FILTER-4 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (DESC ?FILTER-5 ?AGGREGATOR-0) (ORDER-BY ?FILTER-6 ?RESULT-0 ?FILTER-5) (LIMIT ?FILTER-7 ?FILTER-6 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-4 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 LENGTH) (BIND COLUMN ?COLUMN-5 RIVER_NAME) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((arkansas))", "goal-answer":"((arkansas))"},
{"question":"what state has the most major rivers running through it", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (> RIVERALIAS0.LENGTH 750) GROUP-BY RIVERALIAS0.TRAVERSE) (DESC (COUNT RIVERALIAS0.RIVER_NAME))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GREATER-THAN ?FILTER-1 ?COLUMN-3 ?COMPARATOR-1) (GROUP-BY ?FILTER-2 ?COLUMN-1) (WHERE ?FILTER-3 ?FILTER-1) (FROM ?FILTER-4 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (DESC ?FILTER-5 ?AGGREGATOR-0) (ORDER-BY ?FILTER-6 ?RESULT-0 ?FILTER-5) (LIMIT ?FILTER-7 ?FILTER-6 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-4 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 LENGTH) (BIND COLUMN ?COLUMN-5 RIVER_NAME) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((arkansas))", "goal-answer":"((arkansas))"},
{"question":"which state has the smallest average urban population", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ORDER BY AVG ( CITYalias0.POPULATION ) LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) GROUP-BY CITYALIAS0.STATE_NAME) (AVG CITYALIAS0.POPULATION)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (AVERAGE ?AGGREGATOR-0 ?COLUMN-2) (ORDER-BY ?FILTER-3 ?RESULT-0 ?AGGREGATOR-0) (LIMIT ?FILTER-4 ?FILTER-3 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((wyoming))", "goal-answer":"((wyoming))"},
{"question":"which state is mount mckinley in", "sql-query":"SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = 'mckinley' ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.STATE_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_NAME mckinley))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 MOUNTAIN_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 mckinley) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"in what state is mount mckinley", "sql-query":"SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = 'mckinley' ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.STATE_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_NAME mckinley))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 MOUNTAIN_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 mckinley) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((alaska))", "goal-answer":"((alaska))"},
{"question":"where is mount whitney", "sql-query":"SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = 'whitney' ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.STATE_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_NAME whitney))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 MOUNTAIN_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 whitney) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"where is mount whitney located", "sql-query":"SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = 'whitney' ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.STATE_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_NAME whitney))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 MOUNTAIN_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 whitney) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"which states have a river", "sql-query":"SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.TRAVERSE) FROM (AS RIVER RIVERALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 TRAVERSE) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((kentucky) (utah) (nebraska) (district of columbia) (vermont) (texas) (virginia) (indiana) (nevada) (iowa) (south dakota) (arkansas) (new mexico) (north carolina) (ohio) (montana) (california) (michigan) (kansas) (south carolina) (west virginia) (louisiana) (oklahoma) (connecticut) (mississippi) (missouri) (maryland) (delaware) (colorado) (georgia) (massachusetts) (north dakota) (wyoming) (washington) (oregon) (new york) (wisconsin) (new hampshire) (pennsylvania) (minnesota) (illinois) (alabama) (arizona) (new jersey) (tennessee) (florida) (idaho))", "goal-answer":"((kentucky) (utah) (nebraska) (district of columbia) (vermont) (texas) (virginia) (indiana) (nevada) (iowa) (south dakota) (arkansas) (new mexico) (north carolina) (ohio) (montana) (california) (michigan) (kansas) (south carolina) (west virginia) (louisiana) (oklahoma) (connecticut) (mississippi) (missouri) (maryland) (delaware) (colorado) (georgia) (massachusetts) (north dakota) (wyoming) (washington) (oregon) (new york) (wisconsin) (new hampshire) (pennsylvania) (minnesota) (illinois) (alabama) (arizona) (new jersey) (tennessee) (florida) (idaho))"},
{"question":"what states have rivers running through them", "sql-query":"SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.TRAVERSE) FROM (AS RIVER RIVERALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 TRAVERSE) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((kentucky) (utah) (nebraska) (district of columbia) (vermont) (texas) (virginia) (indiana) (nevada) (iowa) (south dakota) (arkansas) (new mexico) (north carolina) (ohio) (montana) (california) (michigan) (kansas) (south carolina) (west virginia) (louisiana) (oklahoma) (connecticut) (mississippi) (missouri) (maryland) (delaware) (colorado) (georgia) (massachusetts) (north dakota) (wyoming) (washington) (oregon) (new york) (wisconsin) (new hampshire) (pennsylvania) (minnesota) (illinois) (alabama) (arizona) (new jersey) (tennessee) (florida) (idaho))", "goal-answer":"((kentucky) (utah) (nebraska) (district of columbia) (vermont) (texas) (virginia) (indiana) (nevada) (iowa) (south dakota) (arkansas) (new mexico) (north carolina) (ohio) (montana) (california) (michigan) (kansas) (south carolina) (west virginia) (louisiana) (oklahoma) (connecticut) (mississippi) (missouri) (maryland) (delaware) (colorado) (georgia) (massachusetts) (north dakota) (wyoming) (washington) (oregon) (new york) (wisconsin) (new hampshire) (pennsylvania) (minnesota) (illinois) (alabama) (arizona) (new jersey) (tennessee) (florida) (idaho))"},
{"question":"which states have a major city named austin", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' AND CITYalias0.POPULATION > 150000 ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.CITY_NAME austin) (> CITYALIAS0.POPULATION 150000)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (GREATER-THAN ?FILTER-1 ?COLUMN-3 ?COMPARATOR-1) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 CITY_NAME) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what is the largest city in a state that borders texas", "sql query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ) AND CITYalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (IN CITYALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))))) (IN CITYALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME texas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-13) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-13) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-13) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-9 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-8 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-7 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-13 STATE_NAME) (BIND COLUMN ?COLUMN-12 POPULATION) (BIND COLUMN ?COLUMN-11 BORDER) (BIND COLUMN ?COLUMN-10 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 CITYALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 CITY))", "answer":"((new orleans))", "goal-answer":"((new orleans))"},
{"question":"what is the largest city in states that border california", "sql query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'california' ) ) AND CITYalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'california' ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (IN CITYALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME california))))) (IN CITYALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME california)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-13) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-13) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-13) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-9 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-8 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-7 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-13 STATE_NAME) (BIND COLUMN ?COLUMN-12 POPULATION) (BIND COLUMN ?COLUMN-11 BORDER) (BIND COLUMN ?COLUMN-10 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 CITYALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 CITY))", "answer":"((phoenix))", "goal-answer":"((phoenix))"},
{"question":"what is the largest city in a state that borders texas", "sql query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER = 'texas' ) ) AND CITYalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.BORDER = 'texas' ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (IN CITYALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.BORDER texas))))) (IN CITYALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.BORDER texas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-13) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-13) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-9 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-8 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-7 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-13 BORDER) (BIND COLUMN ?COLUMN-12 POPULATION) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 CITYALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 CITY))", "answer":"((new orleans))", "goal-answer":"((new orleans))"},
{"question":"what is the largest city in states that border california", "sql query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER = 'california' ) ) AND CITYalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.BORDER = 'california' ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (IN CITYALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.BORDER california))))) (IN CITYALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.BORDER california)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-13) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-13) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-9 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-8 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-7 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-13 BORDER) (BIND COLUMN ?COLUMN-12 POPULATION) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 california) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 CITYALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 CITY))", "answer":"((phoenix))", "goal-answer":"((phoenix))"},
{"question":"how many rivers do not traverse the state with the capital albany", "sql-query":"SELECT COUNT( DISTINCT RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME NOT IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'albany' ) ) ;", "s-sql-query":"(SELECT (COUNT (DISTINCT RIVERALIAS0.RIVER_NAME)) FROM (AS RIVER RIVERALIAS0) WHERE (NOT (IN RIVERALIAS0.RIVER_NAME (SELECT RIVERALIAS1.RIVER_NAME FROM (AS RIVER RIVERALIAS1) WHERE (IN RIVERALIAS1.TRAVERSE (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL albany)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-3 ?RESULT-2) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (IN ?FILTER-8 ?COLUMN-4 ?RESULT-1) (NOT ?FILTER-9 ?FILTER-8) (WHERE ?FILTER-10 ?FILTER-9) (AS ?FILTER-11 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-12 ?FILTER-11) (DISTINCT ?AGGREGATOR-0 ?COLUMN-4) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-12 ?FILTER-10) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-2 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 CAPITAL) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 albany) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 RIVERALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((43))", "goal-answer":"((43))"},
{"question":"what is the shortest river in iowa", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'iowa' ) AND RIVERalias0.TRAVERSE = 'iowa' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MIN RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE iowa))) (= RIVERALIAS0.TRAVERSE iowa)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 iowa) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"what is the shortest river in nebraska", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'nebraska' ) AND RIVERalias0.TRAVERSE = 'nebraska' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MIN RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE nebraska))) (= RIVERALIAS0.TRAVERSE nebraska)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 nebraska) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((republican))", "goal-answer":"((republican))"},
{"question":"what is the shortest river in alaska", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'alaska' ) AND RIVERalias0.TRAVERSE = 'alaska' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MIN RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE alaska))) (= RIVERALIAS0.TRAVERSE alaska)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what is the shortest river in texas", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = 'texas' ) AND RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MIN RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.TRAVERSE texas))) (= RIVERALIAS0.TRAVERSE texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-5 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LENGTH) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((pecos) (washita))", "goal-answer":"((pecos) (washita))"},
{"question":"what is the shortest river in iowa", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'iowa' ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE iowa)) RIVERALIAS0.LENGTH) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-1 ?COLUMN-3 ?COMPARATOR-1) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?COLUMN-2) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 iowa) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((mississippi))", "goal-answer":"((mississippi))"},
{"question":"what is the shortest river in nebraska", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'nebraska' ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE nebraska)) RIVERALIAS0.LENGTH) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-1 ?COLUMN-3 ?COMPARATOR-1) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?COLUMN-2) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 nebraska) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((republican))", "goal-answer":"((republican))"},
{"question":"what is the shortest river in alaska", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'alaska' ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE alaska)) RIVERALIAS0.LENGTH) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-1 ?COLUMN-3 ?COMPARATOR-1) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?COLUMN-2) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 alaska) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what is the shortest river in texas", "sql query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = 'texas' ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.TRAVERSE texas)) RIVERALIAS0.LENGTH) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (EQUALS ?FILTER-1 ?COLUMN-3 ?COMPARATOR-1) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?COLUMN-2) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?COMPARATOR-1 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((pecos))", "goal-answer":"((pecos))"},
{"question":"what are the major cities in the smallest state in the us", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-0 ?COLUMN-10) (GREATER-THAN ?FILTER-0 ?COLUMN-6 ?COMPARATOR-0) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-2) (MIN ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (EQUALS ?FILTER-7 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-8 ?FILTER-0 ?FILTER-7) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-11 ?FILTER-10) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-11 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-3) (BIND COLUMN ?COLUMN-10 POPULATION) (BIND COLUMN ?COLUMN-9 AREA) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 STATE))", "answer":"((washington))", "goal-answer":"((washington))"},
{"question":"what is the population of the capital of the largest state through which the mississippi runs", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = ( SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM RIVER AS RIVERalias0 , STATE AS STATEalias1 WHERE RIVERalias0.RIVER_NAME = 'mississippi' AND STATEalias1.STATE_NAME = RIVERalias0.TRAVERSE ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME (SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS RIVER RIVERALIAS0) (AS STATE STATEALIAS1) WHERE (AND (= RIVERALIAS0.RIVER_NAME mississippi) (= STATEALIAS1.STATE_NAME RIVERALIAS0.TRAVERSE)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-12) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-12) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-13) (DOT ?COLUMN-7 ?ALIAS-2 ?COLUMN-14) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-15) (AS ?FILTER-0 ?TABLE-2 ?ALIAS-3) (MAX ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-2 ?TABLE-2 ?ALIAS-1) (EQUALS ?FILTER-3 ?COLUMN-8 ?COMPARATOR-0) (EQUALS ?FILTER-4 ?COLUMN-6 ?COLUMN-7) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (COMMA ?COMMA-CLAUSE-1 ?FILTER-1 ?FILTER-2) (FROM ?FILTER-7 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-8 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-9 ?FILTER-8) (FROM ?FILTER-10 ?FILTER-0) (EQUALS ?FILTER-11 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-14 ?FILTER-13) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-14 ?FILTER-12) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-10 ?FILTER-9) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-15 RIVER_NAME) (BIND COLUMN ?COLUMN-14 TRAVERSE) (BIND COLUMN ?COLUMN-13 STATE_NAME) (BIND COLUMN ?COLUMN-12 AREA) (BIND COLUMN ?COLUMN-11 CITY_NAME) (BIND COLUMN ?COLUMN-10 CAPITAL) (BIND COLUMN ?COLUMN-9 POPULATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 RIVER) (BIND TABLE ?TABLE-2 STATE))", "answer":"((270230))", "goal-answer":"((270230))"},
{"question":"what is the capital of the state that borders the state that borders texas", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' ) ) ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME texas))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (IN ?FILTER-8 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-11 ?FILTER-10) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-11 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-2 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 BORDER) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((phoenix) (little rock) (denver) (topeka) (baton rouge) (jackson) (jefferson city) (santa fe) (oklahoma city) (nashville) (austin) (salt lake city))", "goal-answer":"((phoenix) (little rock) (denver) (topeka) (baton rouge) (jackson) (jefferson city) (santa fe) (oklahoma city) (nashville) (austin) (salt lake city))"},
{"question":"what is the smallest city of the smallest state in the us", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ) AND CITYalias0.STATE_NAME IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.AREA = ( SELECT MIN( STATEalias3.AREA ) FROM STATE AS STATEalias3 ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MIN CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (IN CITYALIAS1.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))) (IN CITYALIAS0.STATE_NAME (SELECT STATEALIAS2.STATE_NAME FROM (AS STATE STATEALIAS2) WHERE (= STATEALIAS2.AREA (SELECT (MIN STATEALIAS3.AREA) FROM (AS STATE STATEALIAS3)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-13) (DOT ?COLUMN-3 ?ALIAS-4 ?COLUMN-13) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-13) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-15) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-15) (DOT ?COLUMN-8 ?ALIAS-5 ?COLUMN-14) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-15) (DOT ?COLUMN-10 ?ALIAS-0 ?COLUMN-14) (DOT ?COLUMN-11 ?ALIAS-4 ?COLUMN-15) (MIN ?AGGREGATOR-0 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-5) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-4) (MIN ?AGGREGATOR-1 ?COLUMN-7) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-3) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-11 ?RESULT-5) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-5 ?RESULT-4) (WHERE ?FILTER-8 ?FILTER-7) (FROM ?FILTER-9 ?FILTER-0) (EQUALS ?FILTER-10 ?COLUMN-10 ?RESULT-3) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-2) (MIN ?AGGREGATOR-2 ?COLUMN-6) (AS ?FILTER-12 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-13 ?FILTER-12) (EQUALS ?FILTER-14 ?COLUMN-9 ?RESULT-2) (WHERE ?FILTER-15 ?FILTER-14) (FROM ?FILTER-16 ?FILTER-11) (IN ?FILTER-17 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-18 ?FILTER-10 ?FILTER-17) (WHERE ?FILTER-19 ?FILTER-18) (AS ?FILTER-20 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-21 ?FILTER-19) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-16 ?FILTER-15) (SELECT ?RESULT-2 ?AGGREGATOR-2 ?FILTER-13) (SELECT ?RESULT-3 ?AGGREGATOR-0 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-4 ?COLUMN-3 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-5 ?AGGREGATOR-1 ?FILTER-3) (BIND COLUMN ?COLUMN-15 AREA) (BIND COLUMN ?COLUMN-14 POPULATION) (BIND COLUMN ?COLUMN-13 STATE_NAME) (BIND COLUMN ?COLUMN-12 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS3) (BIND CONCEPT ?ALIAS-2 STATEALIAS2) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND CONCEPT ?ALIAS-4 STATEALIAS0) (BIND CONCEPT ?ALIAS-5 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((washington))", "goal-answer":"((washington))"},
{"question":"how many rivers are in the state with the largest population", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = ( SELECT STATEalias1.STATE_NAME FROM STATE AS STATEalias1 WHERE STATEalias1.POPULATION = ( SELECT MAX( STATEalias2.POPULATION ) FROM STATE AS STATEalias2 ) ) AND STATEalias0.STATE_NAME = RIVERalias0.TRAVERSE ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.STATE_NAME (SELECT STATEALIAS1.STATE_NAME FROM (AS STATE STATEALIAS1) WHERE (= STATEALIAS1.POPULATION (SELECT (MAX STATEALIAS2.POPULATION) FROM (AS STATE STATEALIAS2))))) (= STATEALIAS0.STATE_NAME RIVERALIAS0.TRAVERSE)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-3 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-10) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (MAX ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-6 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (EQUALS ?FILTER-6 ?COLUMN-5 ?RESULT-1) (EQUALS ?FILTER-7 ?COLUMN-5 ?COLUMN-4) (AND ?FILTER-8 ?FILTER-6 ?FILTER-7) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?COMMA-CLAUSE-1) (COUNT ?AGGREGATOR-1 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-12 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-10 POPULATION) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS2) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE))", "answer":"((1))", "goal-answer":"((1))"},
{"question":"what is the largest state that borders the state with the lowest point in the usa", "sql-query":"SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE HIGHLOWalias0.STATE_NAME = BORDER_INFOalias0.BORDER AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER AND HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT BORDER_INFOALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS HIGHLOW HIGHLOWALIAS0) (AS STATE STATEALIAS0) WHERE (AND (AND (= HIGHLOWALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)) (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))) (DESC STATEALIAS0.AREA)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-2 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-11) (AS ?FILTER-0 ?TABLE-2 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-3 ?COLUMN-6 ?COLUMN-7) (EQUALS ?FILTER-4 ?COLUMN-5 ?COLUMN-7) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-6 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (EQUALS ?FILTER-8 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-9 ?FILTER-5 ?FILTER-8) (WHERE ?FILTER-10 ?FILTER-9) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (COMMA ?COMMA-CLAUSE-2 ?COMMA-CLAUSE-1 ?FILTER-2) (FROM ?FILTER-11 ?COMMA-CLAUSE-2) (DESC ?FILTER-12 ?COLUMN-3) (ORDER-BY ?FILTER-13 ?RESULT-0 ?FILTER-12) (LIMIT ?FILTER-14 ?FILTER-13 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-11 ?FILTER-10) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-7) (BIND COLUMN ?COLUMN-11 BORDER) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-8 AREA) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS1) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 HIGHLOW) (BIND TABLE ?TABLE-2 BORDER_INFO))", "answer":"((arkansas))", "goal-answer":"((arkansas))"},
{"question":"what is the population of the largest state that borders texas", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME texas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-13) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-13) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-13) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-9 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-8 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-7 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-13 STATE_NAME) (BIND COLUMN ?COLUMN-12 AREA) (BIND COLUMN ?COLUMN-11 BORDER) (BIND COLUMN ?COLUMN-10 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((1303000))", "goal-answer":"((1303000))"},
{"question":"what state is austin the capital of", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'austin' ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"what states capital is dover", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'dover' ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL dover))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 dover) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((delaware))", "goal-answer":"((delaware))"},
{"question":"sacramento is the capital of which state", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'sacramento' ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL sacramento))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 sacramento) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"what state is columbus the capital of", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'columbus' ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL columbus))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 columbus) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((ohio))", "goal-answer":"((ohio))"},
{"question":"what state has the capital salem", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'salem' ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL salem))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 salem) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((oregon))", "goal-answer":"((oregon))"},
{"question":"what rivers flow through the state with the largest population", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-9 POPULATION) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"what is the largest state that borders the state with the highest population", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.POPULATION = ( SELECT MAX( STATEalias3.POPULATION ) FROM STATE AS STATEalias3 ) ) ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.BORDER IN ( SELECT STATEalias4.STATE_NAME FROM STATE AS STATEalias4 WHERE STATEalias4.POPULATION = ( SELECT MAX( STATEalias5.POPULATION ) FROM STATE AS STATEalias5 ) ) ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.BORDER (SELECT STATEALIAS2.STATE_NAME FROM (AS STATE STATEALIAS2) WHERE (= STATEALIAS2.POPULATION (SELECT (MAX STATEALIAS3.POPULATION) FROM (AS STATE STATEALIAS3))))))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.STATE_NAME FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (IN BORDER_INFOALIAS1.BORDER (SELECT STATEALIAS4.STATE_NAME FROM (AS STATE STATEALIAS4) WHERE (= STATEALIAS4.POPULATION (SELECT (MAX STATEALIAS5.POPULATION) FROM (AS STATE STATEALIAS5)))))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-3 ?COLUMN-15) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-15) (DOT ?COLUMN-3 ?ALIAS-6 ?COLUMN-15) (DOT ?COLUMN-4 ?ALIAS-5 ?COLUMN-15) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-15) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-16) (DOT ?COLUMN-7 ?ALIAS-7 ?COLUMN-15) (DOT ?COLUMN-8 ?ALIAS-6 ?COLUMN-16) (DOT ?COLUMN-9 ?ALIAS-1 ?COLUMN-18) (DOT ?COLUMN-10 ?ALIAS-4 ?COLUMN-18) (DOT ?COLUMN-11 ?ALIAS-7 ?COLUMN-17) (DOT ?COLUMN-12 ?ALIAS-2 ?COLUMN-18) (DOT ?COLUMN-13 ?ALIAS-0 ?COLUMN-17) (DOT ?COLUMN-14 ?ALIAS-5 ?COLUMN-18) (MAX ?AGGREGATOR-0 ?COLUMN-11) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-7) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-6) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-5) (MAX ?AGGREGATOR-1 ?COLUMN-10) (AS ?FILTER-3 ?TABLE-1 ?ALIAS-4) (FROM ?FILTER-4 ?FILTER-3) (EQUALS ?FILTER-5 ?COLUMN-14 ?RESULT-7) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-2) (IN ?FILTER-8 ?COLUMN-8 ?RESULT-6) (WHERE ?FILTER-9 ?FILTER-8) (FROM ?FILTER-10 ?FILTER-1) (IN ?FILTER-11 ?COLUMN-7 ?RESULT-5) (WHERE ?FILTER-12 ?FILTER-11) (FROM ?FILTER-13 ?FILTER-0) (EQUALS ?FILTER-14 ?COLUMN-13 ?RESULT-4) (AS ?FILTER-15 ?TABLE-0 ?ALIAS-3) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-2 ?COLUMN-9) (AS ?FILTER-17 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-18 ?FILTER-17) (EQUALS ?FILTER-19 ?COLUMN-12 ?RESULT-3) (WHERE ?FILTER-20 ?FILTER-19) (FROM ?FILTER-21 ?FILTER-16) (IN ?FILTER-22 ?COLUMN-6 ?RESULT-2) (WHERE ?FILTER-23 ?FILTER-22) (FROM ?FILTER-24 ?FILTER-15) (IN ?FILTER-25 ?COLUMN-5 ?RESULT-1) (AND ?FILTER-26 ?FILTER-14 ?FILTER-25) (WHERE ?FILTER-27 ?FILTER-26) (AS ?FILTER-28 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-29 ?FILTER-28) (SELECT ?RESULT-0 ?COLUMN-5 ?FILTER-29 ?FILTER-27) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-24 ?FILTER-23) (SELECT ?RESULT-2 ?COLUMN-2 ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-3 ?AGGREGATOR-2 ?FILTER-18) (SELECT ?RESULT-4 ?AGGREGATOR-0 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-5 ?COLUMN-3 ?FILTER-10 ?FILTER-9) (SELECT ?RESULT-6 ?COLUMN-4 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-7 ?AGGREGATOR-1 ?FILTER-4) (BIND COLUMN ?COLUMN-18 POPULATION) (BIND COLUMN ?COLUMN-17 AREA) (BIND COLUMN ?COLUMN-16 BORDER) (BIND COLUMN ?COLUMN-15 STATE_NAME) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS5) (BIND CONCEPT ?ALIAS-2 STATEALIAS4) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-4 STATEALIAS3) (BIND CONCEPT ?ALIAS-5 STATEALIAS2) (BIND CONCEPT ?ALIAS-6 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-7 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((arizona))", "goal-answer":"((arizona))"},
{"question":"what is the capital of the state with the highest point", "sql-query":"SELECT STATEalias0.CAPITAL FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS HIGHLOW HIGHLOWALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))) (= STATEALIAS0.STATE_NAME HIGHLOWALIAS0.STATE_NAME)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?RESULT-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-7 ?FILTER-6) (FROM ?FILTER-8 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-5) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-8 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 CAPITAL) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((harrisburg))", "goal-answer":"((harrisburg))"},
{"question":"what is the capital of the state with the highest elevation", "sql-query":"SELECT STATEalias0.CAPITAL FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS HIGHLOW HIGHLOWALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))) (= STATEALIAS0.STATE_NAME HIGHLOWALIAS0.STATE_NAME)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?RESULT-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-7 ?FILTER-6) (FROM ?FILTER-8 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-5) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-8 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 CAPITAL) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((harrisburg))", "goal-answer":"((harrisburg))"},
{"question":"how many rivers are there in us", "sql-query":"SELECT COUNT( DISTINCT RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 ;", "s-sql-query":"(SELECT (COUNT (DISTINCT RIVERALIAS0.RIVER_NAME)) FROM (AS RIVER RIVERALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((46))", "goal-answer":"((46))"},
{"question":"name the 50 capitals in the usa", "sql-query":"SELECT DISTINCT STATEalias0.CAPITAL FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (DISTINCT STATEALIAS0.CAPITAL) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 CAPITAL) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((bismarck) (helena) (lansing) (richmond) (atlanta) (sacramento) (jackson) (frankfort) (montpelier) (springfield) (hartford) (charleston) (st. paul) (augusta) (montgomery) (baton rouge) (harrisburg) (salem) (carson city) (nashville) (santa fe) (denver) (topeka) (dover) (oklahoma city) (columbus) (des moines) (raleigh) (juneau) (trenton) (annapolis) (jefferson city) (honolulu) (cheyenne) (salt lake city) (phoenix) (pierre) (lincoln) (madison) (olympia) (providence) (boise) (little rock) (tallahassee) (washington) (boston) (austin) (indianapolis) (albany) (columbia) (concord))", "goal-answer":"((bismarck) (helena) (lansing) (richmond) (atlanta) (sacramento) (jackson) (frankfort) (montpelier) (springfield) (hartford) (charleston) (st. paul) (augusta) (montgomery) (baton rouge) (harrisburg) (salem) (carson city) (nashville) (santa fe) (denver) (topeka) (dover) (oklahoma city) (columbus) (des moines) (raleigh) (juneau) (trenton) (annapolis) (jefferson city) (honolulu) (cheyenne) (salt lake city) (phoenix) (pierre) (lincoln) (madison) (olympia) (providence) (boise) (little rock) (tallahassee) (washington) (boston) (austin) (indianapolis) (albany) (columbia) (concord))"},
{"question":"how many states have a city named springfield", "sql-query":"SELECT COUNT( CITYalias0.STATE_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'springfield' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.STATE_NAME) FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME springfield))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 springfield) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((4))", "goal-answer":"((4))"},
{"question":"how many states have a city called rochester", "sql-query":"SELECT COUNT( CITYalias0.STATE_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'rochester' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.STATE_NAME) FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME rochester))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 rochester) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((2))", "goal-answer":"((2))"},
{"question":"how many states have cities named austin", "sql-query":"SELECT COUNT( CITYalias0.STATE_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.STATE_NAME) FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((1))", "goal-answer":"((1))"},
{"question":"how many states have cities or towns named springfield", "sql-query":"SELECT COUNT( CITYalias0.STATE_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'springfield' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.STATE_NAME) FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME springfield))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 springfield) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((4))", "goal-answer":"((4))"},
{"question":"what state borders the state with the smallest population", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MIN( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MIN STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MIN ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-8 POPULATION) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what state is the state with the most rivers", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.TRAVERSE) (DESC (COUNT RIVERALIAS0.RIVER_NAME))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (DESC ?FILTER-3 ?AGGREGATOR-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"which state contains most rivers", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.TRAVERSE) (DESC (COUNT RIVERALIAS0.RIVER_NAME))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (DESC ?FILTER-3 ?AGGREGATOR-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"what state has the most rivers", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.TRAVERSE) (DESC (COUNT RIVERALIAS0.RIVER_NAME))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (DESC ?FILTER-3 ?AGGREGATOR-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"which state has the most rivers", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.TRAVERSE) (DESC (COUNT RIVERALIAS0.RIVER_NAME))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (DESC ?FILTER-3 ?AGGREGATOR-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"which state has the most rivers running through it", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.TRAVERSE) (DESC (COUNT RIVERALIAS0.RIVER_NAME))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (DESC ?FILTER-3 ?AGGREGATOR-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"what state has the most rivers running through it", "sql-query":"SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) GROUP-BY RIVERALIAS0.TRAVERSE) (DESC (COUNT RIVERALIAS0.RIVER_NAME))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (DESC ?FILTER-3 ?AGGREGATOR-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((colorado))", "goal-answer":"((colorado))"},
{"question":"what are the lakes in states bordering texas", "sql-query":"SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT LAKEALIAS0.LAKE_NAME FROM (AS LAKE LAKEALIAS0) WHERE (IN LAKEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 LAKE_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 LAKEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 LAKE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((pontchartrain))", "goal-answer":"((pontchartrain))"},
{"question":"how many major cities are in florida", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'florida' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME florida)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 florida) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((5))", "goal-answer":"((5))"},
{"question":"how many major cities are in arizona", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'arizona' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME arizona)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 arizona) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((3))", "goal-answer":"((3))"},
{"question":"how many big cities are in pennsylvania", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'pennsylvania' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME pennsylvania)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 pennsylvania) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((2))", "goal-answer":"((2))"},
{"question":"how many major cities are there in oregon", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'oregon' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME oregon)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 oregon) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((1))", "goal-answer":"((1))"},
{"question":"how many major cities are in texas", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((9))", "goal-answer":"((9))"},
{"question":"how high are the highest points of all the states", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 HIGHEST_ELEVATION) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((734) (6194) (3851) (839) (4418) (4399) (725) (135) (125) (105) (1458) (4205) (3859) (376) (383) (511) (1231) (1263) (163) (1606) (1024) (1064) (604) (701) (246) (540) (3901) (1654) (4005) (1917) (550) (4011) (1629) (2037) (1069) (472) (1516) (3424) (979) (247) (1085) (2207) (2025) (2667) (4123) (1339) (1746) (4392) (1482) (595) (4202))", "goal-answer":"((734) (6194) (3851) (839) (4418) (4399) (725) (135) (125) (105) (1458) (4205) (3859) (376) (383) (511) (1231) (1263) (163) (1606) (1024) (1064) (604) (701) (246) (540) (3901) (1654) (4005) (1917) (550) (4011) (1629) (2037) (1069) (472) (1516) (3424) (979) (247) (1085) (2207) (2025) (2667) (4123) (1339) (1746) (4392) (1482) (595) (4202))"},
{"question":"how many states does the mississippi run through", "sql-query":"SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.TRAVERSE) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((11))", "goal-answer":"((11))"},
{"question":"how many states does the colorado river flow through", "sql-query":"SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.TRAVERSE) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((5))", "goal-answer":"((5))"},
{"question":"how many states does the colorado river run through", "sql-query":"SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.TRAVERSE) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME colorado))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((5))", "goal-answer":"((5))"},
{"question":"how many states does the mississippi river run through", "sql-query":"SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.TRAVERSE) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((11))", "goal-answer":"((11))"},
{"question":"how many states does the missouri river run through", "sql-query":"SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'missouri' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.TRAVERSE) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME missouri))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 missouri) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((7))", "goal-answer":"((7))"},
{"question":"what is the longest river in the smallest state in the usa", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ) AND RIVERalias0.TRAVERSE IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.AREA = ( SELECT MIN( STATEalias3.AREA ) FROM STATE AS STATEalias3 ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (IN RIVERALIAS1.TRAVERSE (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))) (IN RIVERALIAS0.TRAVERSE (SELECT STATEALIAS2.STATE_NAME FROM (AS STATE STATEALIAS2) WHERE (= STATEALIAS2.AREA (SELECT (MIN STATEALIAS3.AREA) FROM (AS STATE STATEALIAS3)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-13) (DOT ?COLUMN-3 ?ALIAS-4 ?COLUMN-13) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-14) (DOT ?COLUMN-5 ?ALIAS-5 ?COLUMN-14) (DOT ?COLUMN-6 ?ALIAS-5 ?COLUMN-15) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-16) (DOT ?COLUMN-8 ?ALIAS-3 ?COLUMN-16) (DOT ?COLUMN-9 ?ALIAS-2 ?COLUMN-16) (DOT ?COLUMN-10 ?ALIAS-0 ?COLUMN-15) (DOT ?COLUMN-11 ?ALIAS-4 ?COLUMN-16) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-5) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-4) (MIN ?AGGREGATOR-1 ?COLUMN-8) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-3) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-11 ?RESULT-5) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-5 ?RESULT-4) (WHERE ?FILTER-8 ?FILTER-7) (FROM ?FILTER-9 ?FILTER-0) (EQUALS ?FILTER-10 ?COLUMN-10 ?RESULT-3) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-2) (MIN ?AGGREGATOR-2 ?COLUMN-7) (AS ?FILTER-12 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-13 ?FILTER-12) (EQUALS ?FILTER-14 ?COLUMN-9 ?RESULT-2) (WHERE ?FILTER-15 ?FILTER-14) (FROM ?FILTER-16 ?FILTER-11) (IN ?FILTER-17 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-18 ?FILTER-10 ?FILTER-17) (WHERE ?FILTER-19 ?FILTER-18) (AS ?FILTER-20 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-21 ?FILTER-19) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-16 ?FILTER-15) (SELECT ?RESULT-2 ?AGGREGATOR-2 ?FILTER-13) (SELECT ?RESULT-3 ?AGGREGATOR-0 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-4 ?COLUMN-3 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-5 ?AGGREGATOR-1 ?FILTER-3) (BIND COLUMN ?COLUMN-16 AREA) (BIND COLUMN ?COLUMN-15 LENGTH) (BIND COLUMN ?COLUMN-14 TRAVERSE) (BIND COLUMN ?COLUMN-13 STATE_NAME) (BIND COLUMN ?COLUMN-12 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS3) (BIND CONCEPT ?ALIAS-2 STATEALIAS2) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND CONCEPT ?ALIAS-4 STATEALIAS0) (BIND CONCEPT ?ALIAS-5 RIVERALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((potomac))", "goal-answer":"((potomac))"},
{"question":"what is the average population per square km in pennsylvania", "sql-query":"SELECT STATEalias0.POPULATION / STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'pennsylvania' ;", "s-sql-query":"(SELECT (/ STATEALIAS0.POPULATION STATEALIAS0.AREA) FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME pennsylvania))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-1 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DIVIDED-BY ?FILTER-4 ?COLUMN-2 ?COLUMN-3) (SELECT ?RESULT-0 ?FILTER-4 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-6 AREA) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 pennsylvania) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((261.8301403725611D0))", "goal-answer":"((261.8301403725611D0))"},
{"question":"what states border states that border states that border florida", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME IN ( SELECT BORDER_INFOalias2.BORDER FROM BORDER_INFO AS BORDER_INFOalias2 WHERE BORDER_INFOalias2.STATE_NAME = 'florida' ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (IN BORDER_INFOALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS2.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS2) WHERE (= BORDER_INFOALIAS2.STATE_NAME florida))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (IN ?FILTER-8 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-11 ?FILTER-10) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-11 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-2 ?COLUMN-3 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 BORDER) (BIND CONCEPT ?COMPARATOR-0 florida) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS2) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((tennessee) (georgia) (florida) (mississippi) (georgia) (alabama) (north carolina) (south carolina) (florida) (alabama) (tennessee) (tennessee) (alabama) (louisiana) (arkansas) (virginia) (south carolina) (georgia) (tennessee) (north carolina) (georgia) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri))", "goal-answer":"((tennessee) (georgia) (florida) (mississippi) (georgia) (alabama) (north carolina) (south carolina) (florida) (alabama) (tennessee) (tennessee) (alabama) (louisiana) (arkansas) (virginia) (south carolina) (georgia) (tennessee) (north carolina) (georgia) (kentucky) (virginia) (north carolina) (georgia) (alabama) (mississippi) (arkansas) (missouri))"},
{"question":"how many states border at least one other state", "sql-query":"SELECT COUNT( DISTINCT BORDER_INFOalias0.STATE_NAME ) FROM BORDER_INFO AS BORDER_INFOalias0 ;", "s-sql-query":"(SELECT (COUNT (DISTINCT BORDER_INFOALIAS0.STATE_NAME)) FROM (AS BORDER_INFO BORDER_INFOALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((49))", "goal-answer":"((49))"},
{"question":"what is the height of the highest mountain in texas", "sql-query":"SELECT MAX( DISTINCT HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT (MAX (DISTINCT HIGHLOWALIAS0.HIGHEST_ELEVATION)) FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (MAX ?AGGREGATOR-1 ?AGGREGATOR-0) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 HIGHEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((2667))", "goal-answer":"((2667))"},
{"question":"how many states border colorado and border new mexico", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'new mexico' ) AND BORDER_INFOalias0.STATE_NAME = 'colorado' ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (AND (IN BORDER_INFOALIAS0.BORDER (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME new mexico))) (= BORDER_INFOALIAS0.STATE_NAME colorado)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-6) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-2 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?COMPARATOR-1 new mexico) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((3))", "goal-answer":"((3))"},
{"question":"how many major cities are in states bordering utah", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'utah' ) ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (IN CITYALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME utah)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-9) (GREATER-THAN ?FILTER-0 ?COLUMN-5 ?COMPARATOR-1) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (AND ?FILTER-6 ?FILTER-0 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (COUNT ?AGGREGATOR-0 ?COLUMN-3) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 POPULATION) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 CITY_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND CONCEPT ?COMPARATOR-0 utah) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((8))", "goal-answer":"((8))"},
{"question":"how many major cities are in states bordering nebraska", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'nebraska' ) ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (IN CITYALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME nebraska)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-9) (GREATER-THAN ?FILTER-0 ?COLUMN-5 ?COMPARATOR-1) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-2 ?RESULT-1) (AND ?FILTER-6 ?FILTER-0 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (COUNT ?AGGREGATOR-0 ?COLUMN-3) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 POPULATION) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 CITY_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND CONCEPT ?COMPARATOR-0 nebraska) (BIND CONCEPT ?COMPARATOR-1 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((8))", "goal-answer":"((8))"},
{"question":"what is the total population of the states that border texas", "sql-query":"SELECT SUM( STATEalias0.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "s-sql-query":"(SELECT (SUM STATEALIAS0.POPULATION) FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= BORDER_INFOALIAS0.STATE_NAME texas) (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.BORDER)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (EQUALS ?FILTER-0 ?COLUMN-4 ?COMPARATOR-0) (EQUALS ?FILTER-1 ?COLUMN-2 ?COLUMN-3) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (SUM ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-6 ?FILTER-3) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((10820000))", "goal-answer":"((10820000))"},
{"question":"what are the major lakes in united states ", "sql-query":"SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 ;", "s-sql-query":"(SELECT LAKEALIAS0.LAKE_NAME FROM (AS LAKE LAKEALIAS0) WHERE (> LAKEALIAS0.AREA 750))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 AREA) (BIND COLUMN ?COLUMN-3 LAKE_NAME) (BIND CONCEPT ?COMPARATOR-0 750) (BIND CONCEPT ?ALIAS-0 LAKEALIAS0) (BIND TABLE ?TABLE-0 LAKE))", "answer":"((iliamna) (becharof) (teshekpuk) (salton sea) (okeechobee) (michigan) (michigan) (pontchartrain) (superior) (huron) (michigan) (erie) (st. clair) (superior) (lake of the woods) (red) (rainy) (erie) (ontario) (champlain) (erie) (erie) (great salt lake) (champlain) (superior) (michigan))", "goal-answer":"((iliamna) (becharof) (teshekpuk) (salton sea) (okeechobee) (michigan) (michigan) (pontchartrain) (superior) (huron) (michigan) (erie) (st. clair) (superior) (lake of the woods) (red) (rainy) (erie) (ontario) (champlain) (erie) (erie) (great salt lake) (champlain) (superior) (michigan))"},
{"question":"show me all the major lakes in the us ", "sql-query":"SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 ;", "s-sql-query":"(SELECT LAKEALIAS0.LAKE_NAME FROM (AS LAKE LAKEALIAS0) WHERE (> LAKEALIAS0.AREA 750))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 AREA) (BIND COLUMN ?COLUMN-3 LAKE_NAME) (BIND CONCEPT ?COMPARATOR-0 750) (BIND CONCEPT ?ALIAS-0 LAKEALIAS0) (BIND TABLE ?TABLE-0 LAKE))", "answer":"((iliamna) (becharof) (teshekpuk) (salton sea) (okeechobee) (michigan) (michigan) (pontchartrain) (superior) (huron) (michigan) (erie) (st. clair) (superior) (lake of the woods) (red) (rainy) (erie) (ontario) (champlain) (erie) (erie) (great salt lake) (champlain) (superior) (michigan))", "goal-answer":"((iliamna) (becharof) (teshekpuk) (salton sea) (okeechobee) (michigan) (michigan) (pontchartrain) (superior) (huron) (michigan) (erie) (st. clair) (superior) (lake of the woods) (red) (rainy) (erie) (ontario) (champlain) (erie) (erie) (great salt lake) (champlain) (superior) (michigan))"},
{"question":"name all the lakes of us", "sql-query":"SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 ;", "s-sql-query":"(SELECT LAKEALIAS0.LAKE_NAME FROM (AS LAKE LAKEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 LAKE_NAME) (BIND CONCEPT ?ALIAS-0 LAKEALIAS0) (BIND TABLE ?TABLE-0 LAKE))", "answer":"((iliamna) (becharof) (teshekpuk) (naknek) (salton sea) (tahoe) (okeechobee) (michigan) (michigan) (pontchartrain) (superior) (huron) (michigan) (erie) (st. clair) (superior) (lake of the woods) (red) (rainy) (mille lacs) (flathead) (tahoe) (erie) (ontario) (champlain) (erie) (erie) (great salt lake) (champlain) (superior) (michigan) (winnebago))", "goal-answer":"((iliamna) (becharof) (teshekpuk) (naknek) (salton sea) (tahoe) (okeechobee) (michigan) (michigan) (pontchartrain) (superior) (huron) (michigan) (erie) (st. clair) (superior) (lake of the woods) (red) (rainy) (mille lacs) (flathead) (tahoe) (erie) (ontario) (champlain) (erie) (erie) (great salt lake) (champlain) (superior) (michigan) (winnebago))"},
{"question":"how many major rivers cross ohio", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = 'ohio' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (AND (> RIVERALIAS0.LENGTH 750) (= RIVERALIAS0.TRAVERSE ohio)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (GREATER-THAN ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 LENGTH) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND COLUMN ?COLUMN-4 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 ohio) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((2))", "goal-answer":"((2))"},
{"question":"what state has the shortest river", "sql-query":"SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.TRAVERSE) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MIN RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (DISTINCT ?AGGREGATOR-1 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((delaware) (new jersey) (new york) (pennsylvania))", "goal-answer":"((delaware) (new jersey) (new york) (pennsylvania))"},
{"question":"what states does the shortest river run through", "sql-query":"SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.TRAVERSE) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MIN RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (DISTINCT ?AGGREGATOR-1 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((delaware) (new jersey) (new york) (pennsylvania))", "goal-answer":"((delaware) (new jersey) (new york) (pennsylvania))"},
{"question":"how many states are next to major rivers", "sql-query":"SELECT COUNT( DISTINCT RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "s-sql-query":"(SELECT (COUNT (DISTINCT RIVERALIAS0.TRAVERSE)) FROM (AS RIVER RIVERALIAS0) WHERE (> RIVERALIAS0.LENGTH 750))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 LENGTH) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((33))", "goal-answer":"((33))"},
{"question":"what state borders the least states excluding alaska and excluding hawaii", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias0 ON STATEalias0.STATE_NAME = BORDER_INFOalias0.STATE_NAME WHERE STATEalias0.STATE_NAME <> 'alaska' AND STATEalias0.STATE_NAME <> 'hawaii' GROUP BY STATEalias0.STATE_NAME HAVING COUNT( BORDER_INFOalias0.BORDER ) = ( SELECT MIN( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias0 , STATEalias1.STATE_NAME FROM STATE AS STATEalias1 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias1 ON STATEalias1.STATE_NAME = BORDER_INFOalias1.STATE_NAME WHERE STATEalias1.STATE_NAME <> 'alaska' AND STATEalias1.STATE_NAME <> 'hawaii' GROUP BY STATEalias1.STATE_NAME ) AS DERIVED_TABLEalias0 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) LEFT-JOIN (AS BORDER_INFO BORDER_INFOALIAS0) ON (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.STATE_NAME) WHERE (AND (<> STATEALIAS0.STATE_NAME alaska) (<> STATEALIAS0.STATE_NAME hawaii)) GROUP-BY STATEALIAS0.STATE_NAME HAVING (= (COUNT BORDER_INFOALIAS0.BORDER) (SELECT (MIN DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0) FROM (AS (SELECT (AS (COUNT BORDER_INFOALIAS1.BORDER) DERIVED_FIELDALIAS0) STATEALIAS1.STATE_NAME FROM (AS STATE STATEALIAS1) LEFT-JOIN (AS BORDER_INFO BORDER_INFOALIAS1) ON (= STATEALIAS1.STATE_NAME BORDER_INFOALIAS1.STATE_NAME) WHERE (AND (<> STATEALIAS1.STATE_NAME alaska) (<> STATEALIAS1.STATE_NAME hawaii)) GROUP-BY STATEALIAS1.STATE_NAME) DERIVED_TABLEALIAS0))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-3 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-4 ?COLUMN-10) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (MIN ?AGGREGATOR-1 ?COLUMN-3) (COUNT ?AGGREGATOR-2 ?COLUMN-1) (AS ?FILTER-0 ?AGGREGATOR-2 ?COLUMN-9) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-4) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-3) (EQUALS ?FILTER-3 ?COLUMN-7 ?COLUMN-5) (DIFFERENT ?FILTER-4 ?COLUMN-7 ?COMPARATOR-1) (DIFFERENT ?FILTER-5 ?COLUMN-7 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (GROUP-BY ?FILTER-7 ?COLUMN-7) (WHERE ?FILTER-8 ?FILTER-6) (ON ?FILTER-9 ?FILTER-3) (LEFT-JOIN ?FILTER-10 ?FILTER-2) (FROM ?FILTER-11 ?FILTER-1) (AS ?FILTER-12 ?RESULT-2 ?ALIAS-2) (FROM ?FILTER-13 ?FILTER-12) (EQUALS ?FILTER-14 ?AGGREGATOR-0 ?RESULT-1) (HAVING ?FILTER-15 ?FILTER-14) (GROUP-BY ?FILTER-16 ?COLUMN-6) (DIFFERENT ?FILTER-17 ?COLUMN-6 ?COMPARATOR-1) (DIFFERENT ?FILTER-18 ?COLUMN-6 ?COMPARATOR-0) (AND ?FILTER-19 ?FILTER-17 ?FILTER-18) (WHERE ?FILTER-20 ?FILTER-19) (EQUALS ?FILTER-21 ?COLUMN-6 ?COLUMN-4) (ON ?FILTER-22 ?FILTER-21) (AS ?FILTER-23 ?TABLE-0 ?ALIAS-1) (LEFT-JOIN ?FILTER-24 ?FILTER-23) (AS ?FILTER-25 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-26 ?FILTER-25) (SELECT ?RESULT-0 ?COLUMN-6 ?FILTER-26 ?FILTER-24 ?FILTER-22 ?FILTER-20 ?FILTER-16 ?FILTER-15) (SELECT ?RESULT-1 ?AGGREGATOR-1 ?FILTER-13) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?COLUMN-7) (SELECT ?RESULT-2 ?COMMA-CLAUSE-1 ?FILTER-11 ?FILTER-10 ?FILTER-9 ?FILTER-8 ?FILTER-7) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-8 BORDER) (BIND CONCEPT ?COMPARATOR-0 hawaii) (BIND CONCEPT ?COMPARATOR-1 alaska) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-2 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-4 STATEALIAS1) (BIND CONCEPT ?ALIAS-5 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((maine))", "goal-answer":"((maine))"},
{"question":"what is the highest point in the smallest state", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))) (= STATEALIAS0.STATE_NAME HIGHLOWALIAS0.STATE_NAME)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?RESULT-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-7 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-7 ?FILTER-6) (FROM ?FILTER-8 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-5) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-8 AREA) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 HIGHEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 STATE))", "answer":"((tenleytown))", "goal-answer":"((tenleytown))"},
{"question":"what is the height of mount mckinley", "sql-query":"SELECT MOUNTAINalias0.MOUNTAIN_ALTITUDE FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = 'mckinley' ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.MOUNTAIN_ALTITUDE FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.MOUNTAIN_NAME mckinley))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 MOUNTAIN_NAME) (BIND COLUMN ?COLUMN-3 MOUNTAIN_ALTITUDE) (BIND CONCEPT ?COMPARATOR-0 mckinley) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((6194))", "goal-answer":"((6194))"},
{"question":"what is the highest point in the state with the smallest population", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT STATEalias1.STATE_NAME FROM STATE AS STATEalias1 WHERE STATEalias1.POPULATION = ( SELECT MIN( STATEalias2.POPULATION ) FROM STATE AS STATEalias2 ) ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.STATE_NAME HIGHLOWALIAS0.STATE_NAME) (IN STATEALIAS0.STATE_NAME (SELECT STATEALIAS1.STATE_NAME FROM (AS STATE STATEALIAS1) WHERE (= STATEALIAS1.POPULATION (SELECT (MIN STATEALIAS2.POPULATION) FROM (AS STATE STATEALIAS2)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-3 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-0 ?COLUMN-9) (EQUALS ?FILTER-0 ?COLUMN-5 ?COLUMN-6) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (MIN ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-2) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-5 ?RESULT-1) (AND ?FILTER-8 ?FILTER-0 ?FILTER-7) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-12 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-3) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 POPULATION) (BIND COLUMN ?COLUMN-7 HIGHEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS2) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 STATE))", "answer":"((mount mckinley))", "goal-answer":"((mount mckinley))"},
{"question":"which rivers run through the state with the lowest elevation in the usa", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MIN ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-9 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND CONCEPT ?ALIAS-2 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((mississippi) (mississippi) (red) (ouachita) (pearl))", "goal-answer":"((mississippi) (mississippi) (red) (ouachita) (pearl))"},
{"question":"what rivers run through the state with the lowest point in the usa", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MIN ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-9 LOWEST_ELEVATION) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 HIGHLOWALIAS1) (BIND CONCEPT ?ALIAS-2 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((mississippi) (mississippi) (red) (ouachita) (pearl))", "goal-answer":"((mississippi) (mississippi) (red) (ouachita) (pearl))"},
{"question":"what mountains are in alaska", "sql-query":"SELECT MOUNTAINalias0.MOUNTAIN_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.STATE_NAME = 'alaska' ;", "s-sql-query":"(SELECT MOUNTAINALIAS0.MOUNTAIN_NAME FROM (AS MOUNTAIN MOUNTAINALIAS0) WHERE (= MOUNTAINALIAS0.STATE_NAME alaska))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 MOUNTAIN_NAME) (BIND CONCEPT ?COMPARATOR-0 alaska) (BIND CONCEPT ?ALIAS-0 MOUNTAINALIAS0) (BIND TABLE ?TABLE-0 MOUNTAIN))", "answer":"((mckinley) (st. elias) (foraker) (bona) (blackburn) (kennedy) (sanford) (south buttress) (vancouver) (churchill) (fairweather) (hubbard) (bear) (east buttress) (hunter) (alverstone) (browne tower) (wrangell))", "goal-answer":"((mckinley) (st. elias) (foraker) (bona) (blackburn) (kennedy) (sanford) (south buttress) (vancouver) (churchill) (fairweather) (hubbard) (bear) (east buttress) (hunter) (alverstone) (browne tower) (wrangell))"},
{"question":"how many states have major rivers", "sql-query":"SELECT COUNT( DISTINCT RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "s-sql-query":"(SELECT (COUNT (DISTINCT RIVERALIAS0.TRAVERSE)) FROM (AS RIVER RIVERALIAS0) WHERE (> RIVERALIAS0.LENGTH 750))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 LENGTH) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((33))", "goal-answer":"((33))"},
{"question":"what is the smallest state through which the longest river runs", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias2.TRAVERSE FROM RIVER AS RIVERalias2 WHERE RIVERalias2.LENGTH = ( SELECT MAX( RIVERalias3.LENGTH ) FROM RIVER AS RIVERalias3 ) ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))))) (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS2.TRAVERSE FROM (AS RIVER RIVERALIAS2) WHERE (= RIVERALIAS2.LENGTH (SELECT (MAX RIVERALIAS3.LENGTH) FROM (AS RIVER RIVERALIAS3)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-2 ?ALIAS-4 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-12) (DOT ?COLUMN-4 ?ALIAS-5 ?COLUMN-12) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-14) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-14) (DOT ?COLUMN-7 ?ALIAS-5 ?COLUMN-13) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-14) (DOT ?COLUMN-9 ?ALIAS-0 ?COLUMN-13) (DOT ?COLUMN-10 ?ALIAS-4 ?COLUMN-14) (MIN ?AGGREGATOR-0 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-5) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-4) (MAX ?AGGREGATOR-1 ?COLUMN-6) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-3) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-10 ?RESULT-5) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-4 ?RESULT-4) (WHERE ?FILTER-8 ?FILTER-7) (FROM ?FILTER-9 ?FILTER-0) (EQUALS ?FILTER-10 ?COLUMN-9 ?RESULT-3) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-2) (MAX ?AGGREGATOR-2 ?COLUMN-5) (AS ?FILTER-12 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-13 ?FILTER-12) (EQUALS ?FILTER-14 ?COLUMN-8 ?RESULT-2) (WHERE ?FILTER-15 ?FILTER-14) (FROM ?FILTER-16 ?FILTER-11) (IN ?FILTER-17 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-18 ?FILTER-10 ?FILTER-17) (WHERE ?FILTER-19 ?FILTER-18) (AS ?FILTER-20 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-21 ?FILTER-20) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-21 ?FILTER-19) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-16 ?FILTER-15) (SELECT ?RESULT-2 ?AGGREGATOR-2 ?FILTER-13) (SELECT ?RESULT-3 ?AGGREGATOR-0 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-4 ?COLUMN-2 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-5 ?AGGREGATOR-1 ?FILTER-3) (BIND COLUMN ?COLUMN-14 LENGTH) (BIND COLUMN ?COLUMN-13 AREA) (BIND COLUMN ?COLUMN-12 STATE_NAME) (BIND COLUMN ?COLUMN-11 TRAVERSE) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS3) (BIND CONCEPT ?ALIAS-2 RIVERALIAS2) (BIND CONCEPT ?ALIAS-3 RIVERALIAS1) (BIND CONCEPT ?ALIAS-4 RIVERALIAS0) (BIND CONCEPT ?ALIAS-5 STATEALIAS1) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE))", "answer":"((iowa))", "goal-answer":"((iowa))"},
{"question":"what is the largest state traversed by the mississippi river", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))) (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS1.TRAVERSE FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.RIVER_NAME mississippi)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-12) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-12 RIVER_NAME) (BIND COLUMN ?COLUMN-11 AREA) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE))", "answer":"((minnesota))", "goal-answer":"((minnesota))"},
{"question":"what is the largest of the state that the rio grande runs through", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'rio grande' ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = 'rio grande' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME rio grande))))) (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS1.TRAVERSE FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.RIVER_NAME rio grande)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-12) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-3 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-12 RIVER_NAME) (BIND COLUMN ?COLUMN-11 AREA) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 rio grande) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE))", "answer":"((texas))", "goal-answer":"((texas))"},
{"question":"how many rivers run through the states bordering colorado", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'colorado' ) ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME colorado))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (COUNT ?AGGREGATOR-0 ?COLUMN-3) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 RIVER_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((38))", "goal-answer":"((38))"},
{"question":"what is the longest river that does not run through texas", "sql-query":"SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME NOT IN ( SELECT RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 WHERE RIVERalias2.TRAVERSE = 'texas' ) ) AND RIVERalias0.RIVER_NAME NOT IN ( SELECT RIVERalias3.RIVER_NAME FROM RIVER AS RIVERalias3 WHERE RIVERalias3.TRAVERSE = 'texas' ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1) WHERE (NOT (IN RIVERALIAS1.RIVER_NAME (SELECT RIVERALIAS2.RIVER_NAME FROM (AS RIVER RIVERALIAS2) WHERE (= RIVERALIAS2.TRAVERSE texas)))))) (NOT (IN RIVERALIAS0.RIVER_NAME (SELECT RIVERALIAS3.RIVER_NAME FROM (AS RIVER RIVERALIAS3) WHERE (= RIVERALIAS3.TRAVERSE texas))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-3 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-3 ?RESULT-3) (NOT ?FILTER-6 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (FROM ?FILTER-8 ?FILTER-0) (EQUALS ?FILTER-9 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-10 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-11 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-12 ?FILTER-11) (FROM ?FILTER-13 ?FILTER-10) (IN ?FILTER-14 ?COLUMN-4 ?RESULT-1) (NOT ?FILTER-15 ?FILTER-14) (AND ?FILTER-16 ?FILTER-9 ?FILTER-15) (WHERE ?FILTER-17 ?FILTER-16) (AS ?FILTER-18 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-19 ?FILTER-18) (DISTINCT ?AGGREGATOR-1 ?COLUMN-4) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-19 ?FILTER-17) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 TRAVERSE) (BIND COLUMN ?COLUMN-10 LENGTH) (BIND COLUMN ?COLUMN-9 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS3) (BIND CONCEPT ?ALIAS-2 RIVERALIAS2) (BIND CONCEPT ?ALIAS-3 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((missouri))", "goal-answer":"((missouri))"},
{"question":"what are the largest cities in the states that border the largest state", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION IN ( SELECT DERIVED_TABLEalias1.DERIVED_FIELDalias0 FROM ( SELECT MAX( CITYalias1.POPULATION ) AS DERIVED_FIELDalias0 , STATEalias0.STATE_NAME FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = CITYalias1.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) GROUP BY STATEalias0.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (IN CITYALIAS0.POPULATION (SELECT DERIVED_TABLEALIAS1.DERIVED_FIELDALIAS0 FROM (AS (SELECT (AS (MAX CITYALIAS1.POPULATION) DERIVED_FIELDALIAS0) STATEALIAS0.STATE_NAME FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.STATE_NAME CITYALIAS1.STATE_NAME) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) GROUP-BY BORDER_INFOALIAS0.BORDER HAVING (= (COUNT 1) (SELECT (MAX DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS1) FROM (AS (SELECT BORDER_INFOALIAS1.BORDER (AS (COUNT 1) DERIVED_FIELDALIAS1) FROM (AS BORDER_INFO BORDER_INFOALIAS1) GROUP-BY BORDER_INFOALIAS1.BORDER) DERIVED_TABLEALIAS0)))))) GROUP-BY STATEALIAS0.STATE_NAME) DERIVED_TABLEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-14) (DOT ?COLUMN-4 ?ALIAS-5 ?COLUMN-12) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-12) (DOT ?COLUMN-6 ?ALIAS-2 ?COLUMN-13) (DOT ?COLUMN-7 ?ALIAS-7 ?COLUMN-14) (DOT ?COLUMN-8 ?ALIAS-6 ?COLUMN-15) (DOT ?COLUMN-9 ?ALIAS-7 ?COLUMN-15) (MAX ?AGGREGATOR-0 ?COLUMN-7) (AS ?FILTER-0 ?AGGREGATOR-0 ?COLUMN-11) (AS ?FILTER-1 ?TABLE-2 ?ALIAS-7) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-6) (EQUALS ?FILTER-3 ?COLUMN-8 ?COLUMN-9) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-5) (COUNT ?AGGREGATOR-1 ?COMPARATOR-0) (MAX ?AGGREGATOR-2 ?COLUMN-6) (AS ?FILTER-5 ?AGGREGATOR-1 ?COLUMN-13) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-3) (GROUP-BY ?FILTER-7 ?COLUMN-5) (FROM ?FILTER-8 ?FILTER-6) (AS ?FILTER-9 ?RESULT-5 ?ALIAS-2) (FROM ?FILTER-10 ?FILTER-9) (EQUALS ?FILTER-11 ?AGGREGATOR-1 ?RESULT-4) (HAVING ?FILTER-12 ?FILTER-11) (GROUP-BY ?FILTER-13 ?COLUMN-4) (FROM ?FILTER-14 ?FILTER-4) (IN ?FILTER-15 ?COLUMN-8 ?RESULT-3) (AND ?FILTER-16 ?FILTER-3 ?FILTER-15) (GROUP-BY ?FILTER-17 ?COLUMN-8) (WHERE ?FILTER-18 ?FILTER-16) (COMMA ?COMMA-CLAUSE-2 ?FILTER-1 ?FILTER-2) (FROM ?FILTER-19 ?COMMA-CLAUSE-2) (AS ?FILTER-20 ?RESULT-2 ?ALIAS-1) (FROM ?FILTER-21 ?FILTER-20) (IN ?FILTER-22 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-23 ?FILTER-22) (AS ?FILTER-24 ?TABLE-2 ?ALIAS-0) (FROM ?FILTER-25 ?FILTER-24) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-25 ?FILTER-23) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-21) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?COLUMN-8) (SELECT ?RESULT-2 ?COMMA-CLAUSE-1 ?FILTER-19 ?FILTER-18 ?FILTER-17) (SELECT ?RESULT-3 ?COLUMN-4 ?FILTER-14 ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-4 ?AGGREGATOR-2 ?FILTER-10) (COMMA ?COMMA-CLAUSE-3 ?COLUMN-5 ?FILTER-5) (SELECT ?RESULT-5 ?COMMA-CLAUSE-3 ?FILTER-8 ?FILTER-7) (BIND COLUMN ?COLUMN-15 STATE_NAME) (BIND COLUMN ?COLUMN-14 POPULATION) (BIND COLUMN ?COLUMN-13 DERIVED_FIELDALIAS1) (BIND COLUMN ?COLUMN-12 BORDER) (BIND COLUMN ?COLUMN-11 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-10 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS1) (BIND CONCEPT ?ALIAS-2 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-4 DERIVED_FIELDALIAS1) (BIND CONCEPT ?ALIAS-5 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-6 STATEALIAS0) (BIND CONCEPT ?ALIAS-7 CITYALIAS1) (BIND CONCEPT ?ALIAS-8 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE) (BIND TABLE ?TABLE-2 CITY))", "answer":"((st. louis) (memphis))", "goal-answer":"((st. louis) (memphis))"},
{"question":"what state has no rivers", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (NOT (IN STATEALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (IN ?FILTER-2 ?COLUMN-2 ?RESULT-1) (NOT ?FILTER-3 ?FILTER-2) (WHERE ?FILTER-4 ?FILTER-3) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-6 ?FILTER-4) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 TRAVERSE) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((alaska) (hawaii) (maine) (rhode island))", "goal-answer":"((alaska) (hawaii) (maine) (rhode island))"},
{"question":"how many rivers are in the state with the highest point", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM HIGHLOW AS HIGHLOWalias0 , RIVER AS RIVERalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND RIVERalias0.TRAVERSE = HIGHLOWalias0.STATE_NAME ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS HIGHLOW HIGHLOWALIAS0) (AS RIVER RIVERALIAS0) WHERE (AND (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))) (= RIVERALIAS0.TRAVERSE HIGHLOWALIAS0.STATE_NAME)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-9) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?RESULT-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-7 ?TABLE-1 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-7 ?FILTER-6) (FROM ?FILTER-8 ?COMMA-CLAUSE-1) (COUNT ?AGGREGATOR-1 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-8 ?FILTER-5) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-9 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND CONCEPT ?ALIAS-2 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((4))", "goal-answer":"((4))"},
{"question":"what state has the most cities", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) GROUP-BY CITYALIAS0.STATE_NAME) (DESC (COUNT 1))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (DESC ?FILTER-3 ?AGGREGATOR-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-2 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"what is the capital of the largest state", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((juneau))", "goal-answer":"((juneau))"},
{"question":"what is the capital city of the largest state in the us", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 AREA) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((juneau))", "goal-answer":"((juneau))"},
{"question":"how many cities are in montana", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = 'montana' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.STATE_NAME montana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((2))", "goal-answer":"((2))"},
{"question":"how many cities are in louisiana", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = 'louisiana' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.STATE_NAME louisiana))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 louisiana) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((8))", "goal-answer":"((8))"},
{"question":"how many cities does texas have", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.STATE_NAME texas))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((30))", "goal-answer":"((30))"},
{"question":"what is the area of the states", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((51700.0D0) (591000.0D0) (114000.0D0) (53200.0D0) (158000.0D0) (104000.0D0) (5020.0D0) (2044.0D0) (1100.0D0) (68664.0D0) (58900.0D0) (6471.0D0) (83000.0D0) (56300.0D0) (36200.0D0) (56300.0D0) (82300.0D0) (82300.0D0) (47700.0D0) (33265.0D0) (10460.0D0) (8284.0D0) (58500.0D0) (84400.0D0) (47700.0D0) (69700.0D0) (147000.0D0) (77300.0D0) (110500.0D0) (9279.0D0) (7787.0D0) (121600.0D0) (49100.0D0) (52670.0D0) (70700.0D0) (41300.0D0) (69950.0D0) (97073.0D0) (45308.0D0) (1212.0D0) (31113.0D0) (77116.0D0) (42140.0D0) (266807.0D0) (84900.0D0) (9614.0D0) (40760.0D0) (68139.0D0) (24200.0D0) (56153.0D0) (97809.0D0))", "goal-answer":"((51700.0D0) (591000.0D0) (114000.0D0) (53200.0D0) (158000.0D0) (104000.0D0) (5020.0D0) (2044.0D0) (1100.0D0) (68664.0D0) (58900.0D0) (6471.0D0) (83000.0D0) (56300.0D0) (36200.0D0) (56300.0D0) (82300.0D0) (82300.0D0) (47700.0D0) (33265.0D0) (10460.0D0) (8284.0D0) (58500.0D0) (84400.0D0) (47700.0D0) (69700.0D0) (147000.0D0) (77300.0D0) (110500.0D0) (9279.0D0) (7787.0D0) (121600.0D0) (49100.0D0) (52670.0D0) (70700.0D0) (41300.0D0) (69950.0D0) (97073.0D0) (45308.0D0) (1212.0D0) (31113.0D0) (77116.0D0) (42140.0D0) (266807.0D0) (84900.0D0) (9614.0D0) (40760.0D0) (68139.0D0) (24200.0D0) (56153.0D0) (97809.0D0))"},
{"question":"how many states in the us does the shortest river run through", "sql-query":"SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.TRAVERSE) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MIN RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (COUNT ?AGGREGATOR-1 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 LENGTH) (BIND COLUMN ?COLUMN-4 TRAVERSE) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((4))", "goal-answer":"((4))"},
{"question":"what is the average population per square km in the us", "sql-query":"SELECT SUM( STATEalias0.POPULATION ) / SUM( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (/ (SUM STATEALIAS0.POPULATION) (SUM STATEALIAS0.AREA)) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SUM ?AGGREGATOR-0 ?COLUMN-2) (SUM ?AGGREGATOR-1 ?COLUMN-1) (DIVIDED-BY ?FILTER-2 ?AGGREGATOR-0 ?AGGREGATOR-1) (SELECT ?RESULT-0 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((61.360433870167015D0))", "goal-answer":"((61.360433870167015D0))"},
{"question":"what rivers flow through states that border the state with the largest population", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-3 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-2 ?COLUMN-12) (AS ?FILTER-0 ?TABLE-2 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-6) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-7 ?RESULT-3) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-8 ?FILTER-7) (FROM ?FILTER-9 ?FILTER-0) (IN ?FILTER-10 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-11 ?FILTER-10) (AS ?FILTER-12 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-13 ?FILTER-12) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-13 ?FILTER-11) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-2 ?COLUMN-3 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-3 ?AGGREGATOR-0 ?FILTER-3) (BIND COLUMN ?COLUMN-12 POPULATION) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 TRAVERSE) (BIND COLUMN ?COLUMN-9 BORDER) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE) (BIND TABLE ?TABLE-2 BORDER_INFO))", "answer":"((colorado) (colorado) (snake) (columbia) (gila))", "goal-answer":"((colorado) (colorado) (snake) (columbia) (gila))"},
{"question":"what are the major cities in the largest state", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (= CITYALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-0 ?COLUMN-10) (GREATER-THAN ?FILTER-0 ?COLUMN-6 ?COMPARATOR-0) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (EQUALS ?FILTER-7 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-8 ?FILTER-0 ?FILTER-7) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-11 ?FILTER-10) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-11 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-3) (BIND COLUMN ?COLUMN-10 POPULATION) (BIND COLUMN ?COLUMN-9 AREA) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 STATE))", "answer":"((anchorage))", "goal-answer":"((anchorage))"},
{"question":"what is the area of the smallest state", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-3) (MIN ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((1100.0D0))", "goal-answer":"((1100.0D0))"},
{"question":"which states border the longest river in the usa", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MAX RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-9 LENGTH) (BIND COLUMN ?COLUMN-8 STATE_NAME) (BIND COLUMN ?COLUMN-7 TRAVERSE) (BIND COLUMN ?COLUMN-6 BORDER) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota) (iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska) (north dakota) (south dakota) (wyoming) (idaho) (south dakota) (iowa) (missouri) (kansas) (colorado) (wyoming) (minnesota) (south dakota) (montana) (north dakota) (minnesota) (iowa) (nebraska) (wyoming) (montana))", "goal-answer":"((minnesota) (wisconsin) (illinois) (missouri) (nebraska) (south dakota) (iowa) (illinois) (kentucky) (tennessee) (arkansas) (oklahoma) (kansas) (nebraska) (north dakota) (south dakota) (wyoming) (idaho) (south dakota) (iowa) (missouri) (kansas) (colorado) (wyoming) (minnesota) (south dakota) (montana) (north dakota) (minnesota) (iowa) (nebraska) (wyoming) (montana))"},
{"question":"what is the population density of the state with the smallest population", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MIN( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MIN STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND COLUMN ?COLUMN-4 DENSITY) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((0.6798646362098139D0))", "goal-answer":"((0.6798646362098139D0))"},
{"question":"how many states border the mississippi river", "sql-query":"SELECT COUNT( DISTINCT BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' ) ;", "s-sql-query":"(SELECT (COUNT (DISTINCT BORDER_INFOALIAS0.BORDER)) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (IN BORDER_INFOALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.RIVER_NAME mississippi))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (DISTINCT ?AGGREGATOR-0 ?COLUMN-3) (COUNT ?AGGREGATOR-1 ?AGGREGATOR-0) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 RIVER_NAME) (BIND COLUMN ?COLUMN-7 BORDER) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 RIVER))", "answer":"((24))", "goal-answer":"((24))"},
{"question":"what states have a capital that is the highest point in the state", "sql-query":"SELECT STATEalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = HIGHLOWalias0.HIGHEST_POINT ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL HIGHLOWALIAS0.HIGHEST_POINT))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-2 ?COLUMN-3) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-3 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-4 ?FILTER-1) (BIND COLUMN ?COLUMN-6 HIGHEST_POINT) (BIND COLUMN ?COLUMN-5 CAPITAL) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 STATE))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what is the population of the capital of the smallest state", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = ( SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME (SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MIN STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MIN ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (EQUALS ?FILTER-6 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-9 AREA) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 STATE))", "answer":"((638333))", "goal-answer":"((638333))"},
{"question":"what is the population of the capital of the largest state", "sql-query":"SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = ( SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.POPULATION FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME (SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (EQUALS ?FILTER-6 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-9 AREA) (BIND COLUMN ?COLUMN-8 CITY_NAME) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 STATE))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what is the lowest point of the state with the largest area", "sql-query":"SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT STATEalias1.STATE_NAME FROM STATE AS STATEalias1 WHERE STATEalias1.AREA = ( SELECT MAX( STATEalias2.AREA ) FROM STATE AS STATEalias2 ) ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.STATE_NAME HIGHLOWALIAS0.STATE_NAME) (IN STATEALIAS0.STATE_NAME (SELECT STATEALIAS1.STATE_NAME FROM (AS STATE STATEALIAS1) WHERE (= STATEALIAS1.AREA (SELECT (MAX STATEALIAS2.AREA) FROM (AS STATE STATEALIAS2)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-3 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-0 ?COLUMN-9) (EQUALS ?FILTER-0 ?COLUMN-5 ?COLUMN-6) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (MAX ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-2) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-5 ?RESULT-1) (AND ?FILTER-8 ?FILTER-0 ?FILTER-7) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-12 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-3) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 AREA) (BIND COLUMN ?COLUMN-7 LOWEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS2) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 STATE))", "answer":"((pacific ocean))", "goal-answer":"((pacific ocean))"},
{"question":"what state has the smallest capital", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( DERIVED_TABLEalias0.POPULATION ) FROM ( SELECT CITYalias1.POPULATION FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) AS DERIVED_TABLEalias0 ) ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.POPULATION (SELECT (MIN DERIVED_TABLEALIAS0.POPULATION) FROM (AS (SELECT CITYALIAS1.POPULATION FROM (AS CITY CITYALIAS1) (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL CITYALIAS1.CITY_NAME)) DERIVED_TABLEALIAS0))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-3 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-3 ?COLUMN-10) (MIN ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-5 ?COLUMN-6) (WHERE ?FILTER-3 ?FILTER-2) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-4 ?COMMA-CLAUSE-1) (AS ?FILTER-5 ?RESULT-2 ?ALIAS-1) (FROM ?FILTER-6 ?FILTER-5) (EQUALS ?FILTER-7 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-8 ?FILTER-7) (AS ?FILTER-9 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-10 ?FILTER-9) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-10 ?FILTER-8) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-6) (SELECT ?RESULT-2 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-10 CITY_NAME) (BIND COLUMN ?COLUMN-9 CAPITAL) (BIND COLUMN ?COLUMN-8 POPULATION) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND CONCEPT ?ALIAS-3 CITYALIAS1) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 CITY))", "answer":"((missouri))", "goal-answer":"((missouri))"},
{"question":"what states border states that border the state with the largest population", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 , BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.BORDER = BORDER_INFOalias0.STATE_NAME AND BORDER_INFOalias1.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (AND (= BORDER_INFOALIAS1.BORDER BORDER_INFOALIAS0.STATE_NAME) (IN BORDER_INFOALIAS1.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-8) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (EQUALS ?FILTER-0 ?COLUMN-6 ?COLUMN-7) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (MAX ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-8 ?FILTER-0 ?FILTER-7) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-12 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-3) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 BORDER) (BIND COLUMN ?COLUMN-8 POPULATION) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND CONCEPT ?ALIAS-3 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((utah) (colorado) (new mexico) (california) (nevada) (idaho) (utah) (arizona) (california) (oregon) (washington) (idaho) (nevada) (california))", "goal-answer":"((utah) (colorado) (new mexico) (california) (nevada) (idaho) (utah) (arizona) (california) (oregon) (washington) (idaho) (nevada) (california))"},
{"question":"what is the capital of the state that borders the most states", "sql-query":"SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS STATE STATEALIAS0) WHERE (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) GROUP-BY BORDER_INFOALIAS0.BORDER HAVING (= (COUNT 1) (SELECT (MAX DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0) FROM (AS (SELECT BORDER_INFOALIAS1.BORDER (AS (COUNT 1) DERIVED_FIELDALIAS0) FROM (AS BORDER_INFO BORDER_INFOALIAS1) GROUP-BY BORDER_INFOALIAS1.BORDER) DERIVED_TABLEALIAS0))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-4 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-4) (COUNT ?AGGREGATOR-0 ?COMPARATOR-0) (MAX ?AGGREGATOR-1 ?COLUMN-5) (AS ?FILTER-1 ?AGGREGATOR-0 ?COLUMN-9) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-2) (GROUP-BY ?FILTER-3 ?COLUMN-4) (FROM ?FILTER-4 ?FILTER-2) (AS ?FILTER-5 ?RESULT-3 ?ALIAS-1) (FROM ?FILTER-6 ?FILTER-5) (EQUALS ?FILTER-7 ?AGGREGATOR-0 ?RESULT-2) (HAVING ?FILTER-8 ?FILTER-7) (GROUP-BY ?FILTER-9 ?COLUMN-3) (FROM ?FILTER-10 ?FILTER-0) (IN ?FILTER-11 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-12 ?FILTER-11) (AS ?FILTER-13 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-14 ?FILTER-13) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-14 ?FILTER-12) (SELECT ?RESULT-1 ?COLUMN-3 ?FILTER-10 ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-2 ?AGGREGATOR-1 ?FILTER-6) (COMMA ?COMMA-CLAUSE-1 ?COLUMN-4 ?FILTER-1) (SELECT ?RESULT-3 ?COMMA-CLAUSE-1 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-9 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-8 BORDER) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-3 DERIVED_FIELDALIAS0) (BIND CONCEPT ?ALIAS-4 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((jefferson city) (nashville))", "goal-answer":"((jefferson city) (nashville))"},
{"question":"what is the size of the largest state in the usa", "sql-query":"SELECT MAX( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (MAX STATEALIAS0.AREA) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((591000.0D0))", "goal-answer":"((591000.0D0))"},
{"question":"what is the area of the largest state", "sql-query":"SELECT MAX( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (MAX STATEALIAS0.AREA) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (MAX ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((591000.0D0))", "goal-answer":"((591000.0D0))"},
{"question":"what is the size of the largest state in the usa", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-3) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((591000.0D0))", "goal-answer":"((591000.0D0))"},
{"question":"what is the area of the largest state", "sql-query":"SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "s-sql-query":"(SELECT STATEALIAS0.AREA FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-3) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-3 AREA) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND TABLE ?TABLE-0 STATE))", "answer":"((591000.0D0))", "goal-answer":"((591000.0D0))"},
{"question":"of the states washed by the mississippi river which has the lowest point", "sql-query":"SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 , RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'mississippi' AND RIVERalias0.TRAVERSE = HIGHLOWalias1.STATE_NAME ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.STATE_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.LOWEST_ELEVATION (SELECT (MIN HIGHLOWALIAS1.LOWEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1) (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.RIVER_NAME mississippi) (= RIVERALIAS0.TRAVERSE HIGHLOWALIAS1.STATE_NAME)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-10) (MIN ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-2 ?COLUMN-6 ?COMPARATOR-0) (EQUALS ?FILTER-3 ?COLUMN-4 ?COLUMN-5) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (EQUALS ?FILTER-7 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-8 ?FILTER-7) (AS ?FILTER-9 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-10 ?FILTER-9) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-10 ?FILTER-8) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-6 ?FILTER-5) (BIND COLUMN ?COLUMN-10 RIVER_NAME) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 LOWEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 mississippi) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND CONCEPT ?ALIAS-2 HIGHLOWALIAS1) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((louisiana))", "goal-answer":"((louisiana))"},
{"question":"how many rivers in texas are longer than the red", "sql-query":"SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > ALL ( SELECT RIVERalias1.LENGTH FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = 'red' ) AND RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT (COUNT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (AND (> RIVERALIAS0.LENGTH (ALL (SELECT RIVERALIAS1.LENGTH FROM (AS RIVER RIVERALIAS1) WHERE (= RIVERALIAS1.RIVER_NAME red)))) (= RIVERALIAS0.TRAVERSE texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-0 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-1) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (ALL ?FILTER-4 ?RESULT-1) (GREATER-THAN ?FILTER-5 ?COLUMN-5 ?FILTER-4) (EQUALS ?FILTER-6 ?COLUMN-3 ?COMPARATOR-0) (AND ?FILTER-7 ?FILTER-5 ?FILTER-6) (WHERE ?FILTER-8 ?FILTER-7) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-10 ?FILTER-9) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-10 ?FILTER-8) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-8 LENGTH) (BIND COLUMN ?COLUMN-7 RIVER_NAME) (BIND COLUMN ?COLUMN-6 TRAVERSE) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?COMPARATOR-1 red) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((1))", "goal-answer":"((1))"},
{"question":"which capitals are not major cities", "sql-query":"SELECT STATEalias0.CAPITAL FROM CITY AS CITYalias0 , STATE AS STATEalias0 WHERE CITYalias0.POPULATION <= 150000 AND STATEalias0.CAPITAL = CITYalias0.CITY_NAME ;", "s-sql-query":"(SELECT STATEALIAS0.CAPITAL FROM (AS CITY CITYALIAS0) (AS STATE STATEALIAS0) WHERE (AND (<= CITYALIAS0.POPULATION 150000) (= STATEALIAS0.CAPITAL CITYALIAS0.CITY_NAME)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (LOWER-EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-0) (EQUALS ?FILTER-1 ?COLUMN-1 ?COLUMN-2) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-5 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-6 ?FILTER-3) (BIND COLUMN ?COLUMN-6 POPULATION) (BIND COLUMN ?COLUMN-5 CITY_NAME) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND CONCEPT ?COMPARATOR-0 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 STATE))", "answer":"((concord) (richmond) (hartford) (tallahassee) (albany) (boise) (springfield) (topeka) (lansing) (springfield) (columbia) (trenton) (albany) (raleigh) (springfield) (salem) (columbia) (charleston) (charleston))", "goal-answer":"((concord) (richmond) (hartford) (tallahassee) (albany) (boise) (springfield) (topeka) (lansing) (springfield) (columbia) (trenton) (albany) (raleigh) (springfield) (salem) (columbia) (charleston) (charleston))"},
{"question":"how high is the highest point in the largest state", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))) (= STATEALIAS0.STATE_NAME HIGHLOWALIAS0.STATE_NAME)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-8) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-5 ?RESULT-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-7 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-7 ?FILTER-6) (FROM ?FILTER-8 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-5) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-8 AREA) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 HIGHEST_ELEVATION) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 STATE))", "answer":"((6194))", "goal-answer":"((6194))"},
{"question":"give me the cities in usa", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-1) (BIND COLUMN ?COLUMN-2 CITY_NAME) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((birmingham) (mobile) (montgomery) (huntsville) (tuscaloosa) (anchorage) (phoenix) (tucson) (mesa) (tempe) (glendale) (scottsdale) (little rock) (fort smith) (north little rock) (los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (stockton) (glendale) (fremont) (torrance) (garden grove) (san bernardino) (pasadena) (east los angeles) (oxnard) (modesto) (sunnyvale) (bakersfield) (concord) (berkeley) (fullerton) (inglewood) (hayward) (pomona) (orange) (ontario) (santa monica) (santa clara) (citrus heights) (norwalk) (burbank) (chula vista) (santa rosa) (downey) (costa mesa) (compton) (carson) (salinas) (west covina) (vallejo) (el monte) (daly city) (thousand oaks) (san mateo) (simi valley) (oceanside) (richmond) (lakewood) (santa barbara) (el cajon) (ventura) (westminster) (whittier) (south gate) (alhambra) (buena park) (san leandro) (alameda) (newport beach) (escondido) (irvine) (mountain view) (fairfield) (redondo beach) (scotts valley) (denver) (colorado springs) (aurora) (lakewood) (pueblo) (arvada) (boulder) (fort collins) (bridgeport) (hartford) (new haven) (waterbury) (stamford) (norwalk) (new britain) (west hartford) (danbury) (greenwich) (bristol) (meriden) (wilmington) (washington) (jacksonville) (miami) (tampa) (st. petersburg) (fort lauderdale) (orlando) (hollywood) (miami beach) (clearwater) (tallahassee) (gainesville) (kendall) (west palm beach) (largo) (pensacola) (atlanta) (columbus) (savannah) (macon) (albany) (honolulu) (ewa) (koolaupoko) (boise) (chicago) (rockford) (peoria) (springfield) (decatur) (aurora) (joliet) (evanston) (waukegan) (arlington heights) (elgin) (cicero) (oak lawn) (skokie) (champaign) (indianapolis) (fort wayne) (gary) (evansville) (south bend) (hammond) (muncie) (anderson) (terre haute) (des moines) (cedar rapids) (davenport) (sioux city) (waterloo) (dubuque) (wichita) (kansas city) (topeka) (overland park) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (lafayette) (lake charles) (kenner) (monroe) (portland) (baltimore) (silver spring) (dundalk) (bethesda) (boston) (worcester) (springfield) (new bedford) (cambridge) (brockton) (fall river) (lowell) (quincy) (newton) (lynn) (somerville) (framingham) (lawrence) (waltham) (medford) (detroit) (grand rapids) (warren) (flint) (lansing) (sterling heights) (ann arbor) (livonia) (dearborn) (westland) (kalamazoo) (taylor) (saginaw) (pontiac) (st. clair shores) (southfield) (clinton) (royal oak) (dearborn heights) (troy) (waterford) (wyoming) (redford) (farmington hills) (minneapolis) (st. paul) (duluth) (bloomington) (rochester) (jackson) (st. louis) (kansas city) (springfield) (independence) (st. joseph) (columbia) (billings) (great falls) (omaha) (lincoln) (las vegas) (reno) (manchester) (nashua) (newark) (jersey city) (paterson) (elizabeth) (trenton) (woodbridge) (camden) (east orange) (clifton) (edison) (cherry hill) (bayonne) (middletown) (irvington) (albuquerque) (new york) (buffalo) (rochester) (yonkers) (syracuse) (albany) (cheektowaga) (utica) (niagara falls) (new rochelle) (schenectady) (mount vernon) (irondequoit) (levittown) (charlotte) (greensboro) (raleigh) (winston-salem) (durham) (high point) (fayetteville) (fargo) (cleveland) (columbus) (cincinnati) (toledo) (akron) (dayton) (youngstown) (canton) (parma) (lorain) (springfield) (hamilton) (lakewood) (kettering) (euclid) (elyria) (oklahoma city) (tulsa) (lawton) (norman) (portland) (eugene) (salem) (philadelphia) (pittsburgh) (erie) (allentown) (scranton) (upper darby) (reading) (bethlehem) (lower merion) (abingdon) (bristol township) (penn hills) (altoona) (providence) (warwick) (cranston) (pawtucket) (columbia) (charleston) (north charleston) (greenville) (sioux falls) (memphis) (nashville) (knoxville) (chattanooga) (houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (amarillo) (garland) (beaumont) (pasadena) (irving) (waco) (abilene) (wichita falls) (laredo) (odessa) (brownsville) (san angelo) (richardson) (plano) (grand prairie) (midland) (tyler) (mesquite) (mcallen) (longview) (port arthur) (salt lake city) (provo) (west valley) (ogden) (norfolk) (virginia beach) (richmond) (arlington) (newport news) (hampton) (chesapeake) (portsmouth) (alexandria) (roanoke) (lynchburg) (seattle) (spokane) (tacoma) (bellevue) (charleston) (huntington) (milwaukee) (madison) (green bay) (racine) (kenosha) (west allis) (appleton) (casper))", "goal-answer":"((birmingham) (mobile) (montgomery) (huntsville) (tuscaloosa) (anchorage) (phoenix) (tucson) (mesa) (tempe) (glendale) (scottsdale) (little rock) (fort smith) (north little rock) (los angeles) (san diego) (san francisco) (san jose) (long beach) (oakland) (sacramento) (anaheim) (fresno) (santa ana) (riverside) (huntington beach) (stockton) (glendale) (fremont) (torrance) (garden grove) (san bernardino) (pasadena) (east los angeles) (oxnard) (modesto) (sunnyvale) (bakersfield) (concord) (berkeley) (fullerton) (inglewood) (hayward) (pomona) (orange) (ontario) (santa monica) (santa clara) (citrus heights) (norwalk) (burbank) (chula vista) (santa rosa) (downey) (costa mesa) (compton) (carson) (salinas) (west covina) (vallejo) (el monte) (daly city) (thousand oaks) (san mateo) (simi valley) (oceanside) (richmond) (lakewood) (santa barbara) (el cajon) (ventura) (westminster) (whittier) (south gate) (alhambra) (buena park) (san leandro) (alameda) (newport beach) (escondido) (irvine) (mountain view) (fairfield) (redondo beach) (scotts valley) (denver) (colorado springs) (aurora) (lakewood) (pueblo) (arvada) (boulder) (fort collins) (bridgeport) (hartford) (new haven) (waterbury) (stamford) (norwalk) (new britain) (west hartford) (danbury) (greenwich) (bristol) (meriden) (wilmington) (washington) (jacksonville) (miami) (tampa) (st. petersburg) (fort lauderdale) (orlando) (hollywood) (miami beach) (clearwater) (tallahassee) (gainesville) (kendall) (west palm beach) (largo) (pensacola) (atlanta) (columbus) (savannah) (macon) (albany) (honolulu) (ewa) (koolaupoko) (boise) (chicago) (rockford) (peoria) (springfield) (decatur) (aurora) (joliet) (evanston) (waukegan) (arlington heights) (elgin) (cicero) (oak lawn) (skokie) (champaign) (indianapolis) (fort wayne) (gary) (evansville) (south bend) (hammond) (muncie) (anderson) (terre haute) (des moines) (cedar rapids) (davenport) (sioux city) (waterloo) (dubuque) (wichita) (kansas city) (topeka) (overland park) (louisville) (lexington) (new orleans) (baton rouge) (shreveport) (metairie) (lafayette) (lake charles) (kenner) (monroe) (portland) (baltimore) (silver spring) (dundalk) (bethesda) (boston) (worcester) (springfield) (new bedford) (cambridge) (brockton) (fall river) (lowell) (quincy) (newton) (lynn) (somerville) (framingham) (lawrence) (waltham) (medford) (detroit) (grand rapids) (warren) (flint) (lansing) (sterling heights) (ann arbor) (livonia) (dearborn) (westland) (kalamazoo) (taylor) (saginaw) (pontiac) (st. clair shores) (southfield) (clinton) (royal oak) (dearborn heights) (troy) (waterford) (wyoming) (redford) (farmington hills) (minneapolis) (st. paul) (duluth) (bloomington) (rochester) (jackson) (st. louis) (kansas city) (springfield) (independence) (st. joseph) (columbia) (billings) (great falls) (omaha) (lincoln) (las vegas) (reno) (manchester) (nashua) (newark) (jersey city) (paterson) (elizabeth) (trenton) (woodbridge) (camden) (east orange) (clifton) (edison) (cherry hill) (bayonne) (middletown) (irvington) (albuquerque) (new york) (buffalo) (rochester) (yonkers) (syracuse) (albany) (cheektowaga) (utica) (niagara falls) (new rochelle) (schenectady) (mount vernon) (irondequoit) (levittown) (charlotte) (greensboro) (raleigh) (winston-salem) (durham) (high point) (fayetteville) (fargo) (cleveland) (columbus) (cincinnati) (toledo) (akron) (dayton) (youngstown) (canton) (parma) (lorain) (springfield) (hamilton) (lakewood) (kettering) (euclid) (elyria) (oklahoma city) (tulsa) (lawton) (norman) (portland) (eugene) (salem) (philadelphia) (pittsburgh) (erie) (allentown) (scranton) (upper darby) (reading) (bethlehem) (lower merion) (abingdon) (bristol township) (penn hills) (altoona) (providence) (warwick) (cranston) (pawtucket) (columbia) (charleston) (north charleston) (greenville) (sioux falls) (memphis) (nashville) (knoxville) (chattanooga) (houston) (dallas) (san antonio) (el paso) (fort worth) (austin) (corpus christi) (lubbock) (arlington) (amarillo) (garland) (beaumont) (pasadena) (irving) (waco) (abilene) (wichita falls) (laredo) (odessa) (brownsville) (san angelo) (richardson) (plano) (grand prairie) (midland) (tyler) (mesquite) (mcallen) (longview) (port arthur) (salt lake city) (provo) (west valley) (ogden) (norfolk) (virginia beach) (richmond) (arlington) (newport news) (hampton) (chesapeake) (portsmouth) (alexandria) (roanoke) (lynchburg) (seattle) (spokane) (tacoma) (bellevue) (charleston) (huntington) (milwaukee) (madison) (green bay) (racine) (kenosha) (west allis) (appleton) (casper))"},
{"question":"what is the highest point of the state with the largest area", "sql-query":"SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT STATEalias1.STATE_NAME FROM STATE AS STATEalias1 WHERE STATEalias1.AREA = ( SELECT MAX( STATEalias2.AREA ) FROM STATE AS STATEalias2 ) ) ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.HIGHEST_POINT FROM (AS HIGHLOW HIGHLOWALIAS0) (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.STATE_NAME HIGHLOWALIAS0.STATE_NAME) (IN STATEALIAS0.STATE_NAME (SELECT STATEALIAS1.STATE_NAME FROM (AS STATE STATEALIAS1) WHERE (= STATEALIAS1.AREA (SELECT (MAX STATEALIAS2.AREA) FROM (AS STATE STATEALIAS2)))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-3 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-8) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-0 ?COLUMN-9) (EQUALS ?FILTER-0 ?COLUMN-5 ?COLUMN-6) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-3) (MAX ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-2) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-4 ?RESULT-2) (WHERE ?FILTER-5 ?FILTER-4) (FROM ?FILTER-6 ?FILTER-1) (IN ?FILTER-7 ?COLUMN-5 ?RESULT-1) (AND ?FILTER-8 ?FILTER-0 ?FILTER-7) (WHERE ?FILTER-9 ?FILTER-8) (AS ?FILTER-10 ?TABLE-1 ?ALIAS-1) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?COMMA-CLAUSE-1) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-12 ?FILTER-9) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-6 ?FILTER-5) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-3) (BIND COLUMN ?COLUMN-9 STATE_NAME) (BIND COLUMN ?COLUMN-8 AREA) (BIND COLUMN ?COLUMN-7 HIGHEST_POINT) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND CONCEPT ?ALIAS-2 STATEALIAS2) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 HIGHLOW) (BIND TABLE ?TABLE-1 STATE))", "answer":"((mount mckinley))", "goal-answer":"((mount mckinley))"},
{"question":"where is new hampshire", "sql-query":"SELECT STATEalias0.COUNTRY_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'new hampshire' ;", "s-sql-query":"(SELECT STATEALIAS0.COUNTRY_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME new hampshire))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 COUNTRY_NAME) (BIND CONCEPT ?COMPARATOR-0 new hampshire) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((usa))", "goal-answer":"((usa))"},
{"question":"where is massachusetts", "sql-query":"SELECT STATEalias0.COUNTRY_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = 'massachusetts' ;", "s-sql-query":"(SELECT STATEALIAS0.COUNTRY_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.STATE_NAME massachusetts))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 STATE_NAME) (BIND COLUMN ?COLUMN-3 COUNTRY_NAME) (BIND CONCEPT ?COMPARATOR-0 massachusetts) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((usa))", "goal-answer":"((usa))"},
{"question":"what state has the largest urban population", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ORDER BY SUM( CITYalias0.POPULATION ) DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) GROUP-BY CITYALIAS0.STATE_NAME) (DESC (SUM CITYALIAS0.POPULATION))) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (GROUP-BY ?FILTER-1 ?COLUMN-1) (FROM ?FILTER-2 ?FILTER-0) (SUM ?AGGREGATOR-0 ?COLUMN-2) (DESC ?FILTER-3 ?AGGREGATOR-0) (ORDER-BY ?FILTER-4 ?RESULT-0 ?FILTER-3) (LIMIT ?FILTER-5 ?FILTER-4 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-2 ?FILTER-1) (BIND COLUMN ?COLUMN-4 POPULATION) (BIND COLUMN ?COLUMN-3 STATE_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((california))", "goal-answer":"((california))"},
{"question":"what state borders the least states", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias0 ON STATEalias0.STATE_NAME = BORDER_INFOalias0.STATE_NAME GROUP BY STATEalias0.STATE_NAME HAVING COUNT( BORDER_INFOalias0.BORDER ) = ( SELECT MIN( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias0 , STATEalias1.STATE_NAME FROM STATE AS STATEalias1 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias1 ON STATEalias1.STATE_NAME = BORDER_INFOalias1.STATE_NAME GROUP BY STATEalias1.STATE_NAME ) AS DERIVED_TABLEalias0 ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) LEFT-JOIN (AS BORDER_INFO BORDER_INFOALIAS0) ON (= STATEALIAS0.STATE_NAME BORDER_INFOALIAS0.STATE_NAME) GROUP-BY STATEALIAS0.STATE_NAME HAVING (= (COUNT BORDER_INFOALIAS0.BORDER) (SELECT (MIN DERIVED_TABLEALIAS0.DERIVED_FIELDALIAS0) FROM (AS (SELECT (AS (COUNT BORDER_INFOALIAS1.BORDER) DERIVED_FIELDALIAS0) STATEALIAS1.STATE_NAME FROM (AS STATE STATEALIAS1) LEFT-JOIN (AS BORDER_INFO BORDER_INFOALIAS1) ON (= STATEALIAS1.STATE_NAME BORDER_INFOALIAS1.STATE_NAME) GROUP-BY STATEALIAS1.STATE_NAME) DERIVED_TABLEALIAS0))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-3 ?COLUMN-8) (DOT ?COLUMN-2 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-3 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-4 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-3 ?COLUMN-10) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (MIN ?AGGREGATOR-1 ?COLUMN-3) (COUNT ?AGGREGATOR-2 ?COLUMN-1) (AS ?FILTER-0 ?AGGREGATOR-2 ?COLUMN-9) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-4) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-3) (EQUALS ?FILTER-3 ?COLUMN-6 ?COLUMN-7) (GROUP-BY ?FILTER-4 ?COLUMN-6) (ON ?FILTER-5 ?FILTER-3) (LEFT-JOIN ?FILTER-6 ?FILTER-2) (FROM ?FILTER-7 ?FILTER-1) (AS ?FILTER-8 ?RESULT-2 ?ALIAS-2) (FROM ?FILTER-9 ?FILTER-8) (EQUALS ?FILTER-10 ?AGGREGATOR-0 ?RESULT-1) (HAVING ?FILTER-11 ?FILTER-10) (GROUP-BY ?FILTER-12 ?COLUMN-4) (EQUALS ?FILTER-13 ?COLUMN-4 ?COLUMN-5) (ON ?FILTER-14 ?FILTER-13) (AS ?FILTER-15 ?TABLE-0 ?ALIAS-1) (LEFT-JOIN ?FILTER-16 ?FILTER-15) (AS ?FILTER-17 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-18 ?FILTER-17) (SELECT ?RESULT-0 ?COLUMN-4 ?FILTER-18 ?FILTER-16 ?FILTER-14 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-1 ?AGGREGATOR-1 ?FILTER-9) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?COLUMN-6) (SELECT ?RESULT-2 ?COMMA-CLAUSE-1 ?FILTER-7 ?FILTER-6 ?FILTER-5 ?FILTER-4) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 DERIVED_FIELDALIAS0) (BIND COLUMN ?COLUMN-8 BORDER) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-2 DERIVED_TABLEALIAS0) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-4 STATEALIAS1) (BIND CONCEPT ?ALIAS-5 DERIVED_FIELDALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((alaska) (hawaii))", "goal-answer":"((alaska) (hawaii))"},
{"question":"what are the major rivers in the us", "sql-query":"SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.RIVER_NAME) FROM (AS RIVER RIVERALIAS0) WHERE (> RIVERALIAS0.LENGTH 750))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (GREATER-THAN ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (DISTINCT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 LENGTH) (BIND COLUMN ?COLUMN-3 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 750) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((north platte) (canadian) (ouachita) (little missouri) (dakota) (cumberland) (arkansas) (ohio) (smoky hill) (white) (mississippi) (missouri) (yellowstone) (colorado) (gila) (wabash) (green) (cheyenne) (pearl) (cimarron) (red) (rio grande) (snake) (washita) (columbia) (pecos) (tennessee))", "goal-answer":"((north platte) (canadian) (ouachita) (little missouri) (dakota) (cumberland) (arkansas) (ohio) (smoky hill) (white) (mississippi) (missouri) (yellowstone) (colorado) (gila) (wabash) (green) (cheyenne) (pearl) (cimarron) (red) (rio grande) (snake) (washita) (columbia) (pecos) (tennessee))"},
{"question":"how many cities named austin are there in the usa", "sql-query":"SELECT COUNT( CITYalias0.CITY_NAME ) FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = 'austin' ;", "s-sql-query":"(SELECT (COUNT CITYALIAS0.CITY_NAME) FROM (AS CITY CITYALIAS0) WHERE (= CITYALIAS0.CITY_NAME austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (EQUALS ?FILTER-0 ?COLUMN-1 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (COUNT ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-2 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND TABLE ?TABLE-0 CITY))", "answer":"((1))", "goal-answer":"((1))"},
{"question":"how many people live in the smallest state bordering wyoming", "sql-query":"SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'wyoming' ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = 'wyoming' ) ;", "s-sql-query":"(SELECT STATEALIAS0.POPULATION FROM (AS STATE STATEALIAS0) WHERE (AND (= STATEALIAS0.POPULATION (SELECT (MAX STATEALIAS1.POPULATION) FROM (AS STATE STATEALIAS1) WHERE (IN STATEALIAS1.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME wyoming))))) (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS1.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS1) WHERE (= BORDER_INFOALIAS1.STATE_NAME wyoming)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-3 ?COLUMN-11) (DOT ?COLUMN-5 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-7 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-8 ?ALIAS-2 ?COLUMN-11) (MAX ?AGGREGATOR-0 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-3) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-2) (EQUALS ?FILTER-2 ?COLUMN-8 ?COMPARATOR-0) (WHERE ?FILTER-3 ?FILTER-2) (FROM ?FILTER-4 ?FILTER-1) (IN ?FILTER-5 ?COLUMN-4 ?RESULT-3) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-0) (EQUALS ?FILTER-8 ?COLUMN-7 ?RESULT-2) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-10 ?COLUMN-6 ?COMPARATOR-0) (WHERE ?FILTER-11 ?FILTER-10) (FROM ?FILTER-12 ?FILTER-9) (IN ?FILTER-13 ?COLUMN-3 ?RESULT-1) (AND ?FILTER-14 ?FILTER-8 ?FILTER-13) (WHERE ?FILTER-15 ?FILTER-14) (AS ?FILTER-16 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-17 ?FILTER-16) (SELECT ?RESULT-0 ?COLUMN-7 ?FILTER-17 ?FILTER-15) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-12 ?FILTER-11) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-6) (SELECT ?RESULT-3 ?COLUMN-2 ?FILTER-4 ?FILTER-3) (BIND COLUMN ?COLUMN-11 STATE_NAME) (BIND COLUMN ?COLUMN-10 POPULATION) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 wyoming) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-3 STATEALIAS1) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((2889000))", "goal-answer":"((2889000))"},
{"question":"what is the length of the colorado river in texas", "sql-query":"SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = 'colorado' AND RIVERalias0.TRAVERSE = 'texas' ;", "s-sql-query":"(SELECT RIVERALIAS0.LENGTH FROM (AS RIVER RIVERALIAS0) WHERE (AND (= RIVERALIAS0.RIVER_NAME colorado) (= RIVERALIAS0.TRAVERSE texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (EQUALS ?FILTER-0 ?COLUMN-3 ?COMPARATOR-1) (EQUALS ?FILTER-1 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-5 ?FILTER-3) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND COLUMN ?COLUMN-5 TRAVERSE) (BIND COLUMN ?COLUMN-4 LENGTH) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?COMPARATOR-1 colorado) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND TABLE ?TABLE-0 RIVER))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what is the population density in the state with capital austin", "sql-query":"SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'austin' ;", "s-sql-query":"(SELECT STATEALIAS0.DENSITY FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL austin))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 CAPITAL) (BIND COLUMN ?COLUMN-3 DENSITY) (BIND CONCEPT ?COMPARATOR-0 austin) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((53.33068472716233D0))", "goal-answer":"((53.33068472716233D0))"},
{"question":"how long is the shortest river in the usa", "sql-query":"SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "s-sql-query":"(SELECT (DISTINCT RIVERALIAS0.LENGTH) FROM (AS RIVER RIVERALIAS0) WHERE (= RIVERALIAS0.LENGTH (SELECT (MIN RIVERALIAS1.LENGTH) FROM (AS RIVER RIVERALIAS1))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-3) (MIN ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (FROM ?FILTER-1 ?FILTER-0) (EQUALS ?FILTER-2 ?COLUMN-2 ?RESULT-1) (WHERE ?FILTER-3 ?FILTER-2) (AS ?FILTER-4 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-5 ?FILTER-4) (DISTINCT ?AGGREGATOR-1 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-5 ?FILTER-3) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-3 LENGTH) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND TABLE ?TABLE-0 RIVER))", "answer":"((451))", "goal-answer":"((451))"},
{"question":"what is the elevation of death valley", "sql-query":"SELECT HIGHLOWalias0.LOWEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_POINT = 'death valley' ;", "s-sql-query":"(SELECT HIGHLOWALIAS0.LOWEST_ELEVATION FROM (AS HIGHLOW HIGHLOWALIAS0) WHERE (= HIGHLOWALIAS0.LOWEST_POINT death valley))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-3) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-4) (EQUALS ?FILTER-0 ?COLUMN-2 ?COMPARATOR-0) (WHERE ?FILTER-1 ?FILTER-0) (AS ?FILTER-2 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-3 ?FILTER-1) (BIND COLUMN ?COLUMN-4 LOWEST_POINT) (BIND COLUMN ?COLUMN-3 LOWEST_ELEVATION) (BIND CONCEPT ?COMPARATOR-0 death valley) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 HIGHLOW))", "answer":"((-85))", "goal-answer":"((-85))"},
{"question":"what is the average population of the us by state", "sql-query":"SELECT AVG ( STATEalias0.POPULATION ) FROM STATE AS STATEalias0 ;", "s-sql-query":"(SELECT (AVG STATEALIAS0.POPULATION) FROM (AS STATE STATEALIAS0))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-2) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-1 ?FILTER-0) (AVERAGE ?AGGREGATOR-0 ?COLUMN-1) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-1) (BIND COLUMN ?COLUMN-2 POPULATION) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND TABLE ?TABLE-0 STATE))", "answer":"((4415590666666666667/1000000000000))", "goal-answer":"((4415590666666666667/1000000000000))"},
{"question":"what rivers flow through the largest state", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT RIVERALIAS0.RIVER_NAME FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.TRAVERSE (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-4) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (IN ?FILTER-6 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-9 AREA) (BIND COLUMN ?COLUMN-8 TRAVERSE) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 RIVER_NAME) (BIND CONCEPT ?ALIAS-0 RIVERALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 STATE))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"what states border states that border states that border states that border texas", "sql-query":"SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 , BORDER_INFO AS BORDER_INFOalias1 , BORDER_INFO AS BORDER_INFOalias2 , BORDER_INFO AS BORDER_INFOalias3 WHERE BORDER_INFOalias1.BORDER = BORDER_INFOalias0.STATE_NAME AND BORDER_INFOalias2.BORDER = BORDER_INFOalias1.STATE_NAME AND BORDER_INFOalias3.BORDER = BORDER_INFOalias2.STATE_NAME AND BORDER_INFOalias3.STATE_NAME = 'texas' ;", "s-sql-query":"(SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) (AS BORDER_INFO BORDER_INFOALIAS1) (AS BORDER_INFO BORDER_INFOALIAS2) (AS BORDER_INFO BORDER_INFOALIAS3) WHERE (AND (AND (AND (= BORDER_INFOALIAS1.BORDER BORDER_INFOALIAS0.STATE_NAME) (= BORDER_INFOALIAS2.BORDER BORDER_INFOALIAS1.STATE_NAME)) (= BORDER_INFOALIAS3.BORDER BORDER_INFOALIAS2.STATE_NAME)) (= BORDER_INFOALIAS3.STATE_NAME texas)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-3 ?COLUMN-10) (DOT ?COLUMN-3 ?ALIAS-3 ?COLUMN-9) (DOT ?COLUMN-4 ?ALIAS-2 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-9) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-10) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-10) (EQUALS ?FILTER-0 ?COLUMN-7 ?COLUMN-8) (EQUALS ?FILTER-1 ?COLUMN-5 ?COLUMN-6) (AND ?FILTER-2 ?FILTER-0 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-3 ?COLUMN-4) (AND ?FILTER-4 ?FILTER-2 ?FILTER-3) (EQUALS ?FILTER-5 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-3) (AS ?FILTER-9 ?TABLE-0 ?ALIAS-2) (AS ?FILTER-10 ?TABLE-0 ?ALIAS-1) (AS ?FILTER-11 ?TABLE-0 ?ALIAS-0) (COMMA ?COMMA-CLAUSE-1 ?FILTER-11 ?FILTER-10) (COMMA ?COMMA-CLAUSE-2 ?COMMA-CLAUSE-1 ?FILTER-9) (COMMA ?COMMA-CLAUSE-3 ?COMMA-CLAUSE-2 ?FILTER-8) (FROM ?FILTER-12 ?COMMA-CLAUSE-3) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-12 ?FILTER-7) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS1) (BIND CONCEPT ?ALIAS-2 BORDER_INFOALIAS2) (BIND CONCEPT ?ALIAS-3 BORDER_INFOALIAS3) (BIND TABLE ?TABLE-0 BORDER_INFO))", "answer":"((tennessee) (tennessee) (tennessee) (georgia) (georgia) (georgia) (florida) (florida) (florida) (mississippi) (mississippi) (mississippi) (utah) (utah) (utah) (utah) (colorado) (colorado) (colorado) (colorado) (new mexico) (new mexico) (new mexico) (new mexico) (california) (california) (california) (california) (nevada) (nevada) (nevada) (nevada) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oregon) (nevada) (arizona) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (utah) (utah) (utah) (utah) (utah) (utah) (wyoming) (wyoming) (wyoming) (wyoming) (wyoming) (wyoming) (north carolina) (south carolina) (florida) (alabama) (tennessee) (montana) (wyoming) (utah) (nevada) (oregon) (washington) (wisconsin) (wisconsin) (indiana) (indiana) (kentucky) (kentucky) (missouri) (missouri) (iowa) (iowa) (minnesota) (minnesota) (wisconsin) (wisconsin) (illinois) (illinois) (missouri) (missouri) (nebraska) (nebraska) (south dakota) (south dakota) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (indiana) (indiana) (indiana) (ohio) (ohio) (ohio) (west virginia) (west virginia) (west virginia) (virginia) (virginia) (virginia) (tennessee) (tennessee) (tennessee) (missouri) (missouri) (missouri) (illinois) (illinois) (illinois) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (tennessee) (tennessee) (tennessee) (tennessee) (alabama) (alabama) (alabama) (alabama) (louisiana) (louisiana) (louisiana) (louisiana) (arkansas) (arkansas) (arkansas) (arkansas) (iowa) (iowa) (iowa) (iowa) (iowa) (iowa) (illinois) (illinois) (illinois) (illinois) (illinois) (illinois) (kentucky) (kentucky) (kentucky) (kentucky) (kentucky) (kentucky) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (south dakota) (south dakota) (south dakota) (south dakota) (south dakota) (iowa) (iowa) (iowa) (iowa) (iowa) (missouri) (missouri) (missouri) (missouri) (missouri) (kansas) (kansas) (kansas) (kansas) (kansas) (colorado) (colorado) (colorado) (colorado) (colorado) (wyoming) (wyoming) (wyoming) (wyoming) (wyoming) (idaho) (idaho) (utah) (utah) (arizona) (arizona) (california) (california) (oregon) (oregon) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (utah) (utah) (utah) (utah) (utah) (utah) (utah) (utah) (utah) (utah) (virginia) (south carolina) (georgia) (tennessee) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (kentucky) (kentucky) (kentucky) (kentucky) (kentucky) (kentucky) (virginia) (virginia) (virginia) (virginia) (virginia) (virginia) (north carolina) (north carolina) (north carolina) (north carolina) (north carolina) (north carolina) (georgia) (georgia) (georgia) (georgia) (georgia) (georgia) (alabama) (alabama) (alabama) (alabama) (alabama) (alabama) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (wyoming) (wyoming) (wyoming) (wyoming) (colorado) (colorado) (colorado) (colorado) (new mexico) (new mexico) (new mexico) (new mexico) (arizona) (arizona) (arizona) (arizona) (nevada) (nevada) (nevada) (nevada) (idaho) (idaho) (idaho) (idaho) (maryland) (district of columbia) (north carolina) (tennessee) (kentucky) (west virginia) (montana) (montana) (montana) (south dakota) (south dakota) (south dakota) (nebraska) (nebraska) (nebraska) (colorado) (colorado) (colorado) (utah) (utah) (utah) (idaho) (idaho) (idaho))", "goal-answer":"((tennessee) (tennessee) (tennessee) (georgia) (georgia) (georgia) (florida) (florida) (florida) (mississippi) (mississippi) (mississippi) (utah) (utah) (utah) (utah) (colorado) (colorado) (colorado) (colorado) (new mexico) (new mexico) (new mexico) (new mexico) (california) (california) (california) (california) (nevada) (nevada) (nevada) (nevada) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oregon) (nevada) (arizona) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (utah) (utah) (utah) (utah) (utah) (utah) (wyoming) (wyoming) (wyoming) (wyoming) (wyoming) (wyoming) (north carolina) (south carolina) (florida) (alabama) (tennessee) (montana) (wyoming) (utah) (nevada) (oregon) (washington) (wisconsin) (wisconsin) (indiana) (indiana) (kentucky) (kentucky) (missouri) (missouri) (iowa) (iowa) (minnesota) (minnesota) (wisconsin) (wisconsin) (illinois) (illinois) (missouri) (missouri) (nebraska) (nebraska) (south dakota) (south dakota) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (indiana) (indiana) (indiana) (ohio) (ohio) (ohio) (west virginia) (west virginia) (west virginia) (virginia) (virginia) (virginia) (tennessee) (tennessee) (tennessee) (missouri) (missouri) (missouri) (illinois) (illinois) (illinois) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (tennessee) (tennessee) (tennessee) (tennessee) (alabama) (alabama) (alabama) (alabama) (louisiana) (louisiana) (louisiana) (louisiana) (arkansas) (arkansas) (arkansas) (arkansas) (iowa) (iowa) (iowa) (iowa) (iowa) (iowa) (illinois) (illinois) (illinois) (illinois) (illinois) (illinois) (kentucky) (kentucky) (kentucky) (kentucky) (kentucky) (kentucky) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (tennessee) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (nebraska) (south dakota) (south dakota) (south dakota) (south dakota) (south dakota) (iowa) (iowa) (iowa) (iowa) (iowa) (missouri) (missouri) (missouri) (missouri) (missouri) (kansas) (kansas) (kansas) (kansas) (kansas) (colorado) (colorado) (colorado) (colorado) (colorado) (wyoming) (wyoming) (wyoming) (wyoming) (wyoming) (idaho) (idaho) (utah) (utah) (arizona) (arizona) (california) (california) (oregon) (oregon) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (arizona) (utah) (utah) (utah) (utah) (utah) (utah) (utah) (utah) (utah) (utah) (virginia) (south carolina) (georgia) (tennessee) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (kansas) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (texas) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (colorado) (kentucky) (kentucky) (kentucky) (kentucky) (kentucky) (kentucky) (virginia) (virginia) (virginia) (virginia) (virginia) (virginia) (north carolina) (north carolina) (north carolina) (north carolina) (north carolina) (north carolina) (georgia) (georgia) (georgia) (georgia) (georgia) (georgia) (alabama) (alabama) (alabama) (alabama) (alabama) (alabama) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (mississippi) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (missouri) (missouri) (missouri) (missouri) (missouri) (missouri) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (oklahoma) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (arkansas) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (louisiana) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (new mexico) (wyoming) (wyoming) (wyoming) (wyoming) (colorado) (colorado) (colorado) (colorado) (new mexico) (new mexico) (new mexico) (new mexico) (arizona) (arizona) (arizona) (arizona) (nevada) (nevada) (nevada) (nevada) (idaho) (idaho) (idaho) (idaho) (maryland) (district of columbia) (north carolina) (tennessee) (kentucky) (west virginia) (montana) (montana) (montana) (south dakota) (south dakota) (south dakota) (nebraska) (nebraska) (nebraska) (colorado) (colorado) (colorado) (utah) (utah) (utah) (idaho) (idaho) (idaho))"},
{"question":"how many states border on the state whose capital is boston", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = 'boston' ) ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.CAPITAL boston))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-6) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-7) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-3 ?RESULT-1) (WHERE ?FILTER-5 ?FILTER-4) (AS ?FILTER-6 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-7 ?FILTER-6) (COUNT ?AGGREGATOR-0 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-0 ?FILTER-7 ?FILTER-5) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-7 CAPITAL) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 BORDER) (BIND CONCEPT ?COMPARATOR-0 boston) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((5))", "goal-answer":"((5))"},
{"question":"what are the major cities in the states through which the major river in virginia runs", "sql-query":"SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.LENGTH > 750 AND RIVERalias1.TRAVERSE = 'virginia' ) ) ;", "s-sql-query":"(SELECT CITYALIAS0.CITY_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (> CITYALIAS0.POPULATION 150000) (IN CITYALIAS0.STATE_NAME (SELECT RIVERALIAS0.TRAVERSE FROM (AS RIVER RIVERALIAS0) WHERE (IN RIVERALIAS0.RIVER_NAME (SELECT RIVERALIAS1.RIVER_NAME FROM (AS RIVER RIVERALIAS1) WHERE (AND (> RIVERALIAS1.LENGTH 750) (= RIVERALIAS1.TRAVERSE virginia))))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-0 ?COLUMN-9) (DOT ?COLUMN-2 ?ALIAS-2 ?COLUMN-12) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-11) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-10) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-11) (DOT ?COLUMN-6 ?ALIAS-1 ?COLUMN-12) (DOT ?COLUMN-7 ?ALIAS-1 ?COLUMN-13) (DOT ?COLUMN-8 ?ALIAS-0 ?COLUMN-14) (GREATER-THAN ?FILTER-0 ?COLUMN-8 ?COMPARATOR-2) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-1) (GREATER-THAN ?FILTER-3 ?COLUMN-7 ?COMPARATOR-1) (EQUALS ?FILTER-4 ?COLUMN-6 ?COMPARATOR-0) (AND ?FILTER-5 ?FILTER-3 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (FROM ?FILTER-7 ?FILTER-2) (IN ?FILTER-8 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-9 ?FILTER-8) (FROM ?FILTER-10 ?FILTER-1) (IN ?FILTER-11 ?COLUMN-4 ?RESULT-1) (AND ?FILTER-12 ?FILTER-0 ?FILTER-11) (WHERE ?FILTER-13 ?FILTER-12) (AS ?FILTER-14 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-15 ?FILTER-14) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-15 ?FILTER-13) (SELECT ?RESULT-1 ?COLUMN-2 ?FILTER-10 ?FILTER-9) (SELECT ?RESULT-2 ?COLUMN-3 ?FILTER-7 ?FILTER-6) (BIND COLUMN ?COLUMN-14 POPULATION) (BIND COLUMN ?COLUMN-13 LENGTH) (BIND COLUMN ?COLUMN-12 TRAVERSE) (BIND COLUMN ?COLUMN-11 RIVER_NAME) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 CITY_NAME) (BIND CONCEPT ?COMPARATOR-0 virginia) (BIND CONCEPT ?COMPARATOR-1 750) (BIND CONCEPT ?COMPARATOR-2 150000) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 RIVERALIAS1) (BIND CONCEPT ?ALIAS-2 RIVERALIAS0) (BIND TABLE ?TABLE-0 CITY) (BIND TABLE ?TABLE-1 RIVER))", "answer":"NIL", "goal-answer":"NIL"},
{"question":"which states does not border texas", "sql-query":"SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = 'texas' ) ;", "s-sql-query":"(SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (NOT (IN STATEALIAS0.STATE_NAME (SELECT BORDER_INFOALIAS0.BORDER FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME texas)))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-4) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-5) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-3 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (IN ?FILTER-4 ?COLUMN-2 ?RESULT-1) (NOT ?FILTER-5 ?FILTER-4) (WHERE ?FILTER-6 ?FILTER-5) (AS ?FILTER-7 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-8 ?FILTER-6) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-5 STATE_NAME) (BIND COLUMN ?COLUMN-4 BORDER) (BIND CONCEPT ?COMPARATOR-0 texas) (BIND CONCEPT ?ALIAS-0 STATEALIAS0) (BIND CONCEPT ?ALIAS-1 BORDER_INFOALIAS0) (BIND TABLE ?TABLE-0 STATE) (BIND TABLE ?TABLE-1 BORDER_INFO))", "answer":"((alabama) (alaska) (arizona) (california) (colorado) (connecticut) (delaware) (district of columbia) (florida) (georgia) (hawaii) (idaho) (illinois) (indiana) (iowa) (kansas) (kentucky) (maine) (maryland) (massachusetts) (michigan) (minnesota) (mississippi) (missouri) (montana) (nebraska) (nevada) (new hampshire) (new jersey) (new york) (north carolina) (north dakota) (ohio) (oregon) (pennsylvania) (rhode island) (south carolina) (south dakota) (tennessee) (texas) (utah) (vermont) (virginia) (washington) (west virginia) (wisconsin) (wyoming))", "goal-answer":"((alabama) (alaska) (arizona) (california) (colorado) (connecticut) (delaware) (district of columbia) (florida) (georgia) (hawaii) (idaho) (illinois) (indiana) (iowa) (kansas) (kentucky) (maine) (maryland) (massachusetts) (michigan) (minnesota) (mississippi) (missouri) (montana) (nebraska) (nevada) (new hampshire) (new jersey) (new york) (north carolina) (north dakota) (ohio) (oregon) (pennsylvania) (rhode island) (south carolina) (south dakota) (tennessee) (texas) (utah) (vermont) (virginia) (washington) (west virginia) (wisconsin) (wyoming))"},
{"question":"how many states border the largest state", "sql-query":"SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "s-sql-query":"(SELECT (COUNT BORDER_INFOALIAS0.BORDER) FROM (AS BORDER_INFO BORDER_INFOALIAS0) WHERE (= BORDER_INFOALIAS0.STATE_NAME (SELECT STATEALIAS0.STATE_NAME FROM (AS STATE STATEALIAS0) WHERE (= STATEALIAS0.AREA (SELECT (MAX STATEALIAS1.AREA) FROM (AS STATE STATEALIAS1))))))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-2 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-0 ?COLUMN-7) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-8) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (MAX ?AGGREGATOR-0 ?COLUMN-3) (AS ?FILTER-1 ?TABLE-1 ?ALIAS-1) (FROM ?FILTER-2 ?FILTER-1) (EQUALS ?FILTER-3 ?COLUMN-5 ?RESULT-2) (WHERE ?FILTER-4 ?FILTER-3) (FROM ?FILTER-5 ?FILTER-0) (EQUALS ?FILTER-6 ?COLUMN-4 ?RESULT-1) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (COUNT ?AGGREGATOR-1 ?COLUMN-2) (SELECT ?RESULT-0 ?AGGREGATOR-1 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?COLUMN-1 ?FILTER-5 ?FILTER-4) (SELECT ?RESULT-2 ?AGGREGATOR-0 ?FILTER-2) (BIND COLUMN ?COLUMN-8 AREA) (BIND COLUMN ?COLUMN-7 STATE_NAME) (BIND COLUMN ?COLUMN-6 BORDER) (BIND CONCEPT ?ALIAS-0 BORDER_INFOALIAS0) (BIND CONCEPT ?ALIAS-1 STATEALIAS1) (BIND CONCEPT ?ALIAS-2 STATEALIAS0) (BIND TABLE ?TABLE-0 BORDER_INFO) (BIND TABLE ?TABLE-1 STATE))", "answer":"((0))", "goal-answer":"((0))"},
{"question":"which state is the largest city in montana in", "sql-query":"SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = 'montana' ) AND CITYalias0.STATE_NAME = 'montana' ;", "s-sql-query":"(SELECT CITYALIAS0.STATE_NAME FROM (AS CITY CITYALIAS0) WHERE (AND (= CITYALIAS0.POPULATION (SELECT (MAX CITYALIAS1.POPULATION) FROM (AS CITY CITYALIAS1) WHERE (= CITYALIAS1.STATE_NAME montana))) (= CITYALIAS0.STATE_NAME montana)))", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-5) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-6) (DOT ?COLUMN-3 ?ALIAS-0 ?COLUMN-5) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-6) (MAX ?AGGREGATOR-0 ?COLUMN-1) (AS ?FILTER-0 ?TABLE-0 ?ALIAS-1) (EQUALS ?FILTER-1 ?COLUMN-4 ?COMPARATOR-0) (WHERE ?FILTER-2 ?FILTER-1) (FROM ?FILTER-3 ?FILTER-0) (EQUALS ?FILTER-4 ?COLUMN-3 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-2 ?COMPARATOR-0) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (AS ?FILTER-8 ?TABLE-0 ?ALIAS-0) (FROM ?FILTER-9 ?FILTER-8) (SELECT ?RESULT-0 ?COLUMN-2 ?FILTER-9 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3 ?FILTER-2) (BIND COLUMN ?COLUMN-6 STATE_NAME) (BIND COLUMN ?COLUMN-5 POPULATION) (BIND CONCEPT ?COMPARATOR-0 montana) (BIND CONCEPT ?ALIAS-0 CITYALIAS0) (BIND CONCEPT ?ALIAS-1 CITYALIAS1) (BIND TABLE ?TABLE-0 CITY))", "answer":"((montana))", "goal-answer":"((montana))"},
{"question":"what is the longest river in the state with the highest point", "sql-query":"SELECT RIVERalias0.RIVER_NAME FROM HIGHLOW AS HIGHLOWalias0 , RIVER AS RIVERalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND RIVERalias0.TRAVERSE = HIGHLOWalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "s-sql-query":"(LIMIT (ORDER-BY (SELECT RIVERALIAS0.RIVER_NAME FROM (AS HIGHLOW HIGHLOWALIAS0) (AS RIVER RIVERALIAS0) WHERE (AND (= HIGHLOWALIAS0.HIGHEST_ELEVATION (SELECT (MAX HIGHLOWALIAS1.HIGHEST_ELEVATION) FROM (AS HIGHLOW HIGHLOWALIAS1))) (= RIVERALIAS0.TRAVERSE HIGHLOWALIAS0.STATE_NAME))) (DESC RIVERALIAS0.LENGTH)) 1)", "predicate-network":"((DOT ?COLUMN-1 ?ALIAS-1 ?COLUMN-7) (DOT ?COLUMN-2 ?ALIAS-0 ?COLUMN-11) (DOT ?COLUMN-3 ?ALIAS-1 ?COLUMN-8) (DOT ?COLUMN-4 ?ALIAS-1 ?COLUMN-9) (DOT ?COLUMN-5 ?ALIAS-2 ?COLUMN-10) (DOT ?COLUMN-6 ?ALIAS-2 ?COLUMN-11) (AS ?FILTER-0 ?TABLE-1 ?ALIAS-2) (AS ?FILTER-1 ?TABLE-0 ?ALIAS-1) (MAX ?AGGREGATOR-0 ?COLUMN-2) (AS ?FILTER-2 ?TABLE-1 ?ALIAS-0) (FROM ?FILTER-3 ?FILTER-2) (EQUALS ?FILTER-4 ?COLUMN-6 ?RESULT-1) (EQUALS ?FILTER-5 ?COLUMN-4 ?COLUMN-5) (AND ?FILTER-6 ?FILTER-4 ?FILTER-5) (WHERE ?FILTER-7 ?FILTER-6) (COMMA ?COMMA-CLAUSE-1 ?FILTER-0 ?FILTER-1) (FROM ?FILTER-8 ?COMMA-CLAUSE-1) (DESC ?FILTER-9 ?COLUMN-3) (ORDER-BY ?FILTER-10 ?RESULT-0 ?FILTER-9) (LIMIT ?FILTER-11 ?FILTER-10 ?COMPARATOR-0) (SELECT ?RESULT-0 ?COLUMN-1 ?FILTER-8 ?FILTER-7) (SELECT ?RESULT-1 ?AGGREGATOR-0 ?FILTER-3) (BIND COLUMN ?COLUMN-11 HIGHEST_ELEVATION) (BIND COLUMN ?COLUMN-10 STATE_NAME) (BIND COLUMN ?COLUMN-9 TRAVERSE) (BIND COLUMN ?COLUMN-8 LENGTH) (BIND COLUMN ?COLUMN-7 RIVER_NAME) (BIND CONCEPT ?COMPARATOR-0 1) (BIND CONCEPT ?ALIAS-0 HIGHLOWALIAS1) (BIND CONCEPT ?ALIAS-1 RIVERALIAS0) (BIND CONCEPT ?ALIAS-2 HIGHLOWALIAS0) (BIND TABLE ?TABLE-0 RIVER) (BIND TABLE ?TABLE-1 HIGHLOW))", "answer":"((ohio))", "goal-answer":"((ohio))"}
]